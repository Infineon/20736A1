SECTION "Config Data Entries" 0
{
    # COMMAND "" 0x00                                                   - Not an allowed value

    # COMMAND "IF_PLL" 0x01                                             - Fixed header only

    # COMMAND "DS and VS Locations" 0x02                                - Fixed header only

    COMMAND "Temperature Correction Algorithm" 0x03
    {

        doc "Enables or disables the temperature correction algorithm"
        PARAM "Enable"
            bool8
            doc "Enables the temperature correction algorithm if 1.";
    }

    COMMAND "Patch Entry" 0x08
    {
        doc "Installs a code patch entry.  There are three types of patches.  The first type is a"
            "simple replacement of an 8-byte block of instructions with another, and therefore does"
            "not make use of the Code byte array.  The second type contains replacement instructions"
            "which vector to a contiguous block of code, loaded from the Code parameter.  The third"
            "type contains replacement instructions which vector to a fragmented block of code, "
            "loaded from the Code byte array of the Patch Entry config item, with other associated"
            "code segments being loaded from one or more Data Patch config items."
        PARAM "Patch index"
            uint8
            doc "The patch register index to be used"
            max = 64;
        PARAM "Break out block address"
            uint32
            doc "The address of the block of code to be replaced.  It must fall on a four-byte"
                "boundary.";
        PARAM "Replacement instructions"
            uint8[4]
            doc "The instructions to be executed in place of the block of code to be replaced.";
        PARAM "Code size"
            uint16
            doc "The size of the code segment to be loaded."
            binary_message_only
            encode_value = ByteArrayValidLength("Code");
        PARAM "Code address"
            uint32
            doc "The address to which to load the code bytes in the Code byte array.";
        PARAM "Code"
            uint8[0xFF00] omit_pad_bytes
            doc "The actual code instructions to be loaded to the address specified by Code address";
    }

    COMMAND "Early Init BB Registers" 0x09
    {
        doc "This item is used to initialize the BB registers early in the initialization"
            "process, while the configuration data dynamic section is being processed."
        PARAM "Num entries"
            uint8
            doc "An abstract parameter used only for encoding purposes, not present in the"
                "actual configuration item. When encoding the configuration item, determines"
                "the number of address/value pairs to include."
            not_in_binary_message
            decode_value = 0                    # Can only decode, not encode
            max = 10;
        PARAM "Register address[0]"
            uint32
            doc "Address of the baseband register"
            present_if ("Num entries" > 0);
        PARAM "Value[0]"
            uint32
            doc "Data to be written to the baseband register"
            present_if ("Num entries" > 0);
        PARAM "Register address[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Value[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Register address[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Value[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Register address[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Value[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Register address[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Value[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Register address[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Value[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Register address[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Value[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Register address[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Value[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Register address[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Value[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Register address[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Value[9]"
            uint32
            present_if ("Num entries" > 9);
    }

    COMMAND "Data" 0x0A
    {
        doc "Reads arbitrary data, which could be code, into an arbitrary location in RAM."
        PARAM "Address"
            uint32
            doc "The address to which the Data bytes are to be loaded.";
        PARAM "Data"
            uint8[0xFF00] omit_pad_bytes
            doc "The data bytes to be loaded to the Address specified.";
    }

    COMMAND "Function Call" 0x0B
    {
        doc "Calls a function at the address specified.  The call is made from Thumb mode using a"
            "BL instruction."
        PARAM "Address"
            uint32
            doc "The address of the function to be called.";
    }

    COMMAND "Application-specific Config" 0x16
    {
        doc "Defines Application-specific Configuration."
        PARAM "Data"
            uint8[1024] omit_pad_bytes
            doc "Specifies some values that will be used by firmware but are not defined in the other specified "
                "purpose entries Its length varies based on the data entry"
            valid_length = ByteArrayValidLength("Data")
            min = 1;
    }

    COMMAND "I2C Speed" 0x18
    {
        doc "This item is used to specify the I2C clock speed"
        PARAM "Speed"
            uint8
            doc "I2C Speed"
            enum
            {
                {0x00, "400 KHz"},
                {0x10, "100 KHz"},
                {0x20, "800 KHz"},
                {0x30, "1000 KHz"}
            };
    }

    COMMAND "Tx Power Table For Class 1.5 Devices" 0x1A
    {
        doc "This config item is used only for class 1.5 devices"
            "For class 2 devices, use the RF Attenuation Table item, 0x5E"
            "This command sets the Tx power in dB (signed char) and register values for each power step"
            "Class 1.5 devices may also be configured for class 2 power output levels"

	PARAM "FAB ID"
	    uint8
	    doc "FAB ID";

        PARAM "Radio Tx power mode"
            uint8
            doc "When set the radio regs will be configured for class 1.5 mode"
                "When cleared the radio regs will be configured for class 2 mode"
            enum
            {
                {0x0, "Class 2 mode"},
                {0x1, "Class 1.5 mode"}
            };
        PARAM "Power table length"
            uint8
            doc "The number of entries in the power control table, range is 2 to 8"
            min = 0x2
            max = 0x8;
        PARAM "Testmode power table length"
            uint8
            doc "The number of entries in the testmode power control table, range is 2 to 8"
            min = 0x2
            max = 0x8;
        PARAM "Tx power in dB[0]"
            uint8
            doc "The Tx power in dB to report for the corresponding register value";
        PARAM "Register value[0]"
            uint8
            doc "The register value to use for the Tx power at this step";
        PARAM "Tx power in dB[1]"
            int8;
        PARAM "Register value[1]"
            uint8;
        PARAM "Tx power in dB[2]"
            int8;
        PARAM "Register value[2]"
            uint8;
        PARAM "Tx power in dB[3]"
            int8;
        PARAM "Register value[3]"
            uint8;
        PARAM "Tx power in dB[4]"
            int8;
        PARAM "Register value[4]"
            uint8;
        PARAM "Tx power in dB[5]"
            int8;
        PARAM "Register value[5]"
            uint8;
        PARAM "Tx power in dB[6]"
            int8;
        PARAM "Register value[6]"
            uint8;
        PARAM "Tx power in dB[7]"
            int8;
        PARAM "Register value[7]"
            uint8;
        PARAM "Testmode Tx power in dB[0]"
            int8
            doc "The Tx power in dB to report for the corresponding register value";
        PARAM "Testmode register value[0]"
            uint8
            doc "The register value to use for the Tx power at this step";
        PARAM "Testmode Tx power in dB[1]"
            int8;
        PARAM "Testmode register value[1]"
            uint8;
        PARAM "Testmode Tx power in dB[2]"
            int8;
        PARAM "Testmode register value[2]"
            uint8;
        PARAM "Testmode Tx power in dB[3]"
            int8;
        PARAM "Testmode register value[3]"
            uint8;
        PARAM "Testmode Tx power in dB[4]"
            int8;
        PARAM "Testmode register value[4]"
            uint8;
        PARAM "Testmode Tx power in dB[5]"
            int8;
        PARAM "Testmode register value[5]"
            uint8;
        PARAM "Testmode Tx power in dB[6]"
            int8;
        PARAM "Testmode register value[6]"
            uint8;
        PARAM "Testmode Tx power in dB[7]"
            int8;
        PARAM "Testmode register value[7]"
            uint8;
    }

    COMMAND "Compressed data" 0x1B
    {
        doc "Reads and decompresses arbitrary data, which could be code, into an arbitrary location in RAM."
        PARAM "Address"
            uint32
            doc "The address to which the (decompressed) data bytes are to be loaded.";
        PARAM "Data"
            uint8[0xFF00] omit_pad_bytes
            doc "The compressed data bytes to be loaded to the Address specified.";
    }


   COMMAND "Device LPM Configuration" 0xAb
   {
        doc "Hid application Low Power mode configuration"
        PARAM "Disconnect Low Power Mode"
                uint8
                doc "LOW power mode set to HIDOFF when disconnected"
                      "LOW power mode set to ADP when disconnected"
                       "LOW power mode set to SLEEP when disconnected"
                enum
                {
                    { 0,     "SLEEP"},
                    { 1,     "HID_OFF"}
                };
         PARAM "wakeFromHidoffInMs"
               uint32
               doc "Time to wake up from hid-off in milliseconds. 0 for never. Default is 0"
               default = 0;
         PARAM "wakeFromHidoffRefClk"
               uint8
               doc "The reference clock to use to wake from hid-off - 32 KHz Ext or 128 KHz MIA"
               enum
               {
                    {0, "TIMED_WAKE_CLK_SRC_32KHZ"},
                    {1, "TIMED_WAKE_CLK_SRC_128KHZ"}
               };
   }


    COMMAND "GPIO Configuration" 0xA1
    {
         doc "Configures GPIO. 20730 has 3 GPIO ports (port0 - port2)."
             "Port 0 has 16 pins  (GPIO_0 to GPIO_15)"
             "Port 1 has 16 pins (GPIO_16 to GPIO_31)"
             "Port 2 has 8 pins (GPIO_32 to GPIO_39)"
             "The total is 40 pins. "
             "20733 has 4 GPIO ports (port0 - port3)."
             "Port 0 has 16 pins  (GPIO_0 to GPIO_15)"
             "Port 1 has 16 pins (GPIO_16 to GPIO_31)"
             "Port 2 has 16 pins (GPIO_32 to GPIO_47)"
             "Port 3 has 10 pins (GPIO_48 to GPIO_57)"
             "The total is 58 pins. "

         PARAM "GPIO Count"
            uint8
            doc "This defines the number of GPIO pin that will be configurated in the below configuration. If GPIO pin is not"
                "defined here, the pin will be configured as the default."
            min = 0
            max = 58;

         PARAM "Maximum Port Count"
            uint8
            doc "Defines the maximum number of ports that is used for the pins. 20730 has 3 GPIO ports; 20733 has 4 GPIO ports"
            not_in_binary_message
            decode_value = 0
            min = 0
            max = 4;

         PARAM "GPIO Port[0] Output Value"
            uint16
            doc "This variable indicates whether the output values of the pins of GPIO port0 are high when output is enabled."
            present_if ("Maximum Port Count" > 0);
         PARAM "GPIO Port[1] Output Value"
            uint16
            doc "This variable indicates whether the output values of the pins of GPIO port1 are high when output is enabled."
            present_if ("Maximum Port Count" > 1);
         PARAM "GPIO Port[2] Output Value"
            uint16
            doc "This variable indicates whether the output values of the pins of GPIO port2 are high when output is enabled."
            present_if ("Maximum Port Count" > 2);
         PARAM "GPIO Port[3] Output Value"
            uint16
            doc "This variable indicates whether the output values of the pins of GPIO port3 are high when output is enabled."
            present_if ("Maximum Port Count" > 3);

         PARAM "Port[0]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_0.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 0);
         PARAM "Pin[0]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_0 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 0);
         PARAM "RESERVED_1[0]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 0);
         PARAM "Output mux[0]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_0."
               "The default value is 0"
               present_if ("GPIO Count" > 0);
         PARAM "Hysteresis[0]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 0);
         PARAM "RESERVED_2[0]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 0);
         PARAM "Drive[0]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 0);
         PARAM "Pullup Pulldown[0]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 0);
         PARAM "RESERVED_3[0]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 0);
         PARAM "RESERVED_4[0]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 0);
         PARAM "Global input[0]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 0);
         PARAM "Output control[0]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_0 output."
               "The default value is 0"
               present_if ("GPIO Count" > 0);
         PARAM "Interrupt enable[0]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_0 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 0);
         PARAM "Dual edge trigger[0]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_0 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 0);
         PARAM "Negative edge trigger[0]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_0 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 0);
         PARAM "Edge trigger[0]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_0 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 0);






         PARAM "Port[1]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_1.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 1);
         PARAM "Pin[1]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_1 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 1);
         PARAM "RESERVED_1[1]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 1);
         PARAM "Output mux[1]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_1."
               "The default value is 0"
               present_if ("GPIO Count" > 1);
         PARAM "Hysteresis[1]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 1);
         PARAM "RESERVED_2[1]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 1);
         PARAM "Drive[1]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 1);
         PARAM "Pullup Pulldown[1]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 1);
         PARAM "RESERVED_3[1]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 1);
         PARAM "RESERVED_4[1]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 1);
         PARAM "Global input[1]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 1);
         PARAM "Output control[1]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_1 output."
               "The default value is 0"
               present_if ("GPIO Count" > 1);
         PARAM "Interrupt enable[1]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_1 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 1);
         PARAM "Dual edge trigger[1]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_1 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 1);
         PARAM "Negative edge trigger[1]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_1 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 1);
         PARAM "Edge trigger[1]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_1 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 1);






         PARAM "Port[2]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_2.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 2);
         PARAM "Pin[2]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_2 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 2);
         PARAM "RESERVED_1[2]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 2);
         PARAM "Output mux[2]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_2."
               "The default value is 0"
               present_if ("GPIO Count" > 2);
         PARAM "Hysteresis[2]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 2);
         PARAM "RESERVED_2[2]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 2);
         PARAM "Drive[2]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 2);
         PARAM "Pullup Pulldown[2]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 2);
         PARAM "RESERVED_3[2]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 2);
         PARAM "RESERVED_4[2]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 2);
         PARAM "Global input[2]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 2);
         PARAM "Output control[2]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_2 output."
               "The default value is 0"
               present_if ("GPIO Count" > 2);
         PARAM "Interrupt enable[2]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_2 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 2);
         PARAM "Dual edge trigger[2]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_2 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 2);
         PARAM "Negative edge trigger[2]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_2 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 2);
         PARAM "Edge trigger[2]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_2 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 2);






         PARAM "Port[3]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_3.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 3);
         PARAM "Pin[3]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_3 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 3);
         PARAM "RESERVED_1[3]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 3);
         PARAM "Output mux[3]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_3."
               "The default value is 0"
               present_if ("GPIO Count" > 3);
         PARAM "Hysteresis[3]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 3);
         PARAM "RESERVED_2[3]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 3);
         PARAM "Drive[3]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 3);
         PARAM "Pullup Pulldown[3]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 3);
         PARAM "RESERVED_3[3]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 3);
         PARAM "RESERVED_4[3]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 3);
         PARAM "Global input[3]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 3);
         PARAM "Output control[3]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_3 output."
               "The default value is 0"
               present_if ("GPIO Count" > 3);
         PARAM "Interrupt enable[3]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_3 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 3);
         PARAM "Dual edge trigger[3]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_3 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 3);
         PARAM "Negative edge trigger[3]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_3 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 3);
         PARAM "Edge trigger[3]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_3 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 3);






         PARAM "Port[4]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_4.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 4);
         PARAM "Pin[4]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_4 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 4);
         PARAM "RESERVED_1[4]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 4);
         PARAM "Output mux[4]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_4."
               "The default value is 0"
               present_if ("GPIO Count" > 4);
         PARAM "Hysteresis[4]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 4);
         PARAM "RESERVED_2[4]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 4);
         PARAM "Drive[4]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 4);
         PARAM "Pullup Pulldown[4]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 4);
         PARAM "RESERVED_3[4]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 4);
         PARAM "RESERVED_4[4]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 4);
         PARAM "Global input[4]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 4);
         PARAM "Output control[4]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_4 output."
               "The default value is 0"
               present_if ("GPIO Count" > 4);
         PARAM "Interrupt enable[4]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_4 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 4);
         PARAM "Dual edge trigger[4]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_4 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 4);
         PARAM "Negative edge trigger[4]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_4 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 4);
         PARAM "Edge trigger[4]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_4 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 4);






         PARAM "Port[5]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_5.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 5);
         PARAM "Pin[5]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_5 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 5);
         PARAM "RESERVED_1[5]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 5);
         PARAM "Output mux[5]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_5."
               "The default value is 0"
               present_if ("GPIO Count" > 5);
         PARAM "Hysteresis[5]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 5);
         PARAM "RESERVED_2[5]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 5);
         PARAM "Drive[5]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 5);
         PARAM "Pullup Pulldown[5]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 5);
         PARAM "RESERVED_3[5]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 5);
         PARAM "RESERVED_4[5]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 5);
         PARAM "Global input[5]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 5);
         PARAM "Output control[5]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_5 output."
               "The default value is 0"
               present_if ("GPIO Count" > 5);
         PARAM "Interrupt enable[5]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_5 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 5);
         PARAM "Dual edge trigger[5]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_5 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 5);
         PARAM "Negative edge trigger[5]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_5 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 5);
         PARAM "Edge trigger[5]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_5 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 5);






         PARAM "Port[6]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_6.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 6);
         PARAM "Pin[6]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_6 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 6);
         PARAM "RESERVED_1[6]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 6);
         PARAM "Output mux[6]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_6."
               "The default value is 0"
               present_if ("GPIO Count" > 6);
         PARAM "Hysteresis[6]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 6);
         PARAM "RESERVED_2[6]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 6);
         PARAM "Drive[6]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 6);
         PARAM "Pullup Pulldown[6]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 6);
         PARAM "RESERVED_3[6]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 6);
         PARAM "RESERVED_4[6]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 6);
         PARAM "Global input[6]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 6);
         PARAM "Output control[6]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_6 output."
               "The default value is 0"
               present_if ("GPIO Count" > 6);
         PARAM "Interrupt enable[6]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_6 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 6);
         PARAM "Dual edge trigger[6]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_6 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 6);
         PARAM "Negative edge trigger[6]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_6 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 6);
         PARAM "Edge trigger[6]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_6 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 6);






         PARAM "Port[7]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_7.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 7);
         PARAM "Pin[7]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_7 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 7);
         PARAM "RESERVED_1[7]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 7);
         PARAM "Output mux[7]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_7."
               "The default value is 0"
               present_if ("GPIO Count" > 7);
         PARAM "Hysteresis[7]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 7);
         PARAM "RESERVED_2[7]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 7);
         PARAM "Drive[7]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 7);
         PARAM "Pullup Pulldown[7]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 7);
         PARAM "RESERVED_3[7]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 7);
         PARAM "RESERVED_4[7]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 7);
         PARAM "Global input[7]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 7);
         PARAM "Output control[7]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_7 output."
               "The default value is 0"
               present_if ("GPIO Count" > 7);
         PARAM "Interrupt enable[7]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_7 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 7);
         PARAM "Dual edge trigger[7]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_7 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 7);
         PARAM "Negative edge trigger[7]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_7 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 7);
         PARAM "Edge trigger[7]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_7 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 7);






         PARAM "Port[8]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_8.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 8);
         PARAM "Pin[8]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_8 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 8);
         PARAM "RESERVED_1[8]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 8);
         PARAM "Output mux[8]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_8."
               "The default value is 0"
               present_if ("GPIO Count" > 8);
         PARAM "Hysteresis[8]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 8);
         PARAM "RESERVED_2[8]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 8);
         PARAM "Drive[8]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 8);
         PARAM "Pullup Pulldown[8]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 8);
         PARAM "RESERVED_3[8]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 8);
         PARAM "RESERVED_4[8]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 8);
         PARAM "Global input[8]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 8);
         PARAM "Output control[8]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_8 output."
               "The default value is 0"
               present_if ("GPIO Count" > 8);
         PARAM "Interrupt enable[8]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_8 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 8);
         PARAM "Dual edge trigger[8]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_8 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 8);
         PARAM "Negative edge trigger[8]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_8 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 8);
         PARAM "Edge trigger[8]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_8 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 8);






         PARAM "Port[9]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_9.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 9);
         PARAM "Pin[9]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_9 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 9);
         PARAM "RESERVED_1[9]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 9);
         PARAM "Output mux[9]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_9."
               "The default value is 0"
               present_if ("GPIO Count" > 9);
         PARAM "Hysteresis[9]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 9);
         PARAM "RESERVED_2[9]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 9);
         PARAM "Drive[9]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 9);
         PARAM "Pullup Pulldown[9]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 9);
         PARAM "RESERVED_3[9]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 9);
         PARAM "RESERVED_4[9]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 9);
         PARAM "Global input[9]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 9);
         PARAM "Output control[9]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_9 output."
               "The default value is 0"
               present_if ("GPIO Count" > 9);
         PARAM "Interrupt enable[9]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_9 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 9);
         PARAM "Dual edge trigger[9]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_9 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 9);
         PARAM "Negative edge trigger[9]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_9 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 9);
         PARAM "Edge trigger[9]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_9 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 9);






         PARAM "Port[10]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_10.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 10);
         PARAM "Pin[10]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_10 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 10);
         PARAM "RESERVED_1[10]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 10);
         PARAM "Output mux[10]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_10."
               "The default value is 0"
               present_if ("GPIO Count" > 10);
         PARAM "Hysteresis[10]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 10);
         PARAM "RESERVED_2[10]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 10);
         PARAM "Drive[10]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 10);
         PARAM "Pullup Pulldown[10]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 10);
         PARAM "RESERVED_3[10]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 10);
         PARAM "RESERVED_4[10]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 10);
         PARAM "Global input[10]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 10);
         PARAM "Output control[10]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_10 output."
               "The default value is 0"
               present_if ("GPIO Count" > 10);
         PARAM "Interrupt enable[10]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_10 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 10);
         PARAM "Dual edge trigger[10]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_10 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 10);
         PARAM "Negative edge trigger[10]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_10 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 10);
         PARAM "Edge trigger[10]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_10 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 10);






         PARAM "Port[11]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_11.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 11);
         PARAM "Pin[11]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_11 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 11);
         PARAM "RESERVED_1[11]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 11);
         PARAM "Output mux[11]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_11."
               "The default value is 0"
               present_if ("GPIO Count" > 11);
         PARAM "Hysteresis[11]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 11);
         PARAM "RESERVED_2[11]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 11);
         PARAM "Drive[11]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 11);
         PARAM "Pullup Pulldown[11]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 11);
         PARAM "RESERVED_3[11]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 11);
         PARAM "RESERVED_4[11]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 11);
         PARAM "Global input[11]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 11);
         PARAM "Output control[11]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_11 output."
               "The default value is 0"
               present_if ("GPIO Count" > 11);
         PARAM "Interrupt enable[11]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_11 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 11);
         PARAM "Dual edge trigger[11]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_11 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 11);
         PARAM "Negative edge trigger[11]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_11 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 11);
         PARAM "Edge trigger[11]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_11 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 11);






         PARAM "Port[12]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_12.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 12);
         PARAM "Pin[12]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_12 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 12);
         PARAM "RESERVED_1[12]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 12);
         PARAM "Output mux[12]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_12."
               "The default value is 0"
               present_if ("GPIO Count" > 12);
         PARAM "Hysteresis[12]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 12);
         PARAM "RESERVED_2[12]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 12);
         PARAM "Drive[12]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 12);
         PARAM "Pullup Pulldown[12]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 12);
         PARAM "RESERVED_3[12]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 12);
         PARAM "RESERVED_4[12]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 12);
         PARAM "Global input[12]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 12);
         PARAM "Output control[12]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_12 output."
               "The default value is 0"
               present_if ("GPIO Count" > 12);
         PARAM "Interrupt enable[12]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_12 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 12);
         PARAM "Dual edge trigger[12]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_12 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 12);
         PARAM "Negative edge trigger[12]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_12 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 12);
         PARAM "Edge trigger[12]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_12 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 12);






         PARAM "Port[13]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_13.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 13);
         PARAM "Pin[13]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_13 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 13);
         PARAM "RESERVED_1[13]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 13);
         PARAM "Output mux[13]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_13."
               "The default value is 0"
               present_if ("GPIO Count" > 13);
         PARAM "Hysteresis[13]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 13);
         PARAM "RESERVED_2[13]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 13);
         PARAM "Drive[13]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 13);
         PARAM "Pullup Pulldown[13]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 13);
         PARAM "RESERVED_3[13]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 13);
         PARAM "RESERVED_4[13]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 13);
         PARAM "Global input[13]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 13);
         PARAM "Output control[13]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_13 output."
               "The default value is 0"
               present_if ("GPIO Count" > 13);
         PARAM "Interrupt enable[13]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_13 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 13);
         PARAM "Dual edge trigger[13]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_13 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 13);
         PARAM "Negative edge trigger[13]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_13 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 13);
         PARAM "Edge trigger[13]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_13 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 13);






         PARAM "Port[14]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_14.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 14);
         PARAM "Pin[14]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_14 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 14);
         PARAM "RESERVED_1[14]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 14);
         PARAM "Output mux[14]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_14."
               "The default value is 0"
               present_if ("GPIO Count" > 14);
         PARAM "Hysteresis[14]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 14);
         PARAM "RESERVED_2[14]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 14);
         PARAM "Drive[14]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 14);
         PARAM "Pullup Pulldown[14]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 14);
         PARAM "RESERVED_3[14]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 14);
         PARAM "RESERVED_4[14]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 14);
         PARAM "Global input[14]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 14);
         PARAM "Output control[14]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_14 output."
               "The default value is 0"
               present_if ("GPIO Count" > 14);
         PARAM "Interrupt enable[14]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_14 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 14);
         PARAM "Dual edge trigger[14]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_14 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 14);
         PARAM "Negative edge trigger[14]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_14 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 14);
         PARAM "Edge trigger[14]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_14 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 14);






         PARAM "Port[15]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_15.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 15);
         PARAM "Pin[15]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_15 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 15);
         PARAM "RESERVED_1[15]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 15);
         PARAM "Output mux[15]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_15."
               "The default value is 0"
               present_if ("GPIO Count" > 15);
         PARAM "Hysteresis[15]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 15);
         PARAM "RESERVED_2[15]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 15);
         PARAM "Drive[15]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 15);
         PARAM "Pullup Pulldown[15]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 15);
         PARAM "RESERVED_3[15]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 15);
         PARAM "RESERVED_4[15]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 15);
         PARAM "Global input[15]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 15);
         PARAM "Output control[15]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_15 output."
               "The default value is 0"
               present_if ("GPIO Count" > 15);
         PARAM "Interrupt enable[15]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_15 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 15);
         PARAM "Dual edge trigger[15]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_15 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 15);
         PARAM "Negative edge trigger[15]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_15 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 15);
         PARAM "Edge trigger[15]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_15 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 15);






         PARAM "Port[16]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_16.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 16);
         PARAM "Pin[16]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_16 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 16);
         PARAM "RESERVED_1[16]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 16);
         PARAM "Output mux[16]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_16."
               "The default value is 0"
               present_if ("GPIO Count" > 16);
         PARAM "Hysteresis[16]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 16);
         PARAM "RESERVED_2[16]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 16);
         PARAM "Drive[16]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 16);
         PARAM "Pullup Pulldown[16]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 16);
         PARAM "RESERVED_3[16]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 16);
         PARAM "RESERVED_4[16]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 16);
         PARAM "Global input[16]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 16);
         PARAM "Output control[16]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_16 output."
               "The default value is 0"
               present_if ("GPIO Count" > 16);
         PARAM "Interrupt enable[16]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_16 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 16);
         PARAM "Dual edge trigger[16]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_16 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 16);
         PARAM "Negative edge trigger[16]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_16 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 16);
         PARAM "Edge trigger[16]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_16 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 16);






         PARAM "Port[17]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_17.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 17);
         PARAM "Pin[17]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_17 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 17);
         PARAM "RESERVED_1[17]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 17);
         PARAM "Output mux[17]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_17."
               "The default value is 0"
               present_if ("GPIO Count" > 17);
         PARAM "Hysteresis[17]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 17);
         PARAM "RESERVED_2[17]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 17);
         PARAM "Drive[17]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 17);
         PARAM "Pullup Pulldown[17]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 17);
         PARAM "RESERVED_3[17]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 17);
         PARAM "RESERVED_4[17]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 17);
         PARAM "Global input[17]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 17);
         PARAM "Output control[17]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_17 output."
               "The default value is 0"
               present_if ("GPIO Count" > 17);
         PARAM "Interrupt enable[17]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_17 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 17);
         PARAM "Dual edge trigger[17]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_17 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 17);
         PARAM "Negative edge trigger[17]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_17 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 17);
         PARAM "Edge trigger[17]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_17 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 17);






         PARAM "Port[18]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_18.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 18);
         PARAM "Pin[18]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_18 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 18);
         PARAM "RESERVED_1[18]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 18);
         PARAM "Output mux[18]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_18."
               "The default value is 0"
               present_if ("GPIO Count" > 18);
         PARAM "Hysteresis[18]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 18);
         PARAM "RESERVED_2[18]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 18);
         PARAM "Drive[18]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 18);
         PARAM "Pullup Pulldown[18]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 18);
         PARAM "RESERVED_3[18]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 18);
         PARAM "RESERVED_4[18]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 18);
         PARAM "Global input[18]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 18);
         PARAM "Output control[18]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_18 output."
               "The default value is 0"
               present_if ("GPIO Count" > 18);
         PARAM "Interrupt enable[18]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_18 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 18);
         PARAM "Dual edge trigger[18]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_18 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 18);
         PARAM "Negative edge trigger[18]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_18 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 18);
         PARAM "Edge trigger[18]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_18 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 18);






         PARAM "Port[19]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_19.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 19);
         PARAM "Pin[19]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_19 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 19);
         PARAM "RESERVED_1[19]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 19);
         PARAM "Output mux[19]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_19."
               "The default value is 0"
               present_if ("GPIO Count" > 19);
         PARAM "Hysteresis[19]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 19);
         PARAM "RESERVED_2[19]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 19);
         PARAM "Drive[19]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 19);
         PARAM "Pullup Pulldown[19]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 19);
         PARAM "RESERVED_3[19]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 19);
         PARAM "RESERVED_4[19]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 19);
         PARAM "Global input[19]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 19);
         PARAM "Output control[19]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_19 output."
               "The default value is 0"
               present_if ("GPIO Count" > 19);
         PARAM "Interrupt enable[19]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_19 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 19);
         PARAM "Dual edge trigger[19]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_19 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 19);
         PARAM "Negative edge trigger[19]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_19 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 19);
         PARAM "Edge trigger[19]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_19 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 19);






         PARAM "Port[20]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_20.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 20);
         PARAM "Pin[20]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_20 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 20);
         PARAM "RESERVED_1[20]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 20);
         PARAM "Output mux[20]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_20."
               "The default value is 0"
               present_if ("GPIO Count" > 20);
         PARAM "Hysteresis[20]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 20);
         PARAM "RESERVED_2[20]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 20);
         PARAM "Drive[20]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 20);
         PARAM "Pullup Pulldown[20]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 20);
         PARAM "RESERVED_3[20]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 20);
         PARAM "RESERVED_4[20]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 20);
         PARAM "Global input[20]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 20);
         PARAM "Output control[20]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_20 output."
               "The default value is 0"
               present_if ("GPIO Count" > 20);
         PARAM "Interrupt enable[20]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_20 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 20);
         PARAM "Dual edge trigger[20]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_20 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 20);
         PARAM "Negative edge trigger[20]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_20 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 20);
         PARAM "Edge trigger[20]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_20 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 20);






         PARAM "Port[21]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_21.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 21);
         PARAM "Pin[21]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_21 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 21);
         PARAM "RESERVED_1[21]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 21);
         PARAM "Output mux[21]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_21."
               "The default value is 0"
               present_if ("GPIO Count" > 21);
         PARAM "Hysteresis[21]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 21);
         PARAM "RESERVED_2[21]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 21);
         PARAM "Drive[21]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 21);
         PARAM "Pullup Pulldown[21]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 21);
         PARAM "RESERVED_3[21]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 21);
         PARAM "RESERVED_4[21]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 21);
         PARAM "Global input[21]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 21);
         PARAM "Output control[21]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_21 output."
               "The default value is 0"
               present_if ("GPIO Count" > 21);
         PARAM "Interrupt enable[21]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_21 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 21);
         PARAM "Dual edge trigger[21]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_21 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 21);
         PARAM "Negative edge trigger[21]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_21 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 21);
         PARAM "Edge trigger[21]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_21 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 21);






         PARAM "Port[22]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_22.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 22);
         PARAM "Pin[22]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_22 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 22);
         PARAM "RESERVED_1[22]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 22);
         PARAM "Output mux[22]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_22."
               "The default value is 0"
               present_if ("GPIO Count" > 22);
         PARAM "Hysteresis[22]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 22);
         PARAM "RESERVED_2[22]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 22);
         PARAM "Drive[22]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 22);
         PARAM "Pullup Pulldown[22]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 22);
         PARAM "RESERVED_3[22]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 22);
         PARAM "RESERVED_4[22]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 22);
         PARAM "Global input[22]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 22);
         PARAM "Output control[22]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_22 output."
               "The default value is 0"
               present_if ("GPIO Count" > 22);
         PARAM "Interrupt enable[22]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_22 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 22);
         PARAM "Dual edge trigger[22]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_22 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 22);
         PARAM "Negative edge trigger[22]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_22 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 22);
         PARAM "Edge trigger[22]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_22 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 22);






         PARAM "Port[23]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_23.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 23);
         PARAM "Pin[23]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_23 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 23);
         PARAM "RESERVED_1[23]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 23);
         PARAM "Output mux[23]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_23."
               "The default value is 0"
               present_if ("GPIO Count" > 23);
         PARAM "Hysteresis[23]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 23);
         PARAM "RESERVED_2[23]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 23);
         PARAM "Drive[23]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 23);
         PARAM "Pullup Pulldown[23]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 23);
         PARAM "RESERVED_3[23]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 23);
         PARAM "RESERVED_4[23]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 23);
         PARAM "Global input[23]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 23);
         PARAM "Output control[23]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_23 output."
               "The default value is 0"
               present_if ("GPIO Count" > 23);
         PARAM "Interrupt enable[23]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_23 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 23);
         PARAM "Dual edge trigger[23]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_23 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 23);
         PARAM "Negative edge trigger[23]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_23 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 23);
         PARAM "Edge trigger[23]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_23 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 23);






         PARAM "Port[24]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_24.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 24);
         PARAM "Pin[24]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_24 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 24);
         PARAM "RESERVED_1[24]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 24);
         PARAM "Output mux[24]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_24."
               "The default value is 0"
               present_if ("GPIO Count" > 24);
         PARAM "Hysteresis[24]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 24);
         PARAM "RESERVED_2[24]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 24);
         PARAM "Drive[24]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 24);
         PARAM "Pullup Pulldown[24]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 24);
         PARAM "RESERVED_3[24]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 24);
         PARAM "RESERVED_4[24]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 24);
         PARAM "Global input[24]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 24);
         PARAM "Output control[24]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_24 output."
               "The default value is 0"
               present_if ("GPIO Count" > 24);
         PARAM "Interrupt enable[24]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_24 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 24);
         PARAM "Dual edge trigger[24]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_24 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 24);
         PARAM "Negative edge trigger[24]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_24 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 24);
         PARAM "Edge trigger[24]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_24 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 24);






         PARAM "Port[25]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_25.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 25);
         PARAM "Pin[25]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_25 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 25);
         PARAM "RESERVED_1[25]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 25);
         PARAM "Output mux[25]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_25."
               "The default value is 0"
               present_if ("GPIO Count" > 25);
         PARAM "Hysteresis[25]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 25);
         PARAM "RESERVED_2[25]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 25);
         PARAM "Drive[25]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 25);
         PARAM "Pullup Pulldown[25]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 25);
         PARAM "RESERVED_3[25]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 25);
         PARAM "RESERVED_4[25]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 25);
         PARAM "Global input[25]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 25);
         PARAM "Output control[25]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_25 output."
               "The default value is 0"
               present_if ("GPIO Count" > 25);
         PARAM "Interrupt enable[25]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_25 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 25);
         PARAM "Dual edge trigger[25]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_25 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 25);
         PARAM "Negative edge trigger[25]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_25 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 25);
         PARAM "Edge trigger[25]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_25 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 25);






         PARAM "Port[26]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_26.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 26);
         PARAM "Pin[26]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_26 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 26);
         PARAM "RESERVED_1[26]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 26);
         PARAM "Output mux[26]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_26."
               "The default value is 0"
               present_if ("GPIO Count" > 26);
         PARAM "Hysteresis[26]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 26);
         PARAM "RESERVED_2[26]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 26);
         PARAM "Drive[26]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 26);
         PARAM "Pullup Pulldown[26]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 26);
         PARAM "RESERVED_3[26]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 26);
         PARAM "RESERVED_4[26]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 26);
         PARAM "Global input[26]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 26);
         PARAM "Output control[26]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_26 output."
               "The default value is 0"
               present_if ("GPIO Count" > 26);
         PARAM "Interrupt enable[26]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_26 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 26);
         PARAM "Dual edge trigger[26]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_26 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 26);
         PARAM "Negative edge trigger[26]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_26 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 26);
         PARAM "Edge trigger[26]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_26 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 26);






         PARAM "Port[27]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_27.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 27);
         PARAM "Pin[27]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_27 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 27);
         PARAM "RESERVED_1[27]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 27);
         PARAM "Output mux[27]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_27."
               "The default value is 0"
               present_if ("GPIO Count" > 27);
         PARAM "Hysteresis[27]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 27);
         PARAM "RESERVED_2[27]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 27);
         PARAM "Drive[27]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 27);
         PARAM "Pullup Pulldown[27]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 27);
         PARAM "RESERVED_3[27]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 27);
         PARAM "RESERVED_4[27]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 27);
         PARAM "Global input[27]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 27);
         PARAM "Output control[27]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_27 output."
               "The default value is 0"
               present_if ("GPIO Count" > 27);
         PARAM "Interrupt enable[27]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_27 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 27);
         PARAM "Dual edge trigger[27]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_27 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 27);
         PARAM "Negative edge trigger[27]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_27 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 27);
         PARAM "Edge trigger[27]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_27 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 27);






         PARAM "Port[28]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_28.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 28);
         PARAM "Pin[28]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_28 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 28);
         PARAM "RESERVED_1[28]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 28);
         PARAM "Output mux[28]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_28."
               "The default value is 0"
               present_if ("GPIO Count" > 28);
         PARAM "Hysteresis[28]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 28);
         PARAM "RESERVED_2[28]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 28);
         PARAM "Drive[28]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 28);
         PARAM "Pullup Pulldown[28]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 28);
         PARAM "RESERVED_3[28]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 28);
         PARAM "RESERVED_4[28]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 28);
         PARAM "Global input[28]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 28);
         PARAM "Output control[28]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_28 output."
               "The default value is 0"
               present_if ("GPIO Count" > 28);
         PARAM "Interrupt enable[28]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_28 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 28);
         PARAM "Dual edge trigger[28]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_28 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 28);
         PARAM "Negative edge trigger[28]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_28 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 28);
         PARAM "Edge trigger[28]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_28 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 28);






         PARAM "Port[29]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_29.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 29);
         PARAM "Pin[29]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_29 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 29);
         PARAM "RESERVED_1[29]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 29);
         PARAM "Output mux[29]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_29."
               "The default value is 0"
               present_if ("GPIO Count" > 29);
         PARAM "Hysteresis[29]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 29);
         PARAM "RESERVED_2[29]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 29);
         PARAM "Drive[29]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 29);
         PARAM "Pullup Pulldown[29]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 29);
         PARAM "RESERVED_3[29]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 29);
         PARAM "RESERVED_4[29]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 29);
         PARAM "Global input[29]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 29);
         PARAM "Output control[29]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_29 output."
               "The default value is 0"
               present_if ("GPIO Count" > 29);
         PARAM "Interrupt enable[29]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_29 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 29);
         PARAM "Dual edge trigger[29]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_29 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 29);
         PARAM "Negative edge trigger[29]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_29 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 29);
         PARAM "Edge trigger[29]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_29 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 29);






         PARAM "Port[30]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_30.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 30);
         PARAM "Pin[30]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_30 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 30);
         PARAM "RESERVED_1[30]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 30);
         PARAM "Output mux[30]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_30."
               "The default value is 0"
               present_if ("GPIO Count" > 30);
         PARAM "Hysteresis[30]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 30);
         PARAM "RESERVED_2[30]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 30);
         PARAM "Drive[30]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 30);
         PARAM "Pullup Pulldown[30]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 30);
         PARAM "RESERVED_3[30]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 30);
         PARAM "RESERVED_4[30]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 30);
         PARAM "Global input[30]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 30);
         PARAM "Output control[30]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_30 output."
               "The default value is 0"
               present_if ("GPIO Count" > 30);
         PARAM "Interrupt enable[30]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_30 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 30);
         PARAM "Dual edge trigger[30]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_30 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 30);
         PARAM "Negative edge trigger[30]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_30 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 30);
         PARAM "Edge trigger[30]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_30 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 30);






         PARAM "Port[31]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_31.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 31);
         PARAM "Pin[31]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_31 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 31);
         PARAM "RESERVED_1[31]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 31);
         PARAM "Output mux[31]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_31."
               "The default value is 0"
               present_if ("GPIO Count" > 31);
         PARAM "Hysteresis[31]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 31);
         PARAM "RESERVED_2[31]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 31);
         PARAM "Drive[31]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 31);
         PARAM "Pullup Pulldown[31]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 31);
         PARAM "RESERVED_3[31]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 31);
         PARAM "RESERVED_4[31]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 31);
         PARAM "Global input[31]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 31);
         PARAM "Output control[31]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_31 output."
               "The default value is 0"
               present_if ("GPIO Count" > 31);
         PARAM "Interrupt enable[31]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_31 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 31);
         PARAM "Dual edge trigger[31]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_31 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 31);
         PARAM "Negative edge trigger[31]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_31 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 31);
         PARAM "Edge trigger[31]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_31 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 31);






         PARAM "Port[32]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_32.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 32);
         PARAM "Pin[32]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_32 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 32);
         PARAM "RESERVED_1[32]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 32);
         PARAM "Output mux[32]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_32."
               "The default value is 0"
               present_if ("GPIO Count" > 32);
         PARAM "Hysteresis[32]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 32);
         PARAM "RESERVED_2[32]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 32);
         PARAM "Drive[32]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 32);
         PARAM "Pullup Pulldown[32]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 32);
         PARAM "RESERVED_3[32]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 32);
         PARAM "RESERVED_4[32]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 32);
         PARAM "Global input[32]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 32);
         PARAM "Output control[32]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_32 output."
               "The default value is 0"
               present_if ("GPIO Count" > 32);
         PARAM "Interrupt enable[32]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_32 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 32);
         PARAM "Dual edge trigger[32]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_32 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 32);
         PARAM "Negative edge trigger[32]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_32 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 32);
         PARAM "Edge trigger[32]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_32 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 32);






         PARAM "Port[33]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_33.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 33);
         PARAM "Pin[33]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_33 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 33);
         PARAM "RESERVED_1[33]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 33);
         PARAM "Output mux[33]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_33."
               "The default value is 0"
               present_if ("GPIO Count" > 33);
         PARAM "Hysteresis[33]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 33);
         PARAM "RESERVED_2[33]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 33);
         PARAM "Drive[33]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 33);
         PARAM "Pullup Pulldown[33]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 33);
         PARAM "RESERVED_3[33]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 33);
         PARAM "RESERVED_4[33]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 33);
         PARAM "Global input[33]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 33);
         PARAM "Output control[33]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_33 output."
               "The default value is 0"
               present_if ("GPIO Count" > 33);
         PARAM "Interrupt enable[33]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_33 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 33);
         PARAM "Dual edge trigger[33]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_33 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 33);
         PARAM "Negative edge trigger[33]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_33 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 33);
         PARAM "Edge trigger[33]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_33 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 33);






         PARAM "Port[34]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_34.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 34);
         PARAM "Pin[34]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_34 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 34);
         PARAM "RESERVED_1[34]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 34);
         PARAM "Output mux[34]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_34."
               "The default value is 0"
               present_if ("GPIO Count" > 34);
         PARAM "Hysteresis[34]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 34);
         PARAM "RESERVED_2[34]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 34);
         PARAM "Drive[34]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 34);
         PARAM "Pullup Pulldown[34]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 34);
         PARAM "RESERVED_3[34]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 34);
         PARAM "RESERVED_4[34]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 34);
         PARAM "Global input[34]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 34);
         PARAM "Output control[34]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_34 output."
               "The default value is 0"
               present_if ("GPIO Count" > 34);
         PARAM "Interrupt enable[34]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_34 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 34);
         PARAM "Dual edge trigger[34]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_34 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 34);
         PARAM "Negative edge trigger[34]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_34 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 34);
         PARAM "Edge trigger[34]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_34 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 34);






         PARAM "Port[35]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_35.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 35);
         PARAM "Pin[35]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_35 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 35);
         PARAM "RESERVED_1[35]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 35);
         PARAM "Output mux[35]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_35."
               "The default value is 0"
               present_if ("GPIO Count" > 35);
         PARAM "Hysteresis[35]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 35);
         PARAM "RESERVED_2[35]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 35);
         PARAM "Drive[35]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 35);
         PARAM "Pullup Pulldown[35]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 35);
         PARAM "RESERVED_3[35]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 35);
         PARAM "RESERVED_4[35]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 35);
         PARAM "Global input[35]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 35);
         PARAM "Output control[35]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_35 output."
               "The default value is 0"
               present_if ("GPIO Count" > 35);
         PARAM "Interrupt enable[35]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_35 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 35);
         PARAM "Dual edge trigger[35]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_35 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 35);
         PARAM "Negative edge trigger[35]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_35 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 35);
         PARAM "Edge trigger[35]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_35 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 35);






         PARAM "Port[36]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_36.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 36);
         PARAM "Pin[36]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_36 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 36);
         PARAM "RESERVED_1[36]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 36);
         PARAM "Output mux[36]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_36."
               "The default value is 0"
               present_if ("GPIO Count" > 36);
         PARAM "Hysteresis[36]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 36);
         PARAM "RESERVED_2[36]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 36);
         PARAM "Drive[36]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 36);
         PARAM "Pullup Pulldown[36]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 36);
         PARAM "RESERVED_3[36]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 36);
         PARAM "RESERVED_4[36]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 36);
         PARAM "Global input[36]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 36);
         PARAM "Output control[36]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_36 output."
               "The default value is 0"
               present_if ("GPIO Count" > 36);
         PARAM "Interrupt enable[36]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_36 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 36);
         PARAM "Dual edge trigger[36]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_36 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 36);
         PARAM "Negative edge trigger[36]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_36 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 36);
         PARAM "Edge trigger[36]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_36 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 36);






         PARAM "Port[37]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_37.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 37);
         PARAM "Pin[37]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_37 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 37);
         PARAM "RESERVED_1[37]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 37);
         PARAM "Output mux[37]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_37."
               "The default value is 0"
               present_if ("GPIO Count" > 37);
         PARAM "Hysteresis[37]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 37);
         PARAM "RESERVED_2[37]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 37);
         PARAM "Drive[37]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 37);
         PARAM "Pullup Pulldown[37]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 37);
         PARAM "RESERVED_3[37]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 37);
         PARAM "RESERVED_4[37]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 37);
         PARAM "Global input[37]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 37);
         PARAM "Output control[37]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_37 output."
               "The default value is 0"
               present_if ("GPIO Count" > 37);
         PARAM "Interrupt enable[37]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_37 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 37);
         PARAM "Dual edge trigger[37]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_37 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 37);
         PARAM "Negative edge trigger[37]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_37 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 37);
         PARAM "Edge trigger[37]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_37 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 37);






         PARAM "Port[38]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_38.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 38);
         PARAM "Pin[38]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_38 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 38);
         PARAM "RESERVED_1[38]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 38);
         PARAM "Output mux[38]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_38."
               "The default value is 0"
               present_if ("GPIO Count" > 38);
         PARAM "Hysteresis[38]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 38);
         PARAM "RESERVED_2[38]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 38);
         PARAM "Drive[38]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 38);
         PARAM "Pullup Pulldown[38]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 38);
         PARAM "RESERVED_3[38]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 38);
         PARAM "RESERVED_4[38]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 38);
         PARAM "Global input[38]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 38);
         PARAM "Output control[38]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_38 output."
               "The default value is 0"
               present_if ("GPIO Count" > 38);
         PARAM "Interrupt enable[38]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_38 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 38);
         PARAM "Dual edge trigger[38]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_38 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 38);
         PARAM "Negative edge trigger[38]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_38 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 38);
         PARAM "Edge trigger[38]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_38 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 38);






         PARAM "Port[39]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_39.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 39);
         PARAM "Pin[39]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_39 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 39);
         PARAM "RESERVED_1[39]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 39);
         PARAM "Output mux[39]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_39."
               "The default value is 0"
               present_if ("GPIO Count" > 39);
         PARAM "Hysteresis[39]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 39);
         PARAM "RESERVED_2[39]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 39);
         PARAM "Drive[39]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 39);
         PARAM "Pullup Pulldown[39]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 39);
         PARAM "RESERVED_3[39]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 39);
         PARAM "RESERVED_4[39]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 39);
         PARAM "Global input[39]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 39);
         PARAM "Output control[39]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_39 output."
               "The default value is 0"
               present_if ("GPIO Count" > 39);
         PARAM "Interrupt enable[39]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_39 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 39);
         PARAM "Dual edge trigger[39]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_39 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 39);
         PARAM "Negative edge trigger[39]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_39 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 39);
         PARAM "Edge trigger[39]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_39 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 39);






         PARAM "Port[40]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_40.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 40);
         PARAM "Pin[40]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_40 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 40);
         PARAM "RESERVED_1[40]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 40);
         PARAM "Output mux[40]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_40."
               "The default value is 0"
               present_if ("GPIO Count" > 40);
         PARAM "Hysteresis[40]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 40);
         PARAM "RESERVED_2[40]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 40);
         PARAM "Drive[40]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 40);
         PARAM "Pullup Pulldown[40]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 40);
         PARAM "RESERVED_3[40]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 40);
         PARAM "RESERVED_4[40]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 40);
         PARAM "Global input[40]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 40);
         PARAM "Output control[40]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_40 output."
               "The default value is 0"
               present_if ("GPIO Count" > 40);
         PARAM "Interrupt enable[40]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_40 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 40);
         PARAM "Dual edge trigger[40]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_40 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 40);
         PARAM "Negative edge trigger[40]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_40 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 40);
         PARAM "Edge trigger[40]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_40 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 40);






         PARAM "Port[41]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_41.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 41);
         PARAM "Pin[41]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_41 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 41);
         PARAM "RESERVED_1[41]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 41);
         PARAM "Output mux[41]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_41."
               "The default value is 0"
               present_if ("GPIO Count" > 41);
         PARAM "Hysteresis[41]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 41);
         PARAM "RESERVED_2[41]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 41);
         PARAM "Drive[41]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 41);
         PARAM "Pullup Pulldown[41]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 41);
         PARAM "RESERVED_3[41]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 41);
         PARAM "RESERVED_4[41]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 41);
         PARAM "Global input[41]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 41);
         PARAM "Output control[41]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_41 output."
               "The default value is 0"
               present_if ("GPIO Count" > 41);
         PARAM "Interrupt enable[41]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_41 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 41);
         PARAM "Dual edge trigger[41]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_41 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 41);
         PARAM "Negative edge trigger[41]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_41 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 41);
         PARAM "Edge trigger[41]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_41 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 41);






         PARAM "Port[42]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_42.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 42);
         PARAM "Pin[42]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_42 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 42);
         PARAM "RESERVED_1[42]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 42);
         PARAM "Output mux[42]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_42."
               "The default value is 0"
               present_if ("GPIO Count" > 42);
         PARAM "Hysteresis[42]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 42);
         PARAM "RESERVED_2[42]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 42);
         PARAM "Drive[42]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 42);
         PARAM "Pullup Pulldown[42]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 42);
         PARAM "RESERVED_3[42]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 42);
         PARAM "RESERVED_4[42]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 42);
         PARAM "Global input[42]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 42);
         PARAM "Output control[42]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_42 output."
               "The default value is 0"
               present_if ("GPIO Count" > 42);
         PARAM "Interrupt enable[42]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_42 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 42);
         PARAM "Dual edge trigger[42]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_42 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 42);
         PARAM "Negative edge trigger[42]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_42 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 42);
         PARAM "Edge trigger[42]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_42 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 42);






         PARAM "Port[43]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_43.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 43);
         PARAM "Pin[43]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_43 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 43);
         PARAM "RESERVED_1[43]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 43);
         PARAM "Output mux[43]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_43."
               "The default value is 0"
               present_if ("GPIO Count" > 43);
         PARAM "Hysteresis[43]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 43);
         PARAM "RESERVED_2[43]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 43);
         PARAM "Drive[43]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 43);
         PARAM "Pullup Pulldown[43]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 43);
         PARAM "RESERVED_3[43]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 43);
         PARAM "RESERVED_4[43]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 43);
         PARAM "Global input[43]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 43);
         PARAM "Output control[43]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_43 output."
               "The default value is 0"
               present_if ("GPIO Count" > 43);
         PARAM "Interrupt enable[43]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_43 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 43);
         PARAM "Dual edge trigger[43]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_43 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 43);
         PARAM "Negative edge trigger[43]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_43 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 43);
         PARAM "Edge trigger[43]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_43 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 43);






         PARAM "Port[44]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_44.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 44);
         PARAM "Pin[44]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_44 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 44);
         PARAM "RESERVED_1[44]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 44);
         PARAM "Output mux[44]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_44."
               "The default value is 0"
               present_if ("GPIO Count" > 44);
         PARAM "Hysteresis[44]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 44);
         PARAM "RESERVED_2[44]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 44);
         PARAM "Drive[44]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 44);
         PARAM "Pullup Pulldown[44]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 44);
         PARAM "RESERVED_3[44]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 44);
         PARAM "RESERVED_4[44]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 44);
         PARAM "Global input[44]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 44);
         PARAM "Output control[44]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_44 output."
               "The default value is 0"
               present_if ("GPIO Count" > 44);
         PARAM "Interrupt enable[44]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_44 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 44);
         PARAM "Dual edge trigger[44]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_44 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 44);
         PARAM "Negative edge trigger[44]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_44 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 44);
         PARAM "Edge trigger[44]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_44 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 44);






         PARAM "Port[45]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_45.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 45);
         PARAM "Pin[45]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_45 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 45);
         PARAM "RESERVED_1[45]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 45);
         PARAM "Output mux[45]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_45."
               "The default value is 0"
               present_if ("GPIO Count" > 45);
         PARAM "Hysteresis[45]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 45);
         PARAM "RESERVED_2[45]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 45);
         PARAM "Drive[45]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 45);
         PARAM "Pullup Pulldown[45]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 45);
         PARAM "RESERVED_3[45]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 45);
         PARAM "RESERVED_4[45]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 45);
         PARAM "Global input[45]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 45);
         PARAM "Output control[45]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_45 output."
               "The default value is 0"
               present_if ("GPIO Count" > 45);
         PARAM "Interrupt enable[45]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_45 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 45);
         PARAM "Dual edge trigger[45]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_45 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 45);
         PARAM "Negative edge trigger[45]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_45 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 45);
         PARAM "Edge trigger[45]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_45 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 45);






         PARAM "Port[46]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_46.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 46);
         PARAM "Pin[46]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_46 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 46);
         PARAM "RESERVED_1[46]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 46);
         PARAM "Output mux[46]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_46."
               "The default value is 0"
               present_if ("GPIO Count" > 46);
         PARAM "Hysteresis[46]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 46);
         PARAM "RESERVED_2[46]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 46);
         PARAM "Drive[46]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 46);
         PARAM "Pullup Pulldown[46]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 46);
         PARAM "RESERVED_3[46]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 46);
         PARAM "RESERVED_4[46]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 46);
         PARAM "Global input[46]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 46);
         PARAM "Output control[46]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_46 output."
               "The default value is 0"
               present_if ("GPIO Count" > 46);
         PARAM "Interrupt enable[46]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_46 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 46);
         PARAM "Dual edge trigger[46]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_46 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 46);
         PARAM "Negative edge trigger[46]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_46 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 46);
         PARAM "Edge trigger[46]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_46 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 46);






         PARAM "Port[47]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_47.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 47);
         PARAM "Pin[47]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_47 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 47);
         PARAM "RESERVED_1[47]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 47);
         PARAM "Output mux[47]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_47."
               "The default value is 0"
               present_if ("GPIO Count" > 47);
         PARAM "Hysteresis[47]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 47);
         PARAM "RESERVED_2[47]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 47);
         PARAM "Drive[47]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 47);
         PARAM "Pullup Pulldown[47]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 47);
         PARAM "RESERVED_3[47]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 47);
         PARAM "RESERVED_4[47]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 47);
         PARAM "Global input[47]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 47);
         PARAM "Output control[47]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_47 output."
               "The default value is 0"
               present_if ("GPIO Count" > 47);
         PARAM "Interrupt enable[47]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_47 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 47);
         PARAM "Dual edge trigger[47]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_47 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 47);
         PARAM "Negative edge trigger[47]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_47 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 47);
         PARAM "Edge trigger[47]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_47 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 47);






         PARAM "Port[48]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_48.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 48);
         PARAM "Pin[48]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_48 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 48);
         PARAM "RESERVED_1[48]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 48);
         PARAM "Output mux[48]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_48."
               "The default value is 0"
               present_if ("GPIO Count" > 48);
         PARAM "Hysteresis[48]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 48);
         PARAM "RESERVED_2[48]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 48);
         PARAM "Drive[48]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 48);
         PARAM "Pullup Pulldown[48]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 48);
         PARAM "RESERVED_3[48]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 48);
         PARAM "RESERVED_4[48]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 48);
         PARAM "Global input[48]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 48);
         PARAM "Output control[48]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_48 output."
               "The default value is 0"
               present_if ("GPIO Count" > 48);
         PARAM "Interrupt enable[48]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_48 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 48);
         PARAM "Dual edge trigger[48]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_48 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 48);
         PARAM "Negative edge trigger[48]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_48 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 48);
         PARAM "Edge trigger[48]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_48 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 48);






         PARAM "Port[49]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_49.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 49);
         PARAM "Pin[49]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_49 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 49);
         PARAM "RESERVED_1[49]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 49);
         PARAM "Output mux[49]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_49."
               "The default value is 0"
               present_if ("GPIO Count" > 49);
         PARAM "Hysteresis[49]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 49);
         PARAM "RESERVED_2[49]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 49);
         PARAM "Drive[49]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 49);
         PARAM "Pullup Pulldown[49]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 49);
         PARAM "RESERVED_3[49]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 49);
         PARAM "RESERVED_4[49]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 49);
         PARAM "Global input[49]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 49);
         PARAM "Output control[49]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_49 output."
               "The default value is 0"
               present_if ("GPIO Count" > 49);
         PARAM "Interrupt enable[49]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_49 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 49);
         PARAM "Dual edge trigger[49]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_49 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 49);
         PARAM "Negative edge trigger[49]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_49 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 49);
         PARAM "Edge trigger[49]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_49 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 49);






         PARAM "Port[50]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_50.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 50);
         PARAM "Pin[50]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_50 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 50);
         PARAM "RESERVED_1[50]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 50);
         PARAM "Output mux[50]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_50."
               "The default value is 0"
               present_if ("GPIO Count" > 50);
         PARAM "Hysteresis[50]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 50);
         PARAM "RESERVED_2[50]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 50);
         PARAM "Drive[50]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 50);
         PARAM "Pullup Pulldown[50]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 50);
         PARAM "RESERVED_3[50]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 50);
         PARAM "RESERVED_4[50]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 50);
         PARAM "Global input[50]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 50);
         PARAM "Output control[50]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_50 output."
               "The default value is 0"
               present_if ("GPIO Count" > 50);
         PARAM "Interrupt enable[50]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_50 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 50);
         PARAM "Dual edge trigger[50]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_50 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 50);
         PARAM "Negative edge trigger[50]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_50 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 50);
         PARAM "Edge trigger[50]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_50 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 50);






         PARAM "Port[51]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_51.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 51);
         PARAM "Pin[51]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_51 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 51);
         PARAM "RESERVED_1[51]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 51);
         PARAM "Output mux[51]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_51."
               "The default value is 0"
               present_if ("GPIO Count" > 51);
         PARAM "Hysteresis[51]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 51);
         PARAM "RESERVED_2[51]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 51);
         PARAM "Drive[51]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 51);
         PARAM "Pullup Pulldown[51]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 51);
         PARAM "RESERVED_3[51]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 51);
         PARAM "RESERVED_4[51]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 51);
         PARAM "Global input[51]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 51);
         PARAM "Output control[51]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_51 output."
               "The default value is 0"
               present_if ("GPIO Count" > 51);
         PARAM "Interrupt enable[51]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_51 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 51);
         PARAM "Dual edge trigger[51]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_51 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 51);
         PARAM "Negative edge trigger[51]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_51 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 51);
         PARAM "Edge trigger[51]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_51 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 51);






         PARAM "Port[52]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_52.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 52);
         PARAM "Pin[52]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_52 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 52);
         PARAM "RESERVED_1[52]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 52);
         PARAM "Output mux[52]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_52."
               "The default value is 0"
               present_if ("GPIO Count" > 52);
         PARAM "Hysteresis[52]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 52);
         PARAM "RESERVED_2[52]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 52);
         PARAM "Drive[52]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 52);
         PARAM "Pullup Pulldown[52]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 52);
         PARAM "RESERVED_3[52]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 52);
         PARAM "RESERVED_4[52]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 52);
         PARAM "Global input[52]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 52);
         PARAM "Output control[52]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_52 output."
               "The default value is 0"
               present_if ("GPIO Count" > 52);
         PARAM "Interrupt enable[52]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_52 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 52);
         PARAM "Dual edge trigger[52]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_52 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 52);
         PARAM "Negative edge trigger[52]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_52 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 52);
         PARAM "Edge trigger[52]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_52 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 52);






         PARAM "Port[53]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_53.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 53);
         PARAM "Pin[53]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_53 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 53);
         PARAM "RESERVED_1[53]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 53);
         PARAM "Output mux[53]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_53."
               "The default value is 0"
               present_if ("GPIO Count" > 53);
         PARAM "Hysteresis[53]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 53);
         PARAM "RESERVED_2[53]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 53);
         PARAM "Drive[53]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 53);
         PARAM "Pullup Pulldown[53]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 53);
         PARAM "RESERVED_3[53]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 53);
         PARAM "RESERVED_4[53]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 53);
         PARAM "Global input[53]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 53);
         PARAM "Output control[53]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_53 output."
               "The default value is 0"
               present_if ("GPIO Count" > 53);
         PARAM "Interrupt enable[53]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_53 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 53);
         PARAM "Dual edge trigger[53]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_53 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 53);
         PARAM "Negative edge trigger[53]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_53 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 53);
         PARAM "Edge trigger[53]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_53 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 53);






         PARAM "Port[54]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_54.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 54);
         PARAM "Pin[54]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_54 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 54);
         PARAM "RESERVED_1[54]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 54);
         PARAM "Output mux[54]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_54."
               "The default value is 0"
               present_if ("GPIO Count" > 54);
         PARAM "Hysteresis[54]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 54);
         PARAM "RESERVED_2[54]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 54);
         PARAM "Drive[54]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 54);
         PARAM "Pullup Pulldown[54]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 54);
         PARAM "RESERVED_3[54]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 54);
         PARAM "RESERVED_4[54]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 54);
         PARAM "Global input[54]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 54);
         PARAM "Output control[54]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_54 output."
               "The default value is 0"
               present_if ("GPIO Count" > 54);
         PARAM "Interrupt enable[54]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_54 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 54);
         PARAM "Dual edge trigger[54]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_54 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 54);
         PARAM "Negative edge trigger[54]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_54 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 54);
         PARAM "Edge trigger[54]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_54 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 54);






         PARAM "Port[55]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_55.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 55);
         PARAM "Pin[55]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_55 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 55);
         PARAM "RESERVED_1[55]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 55);
         PARAM "Output mux[55]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_55."
               "The default value is 0"
               present_if ("GPIO Count" > 55);
         PARAM "Hysteresis[55]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 55);
         PARAM "RESERVED_2[55]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 55);
         PARAM "Drive[55]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 55);
         PARAM "Pullup Pulldown[55]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 55);
         PARAM "RESERVED_3[55]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 55);
         PARAM "RESERVED_4[55]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 55);
         PARAM "Global input[55]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 55);
         PARAM "Output control[55]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_55 output."
               "The default value is 0"
               present_if ("GPIO Count" > 55);
         PARAM "Interrupt enable[55]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_55 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 55);
         PARAM "Dual edge trigger[55]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_55 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 55);
         PARAM "Negative edge trigger[55]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_55 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 55);
         PARAM "Edge trigger[55]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_55 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 55);






         PARAM "Port[56]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_56.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 56);
         PARAM "Pin[56]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_56 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 56);
         PARAM "RESERVED_1[56]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 56);
         PARAM "Output mux[56]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_56."
               "The default value is 0"
               present_if ("GPIO Count" > 56);
         PARAM "Hysteresis[56]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 56);
         PARAM "RESERVED_2[56]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 56);
         PARAM "Drive[56]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 56);
         PARAM "Pullup Pulldown[56]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 56);
         PARAM "RESERVED_3[56]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 56);
         PARAM "RESERVED_4[56]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 56);
         PARAM "Global input[56]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 56);
         PARAM "Output control[56]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_56 output."
               "The default value is 0"
               present_if ("GPIO Count" > 56);
         PARAM "Interrupt enable[56]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_56 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 56);
         PARAM "Dual edge trigger[56]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_56 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 56);
         PARAM "Negative edge trigger[56]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_56 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 56);
         PARAM "Edge trigger[56]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_56 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 56);






         PARAM "Port[57]"
               uint8 {7:5}
               doc "This 3 bit value defines the port assigned to GPIO_57.The default value is 0 (port 0)"
               present_if ("GPIO Count" > 57);
         PARAM "Pin[57]"
               uint8 {4:0}
               doc "This 5 bit value defines the pin assigned to GPIO_57 .The default value is 0 (pin 0)"
               present_if ("GPIO Count" > 57);
         PARAM "RESERVED_1[57]"
               uint16{15}
               doc "Reserved"
               present_if ("GPIO Count" > 57);
         PARAM "Output mux[57]"
               uint16{14}
               doc "This boolean variable elects the output value multiplexing control of the GPIO_57."
               "The default value is 0"
               present_if ("GPIO Count" > 57);
         PARAM "Hysteresis[57]"
               bool in uint16{13}
               doc "This boolean variable indicates whether turning on the hysteresis."
               "The default value is false (no)"
               present_if ("GPIO Count" > 57);
         PARAM "RESERVED_2[57]"
               uint16{12}
               doc "Reserved"
               present_if ("GPIO Count" > 57);
         PARAM "Drive[57]"
               uint16{11}
               doc "This 1 bit variable indicates the drive strength."
               "The default value is 0"
               enum
               {
               {0, "2mA at 1.8v; 4mA at 3.3v"},
               {1, "4mA at 1.8v; 8mA at 3.3v"}
               }
               present_if ("GPIO Count" > 57);
         PARAM "Pullup Pulldown[57]"
               uint16{10:9}
               doc "This two bit value indicate how to config the pullup and pulldown resistors."
               "The default value is 0"
               enum
               {
               {0, "No pull resistor"},
               {1, "Pullup resistor enabled"},
               {2, "Pulldown resistor enabled"},
               {3, "Input disable the GPIO"}
               }
               present_if ("GPIO Count" > 57);
         PARAM "RESERVED_3[57]"
               uint16{8}
               doc "Reserved"
               present_if ("GPIO Count" > 57);
         PARAM "RESERVED_4[57]"
               uint16{7}
               doc "Reserved"
               present_if ("GPIO Count" > 57);
         PARAM "Global input[57]"
               bool in uint16{6}
               doc "This boolean variable indicates whether the global input is disabled or enabled."
               "The default value is 0"
               present_if ("GPIO Count" > 57);
         PARAM "Output control[57]"
               uint16{5:4}
               doc "This two bit value indicate how to config the GPIO_57 output."
               "The default value is 0"
               present_if ("GPIO Count" > 57);
         PARAM "Interrupt enable[57]"
               bool in uint16{3}
               doc "This boolean variable indicates whether the GPIO_57 interrupt is enabled."
               "The default value is false"
               present_if ("GPIO Count" > 57);
         PARAM "Dual edge trigger[57]"
               bool in uint16{2}
               doc "This boolean variable indicates whether the GPIO_57 interrupt is triggered by dual edge."
               "The default value is false"
               present_if ("GPIO Count" > 57);
         PARAM "Negative edge trigger[57]"
               bool in uint16{1}
               doc "This boolean variable indicates whether the GPIO_57 interrupt is triggered by negative edge or low level."
               "when the level trigger is selceted. The default value is false"
               present_if ("GPIO Count" > 57);
         PARAM "Edge trigger[57]"
               bool in uint16{0}
               doc "This boolean variable indicates whether the GPIO_57 interrupt is triggered by the edge."
               "The default value is false"
               present_if ("GPIO Count" > 57);
    }

    COMMAND "Adc Driver Configuration" 0xA2
    {
        doc "Configure ADC driver"

        PARAM "Reserved_0"
            uint32 {31:15}
            doc "Reserved"
            binary_message_only
            encode_value = 0;

        PARAM "RC Calibration for ADC"
            uint32 {14:10}
            doc "RC Calibration for ADC"
            min = 0
            max = 31
            default = 0x6;

        PARAM "Bandgap Temperature Constant"
            uint32 {9:8}
            doc "Bandgap temperature constant."
            default = 0x0;

        PARAM "Bandgap Output Current Trim"
            uint32 {7:4}
            doc "trim the bandgap output current form 9~53uA"
            enum
            {
                {0,   "Gives min current of ~9uA"},
                {0x6, "Gives min current of ~26uA"},
                {0xf, "gimvs min current of ~53uA"}
            };

        PARAM "Bandgap Noise Fiter Constant"
            uint32 {3:2}
            doc "Bandgap noise filter time constant."
            enum
            {
                {0,   "high"},
                {0x3, "low"}
            };

        PARAM "Dither Power Down"
            uint32 {1}
            doc "Dither power down"
            enum
            {
                {1,   "Dither OFF"},
                {0,  "Ditehr ON"}
            };

        PARAM "Reserved_1"
            uint32 {0}
            doc "Reserved"
            binary_message_only
            encode_value = 0;


        PARAM "Reserved_2"
            uint32 {31:15}
            doc "Reserved (Pin)"
            binary_message_only
            encode_value = 0;

        PARAM "IDAC Trimming 2nd OPAMP"
            uint32 {14:11}
            doc "IDAC trimming code for the 2nd OPAMP"
                "default 0x6"
            default = 0x6;

        PARAM "IDAC Trimming 1st OPAMP"
            uint32 {10:7}
            doc "IDAC trimming code for the 1st OPAMP"
                "default 0x6"
            default = 0x6;

        PARAM "Comparator Reference Voltage"
            uint32 {6:3}
            doc "Reference voltage selector for the comparator."
                "Default 650mV."
            enum
            {
                {0x0,  "550mV"},
                {0x1,  "600mV"},
                {0x3,  "650mV"},
                {0x7,  "700mV"},
                {0xf,  "750mV"}
            };

        PARAM "OPAMP Reference Voltage"
            uint32 {2:0}
            doc "Reference voltage selector for the OPAMP"
                "default = 500mv"
            enum
            {
                {0x0,  "400mV"},
                {0x1,  "450mV"},
                {0x3,  "500mV"},
                {0x7,  "550mV"}
            };


        PARAM "Reserved_3"
            uint32 {31:8}
            doc "Reserved (Pin)"
            binary_message_only
            encode_value = 0;


        PARAM "OPAMP Power Down"
            uint32 {7}
            doc "ADC OPAMP power down contrl"
            enum
            {
                {1,  "Power OFF"},
                {0,  "Power ON"}
            };


        PARAM "Sampling Clock Polarity"
            uint32 {6}
            doc "Sampleing clock output from ADC polarity control."
                "Default Negative Edgie of 24MHz"
            enum
            {
                {1,  "Negative Edge"},
                {0,  "Positive Edge"}
            };

        PARAM "Dither Clock Polarity"
            uint32 {5}
            doc "Dither input to ADC clock polarity control."
                "Default Positive Edge"
            enum
            {
                {1,  "Negative Edge"},
                {0,  "Positive Edge"}
            };

        PARAM "Comparator Bias Current Control"
            uint32 {4}
            doc "Bias current control for comparator."
                "Current is generated by V/R (not by a current source),"
                "if R varies, then this bit can be used to increase the bias current."
            enum
            {
                {1,  "5.6uA"},
                {0,  "4.3uA"}
            };


        PARAM "RESERVED"
            uint32 {3:0}
            doc "Reserved (Pin)"
            binary_message_only
            encode_value = 0;

        PARAM "ADC Power Up Delay"
            uint8
            doc "Power Up delay for ADC block in uS."
                "Default 20 us"
            default = 20;

        PARAM "Calibration Reference Channel"
            uint8
            doc "Calibration reference channel."

               enum
               {
               {0, "ADC_INPUT_VSS"},
               {1, "ADC_INPUT_P38"},
               {2, "ADC_INPUT_P37"},
               {3, "ADC_INPUT_P36"},

               {4, "ADC_INPUT_P35"},
               {5, "ADC_INPUT_P34"},
               {6, "ADC_INPUT_P33"},
               {7, "ADC_INPUT_P32"},

               {8,  "ADC_INPUT_P31"},
               {9,  "ADC_INPUT_P30"},
               {10, "ADC_INPUT_P29"},
               {11, "ADC_INPUT_P28"},

               {12, "ADC_INPUT_P23"},
               {13, "ADC_INPUT_P22"},
               {14, "ADC_INPUT_P21"},
               {15, "ADC_INPUT_BG_REFERENCE"},

               {16, "ADC_INPUT_NOTUSE"},
               {17, "ADC_INPUT_P18"},
               {18, "ADC_INPUT_P17"},
               {19, "ADC_INPUT_P16"},

               {20, "ADC_INPUT_P15"},
               {21, "ADC_INPUT_P14"},
               {22, "ADC_INPUT_P13"},
               {23, "ADC_INPUT_P12"},

               {24, "ADC_INPUT_P11"},
               {25, "ADC_INPUT_P10"},
               {26, "ADC_INPUT_P9"},
               {27, "ADC_INPUT_P8"},

               {28, "ADC_INPUT_P1"},
               {29, "ADC_INPUT_P0"},
               {30, "ADC_INPUT_VDD_CORE"},
               {31, "ADC_INPUT_VDDIO"}
               }
            default = 16;


        PARAM "Calibration Reading Ave Count"
            uint8
            doc "Auto calibration reading average count."
                "Default 8"
            max = 255
            default = 8;

        PARAM "Input Range"
            uint8
            doc "ADC input range select. Default is 0-1.2v"

               enum
               {
               {0, "0V-1.2V"},
               {1, "0V-2.4V"},
               {2, "0V-3.6V"}
               }
            default = 0;

        PARAM "Reference MicroVoltage"
            uint32
            doc "ADC calibration reference voltage in mV"
                "Default 500mV"
            default = 500;

        PARAM "ADCBandgapDelta[0]"
            int16
            doc "Offset to VSS to be applied to get bandgap for 0-1.2V range"
            default = 0;

        PARAM "ADCBandgapDelta[1]"
            int16
            doc "Offset to VSS to be applied to get bandgap for 0-2.4V range"
            default = 0;

         PARAM "ADCBandgapDelta[2]"
            int16
            doc "Offset to VSS to be applied to get bandgap for 0-3.6V range"
            default = 0;
    }



    COMMAND "MIA Driver" 0xA3
    {
        doc "Configuration item for the MIA Driver object"

        PARAM "Microseconds to Delay After Entering HID-OFF"
            uint32
            doc "The HW takes a little time to enter HID-OFF,"
                "so this is the time the FW will spin after enabling it."
            default = 10000;
        PARAM "Microseconds to Delay After Enabling Keyscan Block"
            uint16
            doc "number of microseconds to wait for keyscan block to get"
                "synchronized before go to HID-OFF."
            default = 600;
        PARAM "timedWakeIntPortPin"
            uint8
            doc "Port and Pin to be used for timed wake interrupt/async wake to PMU"
                "timedWakeIntPortPin[7:5] = port, timedWakeIntPortPin[4:0] = pin. Default is Port 2, pin 7."
            default = 0x47;
    }

    # COMMAND "BD_ADDR" 0x40        - Fixed header only

    COMMAND "Local Name" 0x41
    {
        doc "Sets the local name of the device."
        PARAM "Name"
            utf8[248] omit_pad_bytes
            doc "The local name for this device.";
    }

    COMMAND "Device Descriptor" 0x42
    {
        doc "($$$ COPY FROM 105_49)"
        PARAM "Length"
            uint8
            doc "($$$ COPY FROM 105_49)"
            binary_message_only
            encode_value = 0x12;
        PARAM "Descriptor type"
            uint8
            doc "($$$ COPY FROM 105_49)"
            binary_message_only
            encode_value = 0x01;                                            # device descriptor
        PARAM "USB spec version"
            uint16
            doc "($$$ COPY FROM 105_49)"
            note "BCD, version 1.10 = 0x0110";
        PARAM "Device class"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Device subclass"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Device protocol"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Max packet size"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Vendor ID"
            uint16
            doc "($$$ COPY FROM 105_49)";
        PARAM "Product ID"
            uint16
            doc "($$$ COPY FROM 105_49)";
        PARAM "Device release number"
            uint16
            doc "($$$ COPY FROM 105_49)"
            note "BCD, version 1.10 = 0x0110";
        PARAM "Manufacturer string index"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Product string index"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Serial number string index"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Number of configurations"
            uint8
            doc "($$$ COPY FROM 105_49)"
            binary_message_only
            encode_value = 1;
    }

    COMMAND "Configuration Descriptor" 0x43
    {
        doc "($$$ NEEDS EXPLANATION)"
        PARAM "Descriptor"
            uint8[255] omit_pad_bytes
            doc "($$$ NEEDS EXPLANATION)";
    }

    COMMAND "Language ID String Descriptor" 0x4A
    {
        doc "($$$ NEEDS EXPLANATION)"
        PARAM "Language ID length"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            binary_message_only
            encode_value = 4;
        PARAM "Language ID descriptor type"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            binary_message_only
            encode_value = 3;                               # string descriptor
        PARAM "Language ID"
            uint16
            doc "($$$ NEEDS EXPLANATION)"
            default = 0x0409;
    }

    COMMAND "Manufacturer ID String Descriptor" 0x4B
    {
        doc "USB Manufacturer ID string"
        PARAM "Manufacturer ID length"                      # in bytes
            uint8
            doc "Total length including the 2-byte header"
            max = 42;
        PARAM "Manufacturer ID descriptor type"
            uint8
            doc "Indicate this is string, must contains constant value 3"
            binary_message_only
            encode_value = 3;                               # string descriptor
        PARAM "Manufacturer ID Unicode-16"
            uint8[40] omit_pad_bytes                        # typically, use the UNICODE construct
            doc "USB Manufacturer Id String in Unicode"
            valid_length = ("Manufacturer ID length" - 2)   # in bytes
            min = 0;
    }

    COMMAND "Product ID String Descriptor" 0x4C
    {
        doc "USB Product String"
        PARAM "Product ID length"                           # in bytes
            uint8
            doc "Total length including the 2-byte header"
            max = 102;
        PARAM "Product ID descriptor type"
            uint8
            doc "Indicate this is string, must contains constant value 3"
            binary_message_only
            encode_value = 3;                               # string descriptor
        PARAM "Product ID Unicode-16"
            uint8[100] omit_pad_bytes                       # typically, use the UNICODE construct
            doc "USB Product String in Unicode"
            valid_length = ("Product ID length" - 2)        # in bytes
            min = 0;
    }

    COMMAND "DFU Device Descriptor" 0x53
    {
        doc "($$$ NEEDS EXPLANATION)"
        PARAM "Length"
            uint8
            doc "($$$ COPY FROM 105_49)"
            binary_message_only
            encode_value = 0x12;
        PARAM "Descriptor type"
            uint8
            doc "($$$ COPY FROM 105_49)"
            binary_message_only
            encode_value = 0x01;                                            # device descriptor
        PARAM "USB spec version"
            uint16
            doc "($$$ NEEDS EXPLANATION)"
            note "BCD, version 1.10 = 0x0110";
        PARAM "Device class"
            uint8
            doc "($$$ NEEDS EXPLANATION)";
        PARAM "Device subclass"
            uint8
            doc "($$$ NEEDS EXPLANATION)";
        PARAM "Device protocol"
            uint8
            doc "($$$ NEEDS EXPLANATION)";
        PARAM "Max packet size"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Vendor ID"
            uint16
            doc "($$$ COPY FROM 105_49)";
        PARAM "Product ID"
            uint16
            doc "($$$ COPY FROM 105_49)";
        PARAM "Device release number"
            uint16
            doc "($$$ COPY FROM 105_49)"
            note "BCD, version 1.10 = 0x0110";
        PARAM "Manufacturer string index"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Product string index"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Serial number string index"
            uint8
            doc "($$$ COPY FROM 105_49)";
        PARAM "Number of configurations"
            uint8
            doc "($$$ COPY FROM 105_49)"
            binary_message_only
            encode_value = 1;
    }

    COMMAND "DFU Configuration Descriptor" 0x54
    {
        doc "($$$ NEEDS EXPLANATION)"
        PARAM "Descriptor"
            uint8[0x19]
            doc "($$$ NEEDS EXPLANATION)";
    }

    COMMAND "DFU Manufacturer ID String Descriptor" 0x55
    {
        doc "USB DFU Manufacturer ID string"
        PARAM "Manufacturer ID length"                                      # in bytes
            uint8
            doc "Total length including the 2-byte header"
			max = 28;
        PARAM "Manufacturer ID descriptor type"
            uint8
            doc "Indicate this is string, must contains constant value 3"
            binary_message_only
            encode_value = 3;                                               # string descriptor
        PARAM "Manufacturer ID Unicode-16"
            uint8[0x1A] omit_pad_bytes                        # typically, use the UNICODE construct
            doc "USB DFU Manufacturer Id String in Unicode"
            valid_length = ("Manufacturer ID length" - 2)                   # in bytes
            min = 0;
    }

    COMMAND "DFU Product ID String Descriptor" 0x56
    {
        doc "USB DFU Product ID String"
        PARAM "Product ID length"                                           # in bytes
            uint8
            doc "Total length including the 2-byte header"
			max = 70;
        PARAM "Product ID descriptor type"
            uint8
            doc "Indicate this is string, must contains constant value 3"
            binary_message_only
            encode_value = 3;                                               # string descriptor
        PARAM "Product ID Unicode-16"
            uint8[0x44] omit_pad_bytes                        # typically, use the UNICODE construct
            doc "USB DFU Product String in Unicode"
            valid_length = ("Product ID length" - 2)                        # in bytes
            min = 0;
    }

    COMMAND "UART Configuration" 0x57
    {
        doc "Configures the baud rate, mode, and thresholds for the UART transport"
        PARAM "Transport UART baud rate"
            uint32
            doc "The baud rate used for the transport UART";
        PARAM "Debug UART baud rate"
            uint32
            doc "The baud rate used for the debug UART";
        PARAM "Flow control water mark"
            uint16
            doc "The number of bytes being unread in the UART receive FIFO, below which the peer"
                "will receive a flow on indication and above which the peer will receive a flow off"
                "indication."
            max = 480
            default = 345;
        PARAM "Transmit DMA threshold"
            uint16
            doc "The number of bytes in a packet being transmitted, above which DMA will be used"
                "and below which the data will be read directly from the FIFO by firmware."
            max = 480
            default = 60;
        PARAM "Receive DMA threshold"
            uint16
            doc "The number of bytes in a packet being recevied, above which DMA will be used"
                "and below which the data will be written directly to the FIFO by firmware."
            max = 480
            default = 5;
        PARAM "SLIP mode"
            uint8
            doc "Enables slip mode operation"
            enum
            {
                {0x00, "Disable"},
                {0x01, "Enable for SLIP interoperability with FTE"},
                {0x81, "Enable with RFC 1071 compliance"}
            };
    }

    COMMAND "Bluetooth 2.0+ Features" 0x58
    {
        doc "Enables or disables Bluetooth 2.0 or newer fetures"
        PARAM "Enable"
            uint8
            doc "Bitmap indicating which Bluetooth 2.0 or newer features to enable. By default"
                "(without the configuration item) Bluetooth 2.0 is enabled, but Absence mask"
                "and Anonymity are disabled."
            bitmap
            {
                {0x01, "Bluetooth 2.0"},
                {0x02, "Absence mask"},
                {0x04, "Lisbon features"}
            };
    }

    COMMAND "LPO Test Mode" 0x59
    {
        doc "Enables USB LPO test mode 0."
        PARAM "Enable"
            bool8
            doc "Boolean parameter to enable or disable USB LPO test mode 0.  Since USB LPO test"
                "mode 0 is disabled by default, this parameter need only ever be set to true";
    }

    COMMAND "AFH Channel Classification Table" 0x5A
    {
        doc "This table defines the threshold for the AFH channel classification algorithm"
        PARAM "Good channel threshold"
            uint8
            doc "This is the absolute value of the threshold that the AFH channel classification"
                "considers good. Units are dBm, default is 72 dBm.";
        PARAM "Marginal channel threshold"
            uint8
            doc "This is the absolute value of the threshold that the AFH channel classification"
                "considers marginal. Units are dBm, default is 64 dBm.";
        PARAM "A1"
            uint8
            doc "This is the average coefficient applied to the history RSSI values. default is 3.";
        PARAM "A2"
            uint8
            doc "This is the average coefficient applied to the snapshot RSSI values, default is"
                "1.";
    }

    COMMAND "ACL Pool Configuration" 0x5B
    {
        doc "Configures the buffer size and count of the ACL buffers"
        PARAM "Host claim ACL down payload size"
            uint16
            doc "The ACL buffer size (payload only) claimed to the host in response to"
                "Read_Buffer_Size. The default value is 1021.";
        PARAM "ACL down buffer size"
            uint16
            doc "The actual size of ACL down buffers (host to device direction), including header."
                "The default value is 1104.";
        PARAM "ACL up buffer size"
            uint16
            doc "The actual size of ACL up buffers (device to host direction), including header and"
                "internal transport prefix structures. The default value is 1060.";
        PARAM "Host claim ACL down payload count"
            uint8
            doc "The ACL buffer count claimed to the host in response to Read_Buffer_Size. The"
                "default value is 8.";
        PARAM "ACL down buffer count"
            uint8
            doc "The actual number of ACL down buffers (host to device direction). The default"
                "value is 7.";
        PARAM "Preserve UHE memory area"
            bool in uint8{7}
            doc "If UHE is not in use, this configuration item should be included with this flag"
                "cleared, in which case the memory used by the ROM UHE code will be recycled for"
                "the memory buffer pools. The default value is 1, which preserves the UHE memory.";
        PARAM "ACL up buffer count"
            uint8{6:0}
            doc "The actual number of ACL up buffers (device to host direction). The default value"
                "is 3.";
    }

    COMMAND "Link Quality Thresholds" 0x5D
    {
        doc "The thresholds used to switch between packet types"
        PARAM "Min number of packets for LQ calculation"
            uint8
            doc "If there are less than this number of packets in the stats"
                "buffer then the BER will be 255";
        PARAM "3-DH5 to 2-DH5 LQ threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "2-DH5 to 3-DH5 LQ threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "3-DH5 to 2-DH5 phase error threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 0 is"
                "best quality";
        PARAM "2-DH5 to 3-DH5 phase error threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 0 is"
                "best quality";
        PARAM "2-DH5 to 2-DH3 LQ threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "2-DH3 to 2-DH5 LQ threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "2-DH5 to 2-DH3 phase error threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 0 is"
                "best quality";
        PARAM "2-DH3 to 2-DH5 phase error threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 0 is"
                "best quality";
        PARAM "DH5 to DM5 threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "DM5 to DH5 threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "DM5 to DM3 threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "DM3 to DM5 threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "DM3 to DM1 threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
        PARAM "DM1 to DM3 threshold"
            uint8
            doc "The threshold to switch between these 2 packet types, range is 255 to 0, 255 is"
                "best quality";
    }

    COMMAND "RF Attenuation Table" 0x5E
    {
        doc "This config item is used only for Class 2 devices."
            "For Class 1.5 devices, use the Tx Power Table command, 0x1A"
            "This command sets the attenuation and register values for each power step."
        PARAM "Power table length"
            uint8
            doc "The number of entries in the power control table, range is 2 to 8"
            min = 0x2
            max = 0x8;
        PARAM "Testmode Power table length"
            uint8
            doc "The number of entries in the Testmode power control table, range is 2 to 8"
            min = 0x2
            max = 0x8;
        PARAM "Estimated attenuation[0]"
            uint8
            doc "The attenuation value to report for the corresponding register value, in 4 dB per"
                "step. Estimated attenuation[n] and Register value[n] are interleaved and repeated"
                "for Power table length entries.";
        PARAM "Register value[0]"
            uint8
            doc "The register value to use for this step, increasing by 2 for each 4 dB step."
                "Estimated attenuation[n] and Register value[n] are interleaved and repeated"
                "for Power table length entries.";
        PARAM "Estimated attenuation[1]"
            uint8;
        PARAM "Register value[1]"
            uint8;
        PARAM "Estimated attenuation[2]"
            uint8;
        PARAM "Register value[2]"
            uint8;
        PARAM "Estimated attenuation[3]"
            uint8;
        PARAM "Register value[3]"
            uint8;
        PARAM "Estimated attenuation[4]"
            uint8;
        PARAM "Register value[4]"
            uint8;
        PARAM "Estimated attenuation[5]"
            uint8;
        PARAM "Register value[5]"
            uint8;
        PARAM "Estimated attenuation[6]"
            uint8;
        PARAM "Register value[6]"
            uint8;
        PARAM "Estimated attenuation[7]"
            uint8;
        PARAM "Register value[7]"
            uint8;
        PARAM "Testmode Estimated attenuation[0]"
            uint8
            doc "The attenuation value to report for the corresponding register value, in 4 dB per"
                "step. Estimated attenuation[n] and Register value[n] are interleaved and repeated"
                "for Power table length entries.";
        PARAM "Testmode Register value[0]"
            uint8
            doc "The register value to use for this step, increasing by 2 for each 4 dB step."
                "Estimated attenuation[n] and Register value[n] are interleaved and repeated"
                "for Power table length entries.";
        PARAM "Testmode Estimated attenuation[1]"
            uint8;
        PARAM "Testmode Register value[1]"
            uint8;
        PARAM "Testmode Estimated attenuation[2]"
            uint8;
        PARAM "Testmode Register value[2]"
            uint8;
        PARAM "Testmode Estimated attenuation[3]"
            uint8;
        PARAM "Testmode Register value[3]"
            uint8;
        PARAM "Testmode Estimated attenuation[4]"
            uint8;
        PARAM "Testmode Register value[4]"
            uint8;
        PARAM "Testmode Estimated attenuation[5]"
            uint8;
        PARAM "Testmode Register value[5]"
            uint8;
        PARAM "Testmode Estimated attenuation[6]"
            uint8;
        PARAM "Testmode Register value[6]"
            uint8;
        PARAM "Testmode Estimated attenuation[7]"
            uint8;
        PARAM "Testmode Register value[7]"
            uint8;
    }

    COMMAND "RSSI Config" 0x5F
    {
        doc "Sets the RSSI thresholds and interval used for increment and decrement power decisions"
        PARAM "Low power limit"
            uint8
            doc "When abs(RSSI) is above this limit, firmware sends LMP_incr_power_req. Raw RSSI"
                "readings are from 0 to -110 dB.";
        PARAM "High power limit"
            uint8
            doc "When abs(RSSI) is below this limit, firmware sends LMP_decr_power_req. Raw RSSI"
                "readings are from 0 to -110 dB.";
        PARAM "Update interval"
            uint8
            doc "Determines how often firmware examines the RSSI readings, in units of 125"
                "milliseconds";
    }


    COMMAND "DHM SCO RX Lengh Threshold" 0x61
    {
        doc "DHM SCO receive length threshold"
        PARAM "Threshold"
            uint8
            doc "This threshold defines the minimum number of SCO bytes received over the air"
                "to be sent to the host";
    }

    COMMAND "CSA thread stack size" 0x62
    {
        doc "Sets the size of the CSA thread stack"
        PARAM "Size in UINT32s"
            uint16
            doc "This value determines the stack size in UINT32s.";
    }

    COMMAND "Max Supported Piconet Count" 0x64
    {
        doc "Sets the number of piconets which can be simultaneously participated in, without"
            "distinguishing between a master or slave role."
        PARAM "Size"
            uint8
            doc "The number of supported piconets.  The default value is 4, and the maximum is 4."
            default = 4
            max = 4;
    }

    COMMAND "SCO Parameters" 0x68
    {
        doc "Sets the SCO and PCM interface parameters."
        PARAM "RESERVED"
            uint32{31:20}
            doc "Pad bits included to fill the parameters out to a uint32."
            binary_message_only
            encode_value = 0
            enabled_if (0 = 1);     # Never
        PARAM "SCO routing"
            uint32{19:19}
            doc "Sets the SCO data source and destination to either transport or PCM."
            enum
            {
                {0x00, "PCM"},
                {0x01, "Transport"}
            };
        PARAM "Clock mode"
            uint32{18:18}
            doc "Specifies whether Bluetooth module to be the master or slave for PCM_CLK signal"
            enum
            {
                {0x00, "Slave"},
                {0x01, "Master"}
            };
        PARAM "SCO time slot"
            uint32{17:14}
            doc "Time slot assignment";
        PARAM "Justify"
            uint32{13:13}
            doc "Indicates the data to right justify (fill data shifted out first) or not. Default is left justify"
                "(fill data shifted out last)."
            enum
            {
                {0x00, "Left"},
                {0x01, "Right"}
            };
        PARAM "Fill bits"
            uint32{12:10}
            doc "Specifies the number of bits to be filled.  The maximum value is three."
            max = 3;
        PARAM "Fill data"
            uint32{9:8}
            doc "Indicates the method of filling unused data bits"
            enum
            {
                {0x00, "0's"},
                {0x01, "1's"},
                {0x02, "Signed"},
                {0x03, "Programmable"}
            };
        PARAM "Fill value"
            uint32{7:6}
            doc "Specifies the value with which to fill unused bits if Fill_Data is set to"
                "programmable"
            enabled_if ("Fill data" = 0x03)
            max =   if      ("Fill bits" = 0) then  0
                    else if ("Fill bits" = 1) then  1
                    else if ("Fill bits" = 2) then  3
                    else                            7;
        PARAM "PCM interface rate"
            uint32{5:3}
            doc "Indicates the PCM clock frequency."
            enum
            {
                {0x00, "128 KBps"},
                {0x01, "256 KBps"},
                {0x02, "512 KBps"},
                {0x03, "1024 KBps"},
                {0x04, "2048 KBps"}
            };
        PARAM "Frame type"
            uint32{2:2}
            doc "Indicates the PCM frame type: short frame or long frame"
            enum
            {
                {0x00, "Short"},
                {0x01, "Long"}
            };
        PARAM "Sync mode"
            uint32{1:1}
            doc "Indicates whether Bluetooth module is the master or slave for PCM_SYNC signal"
            enum
            {
                {0x00, "Slave"},
                {0x01, "Master"}
            };
        PARAM "Bit order"
            uint32{0:0}
            doc "Indicates whether the LSB bit is shifted out first or not for serial PCM data"
            enum
            {
                {0x00, "MSB first"},
                {0x01, "LSB first"}
            };
    }

    COMMAND "Config Data Version" 0x69
    {
        doc "Sets the configuration data version of the released configuration data file. The value"
            "is set when the CGS source file is compiled to a formal release in CGR format."
        PARAM "Config data version"
            uint16
            doc "The version of configuration data, range is 0x000 to 0xFFF."
            max = 0x0FFF
            binary_message_only
            encode_value = ReleaseParameter("Config data version");
    }

    COMMAND "Page Scan Repetition Mode" 0x6C
    {
        doc "Sets the default value of the SR bits that are set in the FHS packet during"
            "transmission during inquiry scan response if the Write_Page_Scan_Repetition_Mode HCI"
            "Vendor-specific command is not issued."
        PARAM "Mode"
            uint8
            doc "Indicates the maximum interval between two successive page scans."
            enum
            {
                {0, "R0"},
                {1, "R1"},
                {2, "R2"}
            };
    }

    COMMAND "Temperature Correction Algorithm Offset" 0x70
    {
        doc "Offset added to or subtracted from the estimated temperature"
        PARAM "Subtract"
            bool in uint8{7}
            doc "If 0, Absolute offset will be added."
                "If 1, Absolute offset will be subtracted.";
        PARAM "Absolute offset"
            uint8{6:0}
            doc "The absolute value to be added or subtracted.";
    }

    COMMAND "Multi-Slot Sniff Attempts" 0x71
    {
        doc "Enable multi-slot sniff attempts"
        PARAM "Enable"
            bool8
            doc "Enables multi-slot sniff attempts if 1.";
    }

    COMMAND "Sleep Mode Configuration" 0x72
    {
        doc "Configure how to sleep"
        PARAM "Sleep mode"
            uint8
            doc "Sleep mode algorithm selection."
            enum
            {
                {0x00, "No sleep mode"},
                {0x01, "UART"},
                {0x02, "UART with messaging"},
                {0x03, "USB"},
                {0x05, "USB with host wake"},
                {0x06, "SDIO"},
                {0x07, "UART CS-N"},
                {0x08, "SPI"},
                {0x09, "H5"},
                {0x0B, "HIDD"}
            };
        PARAM "Idle threshold host"
            uint8
            doc "Host Idle Threshold, applicable To Sleep Modes 1, 2, 5, 7."
                "This is the number of firmware loops executed with no activity"
                "before the Host wake line is deasserted. Activity includes HCI"
                "traffic excluding certain sleep mode commands and the presence"
                "of SCO connections if the \"Allow Host Sleep During SCO\" flag is"
                "not set to 1. Each count of this parameter is roughly equivalent"
                "to 300 ms. For example, when this parameter is set to 16 (0x10),"
                "the Host wake line will be deasserted after approximately 4.8"
                "seconds of inactivity."
            enabled_if (("Sleep mode" = 1) or ("Sleep mode" = 2) or ("Sleep mode" = 5) or
                         ("Sleep mode" = 7));
        PARAM "Idle threshold HC"
            uint8
            doc "Host Controller Idle Threshold, applicable To Sleep Modes 1, 2, 3, 5,"
                "6, 7, 9. This is the number of firmware loops executed with no activity"
                "before the HC is considered idle. Depending on the mode, HC may"
                "then attempt to sleep. Activity includes HCI traffic excluding"
                "certain sleep mode commands and the presence of ACL/SCO connections."
                "Each count of this parameter is roughly equivalent to 300 ms."
                "For example, when this parameter is set to 16 (0x10), the HC will"
                "be considered idle after approximately 4.8 seconds of inactivity."
            enabled_if (("Sleep mode" = 1) or ("Sleep mode" = 2) or ("Sleep mode" = 3) or
                        ("Sleep mode" = 5) or ("Sleep mode" = 6) or
                        ("Sleep mode" = 7) or ("Sleep mode" = 9));
        PARAM "RESERVED"
            uint8{7:6}
            doc "Pad bits included to fill the parameters out to a uint8."
            binary_message_only
            encode_value = 0
            enabled_if (0 = 1);     # Never
        PARAM "Active connection handling on suspend"
            uint8{5:5}
            doc "Suspend Behavior, applicable To Sleep Modes 3, 5."
                "When set to 0, this flag indicates that upon detecting a USB suspend,"
                "the device should sleep whenever possible. This means that the device"
                "will stay up if necessary to maintain active ACL and/or SCO connections,"
                "and will wake up to perform any scheduled periodic activities if configured to do so."
                "When set to 1, the device will immediate go to sleep upon detecting a USB"
                "SUSPEND and will not wake up until USB RESUME is detected. This will cause"
                "all connections (whether ACL or SCO, parked or not, etc.) to be dropped."
                "All periodic activity will also be suspended. When this flag is set to 1,"
                "all other parameters are ignored."
            enum
            {
                {0x00, "Maintain connections; sleep when timed activity allows"},
                {0x01, "Sleep until resume is detected"}
            }
            enabled_if (("Sleep mode" = 3) or ("Sleep mode" = 5));
        PARAM "Enable tristate control of UART TX line"
            bool in uint8{4}
            doc "Applicable To Sleep Modes 1, 2, 7."
                "When set to 0, the device will not tristate its UART TX line before going to sleep.<br>"
                "When set to 1, the device will tristate its UART TX line before going to sleep."
            enabled_if (("Sleep mode" = 1) or ("Sleep mode" = 2) or ("Sleep mode" = 7));
        PARAM "Combine sleep mode and LPM"
            bool in uint8{3}
            doc "Applicable To Sleep Modes 1, 2, 3, 5, 7."
                "In Mode 0, always set byte 7 to 0. In all sleep modes, device always"
                "requires permission to sleep between scans / periodic inquiries regardless"
                "of the setting of this byte. In Modes 1 and 2, if byte is set, device must"
                "have \"permission\" to sleep during the low power modes of sniff, hold, and park."
                "If byte is not set, device can sleep without permission during these modes."
                "Permission to sleep in Mode 1 is obtained if the BT_WAKE signal is not asserted."
                "Permission to sleep in Mode 2 occurs after the Sleep Request / Sleep Request ACK exchange."
                "In Mode 3 and 5, if the byte is set to 0, the device will not be able to sleep"
                "during the low power modes. If it is set to 1, the device will be able so sleep"
                "during the low power modes."
            enabled_if (("Sleep mode" = 1) or ("Sleep mode" = 2) or ("Sleep mode" = 3) or
                        ("Sleep mode" = 5) or ("Sleep mode" = 7));
        PARAM "Allow host sleep during SCO"
            bool in uint8{2}
            doc "Applicable To Sleep Modes 1, 2, 3, 5, 7."
                "When this flag is set to 0, the host is not allowed to sleep while"
                "an SCO is active. In modes 1 and 2, the device will keep the host"
                "wake line asserted while an SCO is active. In mode 3, the device"
                "will immediately issue a USB RESUME if the host issues a SUSPEND."
                "When this flag is set to 1, the host can sleep while an SCO is active."
                "This flag should only be set to 1 if SCO traffic is directed to the PCM interface."
            enabled_if (("Sleep mode" = 1) or ("Sleep mode" = 2) or ("Sleep mode" = 3) or
                        ("Sleep mode" = 5) or ("Sleep mode" = 7));
        PARAM "GPIO 3 active mode"
            uint8{1:1}
            doc "Applicable To Sleep Modes 1, 2, 5, 7."
                "This flag indicates whether the GPIO 3 line is active low or high."
            enum
            {
                {0x00, "Active Low"},
                {0x01, "Active High"}
            }
            enabled_if (("Sleep mode" = 1) or ("Sleep mode" = 2) or ("Sleep mode" = 5) or
                        ("Sleep mode" = 7));
        PARAM "GPIO 0 active mode"
            uint8{0:0}
            doc "Applicable To Sleep Modes 1, 2, 7."
                "This flag indicates whether the GPIO 0 line is active low or high."
            enum
            {
                {0x00, "Active Low"},
                {0x01, "Active High"}
            }
            enabled_if (("Sleep mode" = 1) or ("Sleep mode" = 2) or ("Sleep mode" = 7));
        PARAM "Resume timeout"
            uint8
            doc "Applicable To Sleep Modes 3, 5."
                "After the device issues a USB RESUME, it will wait this many seconds for the"
                "Host to resume USB operations before issuing another USB RESUME."
                "If this value is set to 0, the device will never reissue RESUME"
                "and will instead wait forever for the host to act on the initial RESUME."
            enabled_if (("Sleep mode" = 3) or ("Sleep mode" = 5));
        PARAM "Sleep enable"
            bool8
            doc "If 1, the device is allowed to go to sleep.  If 0, the device must remain awake at"
                "all times";
    }

    COMMAND "Link Quality Control Configuration" 0x78
    {
        doc "Enables rate control, sets the time history and the update duration"
        PARAM "Allow rate control"
            bool8
            doc "When set to 1 the 2045 will monitor the link quality for each connection";
        PARAM "Time history duration"
            uint8
            doc "The length of time that statistical information is maintained in seconds. The"
                "minimum value is 4 and the maximum is 20."
            enabled_if ("Allow rate control" = 1)
            min = 4
            max = 20;
        PARAM "Update rate duration"
            uint8
            doc "How often the Link Quality is evaluated for each link in seconds. The minimum"
                "value is 2 and the maximum is 10."
            enabled_if ("Allow rate control" = 1)
            min = 2
            max = 10;
    }

    COMMAND "Disable Dynamic SCO Data Routing Change" 0x7D
    {
        doc "This disables the host to change SCO/eSCO routing between PCM and transport while the"
            "audio connection still active"
        PARAM "Disable"
            uint8
            doc "Boolean parameter to enable or disable dynamic SCO/eSCO data routing change."
                "Support is enabled by default, this parameter need only ever be set to true."
            binary_message_only
            encode_value = 1;
    }

    COMMAND "PMU Config Flags" 0x7E
    {
        doc "This PMU Config map file defines various PMU Configurations as described below"
        PARAM "PMU config flags"
            uint32
            doc "General PMU config bitmap."
            bitmap
            {
                {0x01, "Deassert Host Wake if Bt Wake is deasserted"},
                {0x02, "Enable Pause Mode while not sleeping"}
            };
    }

    COMMAND "EEPROM Page Size" 0x7F
    {
        doc "Specifies the EEPROM page size for use in ensuring that the volatile"
            "section in EEPROM is protected against loss of items in the event of"
            "power loss during a write."
        PARAM "Page size"
            uint8
            doc "The size of each EEPROM page, specific to the EEPROM component"
                "installed in the target device. The default value is 64.";
    }

    COMMAND "PMU Crystal Warm up Time" 0x80
    {
        doc "This item is to overwrite the PMU Crystal Warm up Time in Micro Seconds."
        PARAM "Crystal warm up time"
            uint16
            doc "In micro seconds."
            default = 5000;
    }

    COMMAND "TCA Conversion Values with Page Descriptors" 0x82
    {
        doc "TCA temperature compensation tables. This format supports"
            "up to 25 8-bit and 5 16-bit register assignments and "
            "up to 6 temperature zones. Supports 32-bit addressing"
            "with 16-bit addressing offsets for each page of 5 registers."
            "------------------------------------------------------------------------"
            "                   Temperature switching points."
            " Temperatures are floored, i.e. the temperature listed is the minimum"
            " temperature for the designated zone."
            "------------------------------------------------------------------------"
            "                      8-bit and 16-bit page descriptors."
            " The page descriptors are used  to encapsulate the information common to"
            " a register  for all temperature ranges. This includes the base address,"
            " the address offsets, and the bitmasks."
            " Legend:"
            " Single array index = [Page]"
            " Dual array index = [Page][Reg]"
            "------------------------------------------------------------------------"
            "                       8-bit and 16-bit page data."
            " The page data are the temperature-dependent data for each register"
            " listed in the page descriptors above"
            " Legend: "
            " Triple Array Indices: [TStep][Page][Reg] "
            " Triple Array Indices: [TStep][Page][Reg] "
        PARAM "FAB ID"
            uint8
            doc "8-bit unique code for identifying the actual foundary at which"
                "this device was manufactured. Used to allow variable tuning for"
                "parts from different foundaries in the same products."
            default = 0xff;
        PARAM "Num TSteps"
            uint8
            doc "The number of temperature minimum switching points. The value"
                 "is actually the desired temperature plus a 50 degree Celsius offset"
                 "For example, a switching point of -5C would be input as 45"
                 "NOTE: The accuracy of the temperature sensor is around +/- 8C,"
                 "therefore switching points should be chosen carefully to avoid"
                 "repeated adjustments around a switching point."
            min = 1
            max = 6;
        PARAM "Tmin[0]"
            uint8
            doc "Lowest temperature for region plus 50 degrees celsius offset, for"
                "example a value of 1 specifies a temperature range starting at 51"
                "degrees celsius.";
        PARAM "Tmin[1]"
            uint8
            present_if("Num TSteps" > 1);
        PARAM "Tmin[2]"
            uint8
            present_if("Num TSteps" > 2);
        PARAM "Tmin[3]"
            uint8
            present_if("Num TSteps" > 3);
        PARAM "Tmin[4]"
            uint8
            present_if("Num TSteps" > 4);
        PARAM "Tmin[5]"
            uint8
            present_if("Num TSteps" > 5);
        PARAM "Num Pages8"
            uint8
            doc "Number of 8-bit data pages."
            min = 0
            max = 5;
        PARAM "Num Pages16"
            uint8
            doc "Number of 16-bit data pages."
            min = 1
            max = 1;
        #######################################################################
        #                              PAGE DESCRIPTORS
        #
        # Legend:
        # Single array index = [Page]
        # Dual array index   = [Page][Reg]
        #######################################################################
        #######################################################################
        #
        # 8 - BIT PAGE DESCRIPTORS
        #
        #######################################################################
        # Page 0 is reserved for the PA Driver gain control
        # Page 0
        PARAM "BaseAddress8[0]"
            uint32
            doc " 32-bit base address for Page 0"
            present_if("Num Pages8" > 0);
        PARAM "NumRegs8[0]"
            uint8
            doc " Number of registers in Page 0"
            min = 1
            max = 5
            present_if("Num Pages8" > 0);
        PARAM "AdrOffset8[0][0]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 0 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 0 ));
        PARAM "Bitmask8[0][0]"
            uint8
            doc " 8-bit bit mask for Page 0 Reg 0 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 0 ));
        PARAM "AdrOffset8[0][1]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 1 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 1 ));
        PARAM "Bitmask8[0][1]"
            uint8
            doc " 8-bit bit mask for Page 0 Reg 1 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 1 ));
        PARAM "AdrOffset8[0][2]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 2 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 2 ));
        PARAM "Bitmask8[0][2]"
            uint8
            doc " 8-bit bit mask for Page 0 Reg 2 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 2 ));
        PARAM "AdrOffset8[0][3]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 3 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 3 ));
        PARAM "Bitmask8[0][3]"
            uint8
            doc " 8-bit bit mask for Page 0 Reg 3 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 3 ));
        PARAM "AdrOffset8[0][4]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 4 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 4 ));
        PARAM "Bitmask8[0][4]"
            uint8
            doc " 8-bit bit mask for Page 0 Reg 4 "
            present_if(( "Num Pages8" > 0) and ("NumRegs8[0]" > 4 ));
        # Page 1
        PARAM "BaseAddress8[1]"
            uint32
            doc " 32-bit base address for Page 1"
            present_if("Num Pages8" > 1);
        PARAM "NumRegs8[1]"
            uint8
            doc " Number of registers in Page 1"
            min = 1
            max = 5
            present_if("Num Pages8" > 1);
        PARAM "AdrOffset8[1][0]"
            uint16
            doc " 16-bit offset to the base address for Page 1 Reg 0 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 0 ));
        PARAM "Bitmask8[1][0]"
            uint8
            doc " 8-bit bit mask for Page 1 Reg 0 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 0 ));
        PARAM "AdrOffset8[1][1]"
            uint16
            doc " 16-bit offset to the base address for Page 1 Reg 1 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 1 ));
        PARAM "Bitmask8[1][1]"
            uint8
            doc " 8-bit bit mask for Page 1 Reg 1 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 1 ));
        PARAM "AdrOffset8[1][2]"
            uint16
            doc " 16-bit offset to the base address for Page 1 Reg 2 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 2 ));
        PARAM "Bitmask8[1][2]"
            uint8
            doc " 8-bit bit mask for Page 1 Reg 2 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 2 ));
        PARAM "AdrOffset8[1][3]"
            uint16
            doc " 16-bit offset to the base address for Page 1 Reg 3 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 3 ));
        PARAM "Bitmask8[1][3]"
            uint8
            doc " 8-bit bit mask for Page 1 Reg 3 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 3 ));
        PARAM "AdrOffset8[1][4]"
            uint16
            doc " 16-bit offset to the base address for Page 1 Reg 4 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 4 ));
        PARAM "Bitmask8[1][4]"
            uint8
            doc " 8-bit bit mask for Page 1 Reg 4 "
            present_if(( "Num Pages8" > 1) and ("NumRegs8[1]" > 4 ));
        # Page 2
        PARAM "BaseAddress8[2]"
            uint32
            doc " 32-bit base address for Page 2"
            present_if("Num Pages8" > 2);
        PARAM "NumRegs8[2]"
            uint8
            doc " Number of registers in Page 2"
            min = 1
            max = 5
            present_if("Num Pages8" > 2);
        PARAM "AdrOffset8[2][0]"
            uint16
            doc " 16-bit offset to the base address for Page 2 Reg 0 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 0 ));
        PARAM "Bitmask8[2][0]"
            uint8
            doc " 8-bit bit mask for Page 2 Reg 0 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 0 ));
        PARAM "AdrOffset8[2][1]"
            uint16
            doc " 16-bit offset to the base address for Page 2 Reg 1 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 1 ));
        PARAM "Bitmask8[2][1]"
            uint8
            doc " 8-bit bit mask for Page 2 Reg 1 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 1 ));
        PARAM "AdrOffset8[2][2]"
            uint16
            doc " 16-bit offset to the base address for Page 2 Reg 2 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 2 ));
        PARAM "Bitmask8[2][2]"
            uint8
            doc " 8-bit bit mask for Page 2 Reg 2 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 2 ));
        PARAM "AdrOffset8[2][3]"
            uint16
            doc " 16-bit offset to the base address for Page 2 Reg 3 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 3 ));
        PARAM "Bitmask8[2][3]"
            uint8
            doc " 8-bit bit mask for Page 2 Reg 3 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 3 ));
        PARAM "AdrOffset8[2][4]"
            uint16
            doc " 16-bit offset to the base address for Page 2 Reg 4 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 4 ));
        PARAM "Bitmask8[2][4]"
            uint8
            doc " 8-bit bit mask for Page 2 Reg 4 "
            present_if(( "Num Pages8" > 2) and ("NumRegs8[2]" > 4 ));
        # Page 3
        PARAM "BaseAddress8[3]"
            uint32
            doc " 32-bit base address for Page 3"
            present_if("Num Pages8" > 3);
        PARAM "NumRegs8[3]"
            uint8
            doc " Number of registers in Page 3"
            min = 1
            max = 5
            present_if("Num Pages8" > 3);
        PARAM "AdrOffset8[3][0]"
            uint16
            doc " 16-bit offset to the base address for Page 3 Reg 0 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 0 ));
        PARAM "Bitmask8[3][0]"
            uint8
            doc " 8-bit bit mask for Page 3 Reg 0 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 0 ));
        PARAM "AdrOffset8[3][1]"
            uint16
            doc " 16-bit offset to the base address for Page 3 Reg 1 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 1 ));
        PARAM "Bitmask8[3][1]"
            uint8
            doc " 8-bit bit mask for Page 3 Reg 1 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 1 ));
        PARAM "AdrOffset8[3][2]"
            uint16
            doc " 16-bit offset to the base address for Page 3 Reg 2 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 2 ));
        PARAM "Bitmask8[3][2]"
            uint8
            doc " 8-bit bit mask for Page 3 Reg 2 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 2 ));
        PARAM "AdrOffset8[3][3]"
            uint16
            doc " 16-bit offset to the base address for Page 3 Reg 3 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 3 ));
        PARAM "Bitmask8[3][3]"
            uint8
            doc " 8-bit bit mask for Page 3 Reg 3 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 3 ));
        PARAM "AdrOffset8[3][4]"
            uint16
            doc " 16-bit offset to the base address for Page 3 Reg 4 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 4 ));
        PARAM "Bitmask8[3][4]"
            uint8
            doc " 8-bit bit mask for Page 3 Reg 4 "
            present_if(( "Num Pages8" > 3) and ("NumRegs8[3]" > 4 ));
        # Page 4
        PARAM "BaseAddress8[4]"
            uint32
            doc " 32-bit base address for Page 4"
            present_if("Num Pages8" > 4);
        PARAM "NumRegs8[4]"
            uint8
            doc " Number of registers in Page 4"
            min = 1
            max = 5
            present_if("Num Pages8" > 4);
        PARAM "AdrOffset8[4][0]"
            uint16
            doc " 16-bit offset to the base address for Page 4 Reg 0 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 0 ));
        PARAM "Bitmask8[4][0]"
            uint8
            doc " 8-bit bit mask for Page 4 Reg 0 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 0 ));
        PARAM "AdrOffset8[4][1]"
            uint16
            doc " 16-bit offset to the base address for Page 4 Reg 1 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 1 ));
        PARAM "Bitmask8[4][1]"
            uint8
            doc " 8-bit bit mask for Page 4 Reg 1 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 1 ));
        PARAM "AdrOffset8[4][2]"
            uint16
            doc " 16-bit offset to the base address for Page 4 Reg 2 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 2 ));
        PARAM "Bitmask8[4][2]"
            uint8
            doc " 8-bit bit mask for Page 4 Reg 2 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 2 ));
        PARAM "AdrOffset8[4][3]"
            uint16
            doc " 16-bit offset to the base address for Page 4 Reg 3 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 3 ));
        PARAM "Bitmask8[4][3]"
            uint8
            doc " 8-bit bit mask for Page 4 Reg 3 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 3 ));
        PARAM "AdrOffset8[4][4]"
            uint16
            doc " 16-bit offset to the base address for Page 4 Reg 4 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 4 ));
        PARAM "Bitmask8[4][4]"
            uint8
            doc " 8-bit bit mask for Page 4 Reg 4 "
            present_if(( "Num Pages8" > 4) and ("NumRegs8[4]" > 4 ));
        #######################################################################
        #
        # 16-BIT PAGE DESCRIPTORS
        #
        #######################################################################
        # Page 0
        PARAM "BaseAddress16[0]"
            uint32
            doc " 32-bit base address for Page 0"
            present_if("Num Pages16" > 0);
        PARAM "NumRegs16[0]"
            uint8
            doc " Number of registers in Page 0"
            min = 1
            max = 5
            present_if("Num Pages16" > 0);
        PARAM "AdrOffset16[0][0]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 0 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 0 ));
        PARAM "Bitmask16[0][0]"
            uint16
            doc " 16-bit bit mask for Page 0 Reg 0 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 0 ));
        PARAM "AdrOffset16[0][1]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 1 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 1 ));
        PARAM "Bitmask16[0][1]"
            uint16
            doc " 16-bit bit mask for Page 0 Reg 1 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 1 ));
        PARAM "AdrOffset16[0][2]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 2 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 2 ));
        PARAM "Bitmask16[0][2]"
            uint16
            doc " 16-bit bit mask for Page 0 Reg 2 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 2 ));
        PARAM "AdrOffset16[0][3]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 3 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 3 ));
        PARAM "Bitmask16[0][3]"
            uint16
            doc " 16-bit bit mask for Page 0 Reg 3 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 3 ));
        PARAM "AdrOffset16[0][4]"
            uint16
            doc " 16-bit offset to the base address for Page 0 Reg 4 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 4 ));
        PARAM "Bitmask16[0][4]"
            uint16
            doc " 16-bit bit mask for Page 0 Reg 4 "
            present_if(( "Num Pages16" > 0) and ("NumRegs16[0]" > 4 ));
        #######################################################################
        # PAGE DATA
        #
        # Legend:
        # Triple Array Indices: [TStep][Page][Reg]
        #######################################################################
        #######################################################################
        #
        # 8-BIT PAGE DATA
        #
        #######################################################################
        # TStep 0
        # Page 0
        PARAM "Data8[0][0][0]"
            uint8
            doc " 8-bit data for TStep 0 Page 0 Reg 0"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Offset8[0][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 0"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Data8[0][0][1]"
            uint8
            doc " 8-bit data for TStep 0 Page 0 Reg 1"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Offset8[0][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 1"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Data8[0][0][2]"
            uint8
            doc " 8-bit data for TStep 0 Page 0 Reg 2"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Offset8[0][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 2"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Data8[0][0][3]"
            uint8
            doc " 8-bit data for TStep 0 Page 0 Reg 3"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Offset8[0][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 3"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Data8[0][0][4]"
            uint8
            doc " 8-bit data for TStep 0 Page 0 Reg 4"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        PARAM "Offset8[0][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 4"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        # Page 1
        PARAM "Data8[0][1][0]"
            uint8
            doc " 8-bit data for TStep 0 Page 1 Reg 0"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Offset8[0][1][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 1 Reg 0"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Data8[0][1][1]"
            uint8
            doc " 8-bit data for TStep 0 Page 1 Reg 1"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Offset8[0][1][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 1 Reg 1"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Data8[0][1][2]"
            uint8
            doc " 8-bit data for TStep 0 Page 1 Reg 2"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Offset8[0][1][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 1 Reg 2"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Data8[0][1][3]"
            uint8
            doc " 8-bit data for TStep 0 Page 1 Reg 3"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Offset8[0][1][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 1 Reg 3"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Data8[0][1][4]"
            uint8
            doc " 8-bit data for TStep 0 Page 1 Reg 4"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        PARAM "Offset8[0][1][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 1 Reg 4"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        # Page 2
        PARAM "Data8[0][2][0]"
            uint8
            doc " 8-bit data for TStep 0 Page 2 Reg 0"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Offset8[0][2][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 2 Reg 0"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Data8[0][2][1]"
            uint8
            doc " 8-bit data for TStep 0 Page 2 Reg 1"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Offset8[0][2][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 2 Reg 1"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Data8[0][2][2]"
            uint8
            doc " 8-bit data for TStep 0 Page 2 Reg 2"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Offset8[0][2][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 2 Reg 2"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Data8[0][2][3]"
            uint8
            doc " 8-bit data for TStep 0 Page 2 Reg 3"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Offset8[0][2][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 2 Reg 3"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Data8[0][2][4]"
            uint8
            doc " 8-bit data for TStep 0 Page 2 Reg 4"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        PARAM "Offset8[0][2][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 2 Reg 4"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        # Page 3
        PARAM "Data8[0][3][0]"
            uint8
            doc " 8-bit data for TStep 0 Page 3 Reg 0"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Offset8[0][3][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 3 Reg 0"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Data8[0][3][1]"
            uint8
            doc " 8-bit data for TStep 0 Page 3 Reg 1"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Offset8[0][3][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 3 Reg 1"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Data8[0][3][2]"
            uint8
            doc " 8-bit data for TStep 0 Page 3 Reg 2"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Offset8[0][3][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 3 Reg 2"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Data8[0][3][3]"
            uint8
            doc " 8-bit data for TStep 0 Page 3 Reg 3"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Offset8[0][3][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 3 Reg 3"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Data8[0][3][4]"
            uint8
            doc " 8-bit data for TStep 0 Page 3 Reg 4"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        PARAM "Offset8[0][3][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 3 Reg 4"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        # Page 4
        PARAM "Data8[0][4][0]"
            uint8
            doc " 8-bit data for TStep 0 Page 4 Reg 0"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Offset8[0][4][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 4 Reg 0"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Data8[0][4][1]"
            uint8
            doc " 8-bit data for TStep 0 Page 4 Reg 1"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Offset8[0][4][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 4 Reg 1"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Data8[0][4][2]"
            uint8
            doc " 8-bit data for TStep 0 Page 4 Reg 2"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Offset8[0][4][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 4 Reg 2"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Data8[0][4][3]"
            uint8
            doc " 8-bit data for TStep 0 Page 4 Reg 3"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Offset8[0][4][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 4 Reg 3"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Data8[0][4][4]"
            uint8
            doc " 8-bit data for TStep 0 Page 4 Reg 4"
            present_if( ( "Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        PARAM "Offset8[0][4][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 4 Reg 4"
            present_if( ("Num TSteps" > 0) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        # TStep 1
        # Page 0
        PARAM "Data8[1][0][0]"
            uint8
            doc " 8-bit data for TStep 1 Page 0 Reg 0"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Offset8[1][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 0"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Data8[1][0][1]"
            uint8
            doc " 8-bit data for TStep 1 Page 0 Reg 1"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Offset8[1][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 1"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Data8[1][0][2]"
            uint8
            doc " 8-bit data for TStep 1 Page 0 Reg 2"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Offset8[1][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 2"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Data8[1][0][3]"
            uint8
            doc " 8-bit data for TStep 1 Page 0 Reg 3"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Offset8[1][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 3"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Data8[1][0][4]"
            uint8
            doc " 8-bit data for TStep 1 Page 0 Reg 4"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        PARAM "Offset8[1][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 4"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        # Page 1
        PARAM "Data8[1][1][0]"
            uint8
            doc " 8-bit data for TStep 1 Page 1 Reg 0"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Offset8[1][1][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 1 Reg 0"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Data8[1][1][1]"
            uint8
            doc " 8-bit data for TStep 1 Page 1 Reg 1"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Offset8[1][1][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 1 Reg 1"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Data8[1][1][2]"
            uint8
            doc " 8-bit data for TStep 1 Page 1 Reg 2"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Offset8[1][1][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 1 Reg 2"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Data8[1][1][3]"
            uint8
            doc " 8-bit data for TStep 1 Page 1 Reg 3"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Offset8[1][1][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 1 Reg 3"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Data8[1][1][4]"
            uint8
            doc " 8-bit data for TStep 1 Page 1 Reg 4"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        PARAM "Offset8[1][1][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 1 Reg 4"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        # Page 2
        PARAM "Data8[1][2][0]"
            uint8
            doc " 8-bit data for TStep 1 Page 2 Reg 0"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Offset8[1][2][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 2 Reg 0"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Data8[1][2][1]"
            uint8
            doc " 8-bit data for TStep 1 Page 2 Reg 1"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Offset8[1][2][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 2 Reg 1"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Data8[1][2][2]"
            uint8
            doc " 8-bit data for TStep 1 Page 2 Reg 2"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Offset8[1][2][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 2 Reg 2"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Data8[1][2][3]"
            uint8
            doc " 8-bit data for TStep 1 Page 2 Reg 3"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Offset8[1][2][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 2 Reg 3"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Data8[1][2][4]"
            uint8
            doc " 8-bit data for TStep 1 Page 2 Reg 4"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        PARAM "Offset8[1][2][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 2 Reg 4"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        # Page 3
        PARAM "Data8[1][3][0]"
            uint8
            doc " 8-bit data for TStep 1 Page 3 Reg 0"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Offset8[1][3][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 3 Reg 0"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Data8[1][3][1]"
            uint8
            doc " 8-bit data for TStep 1 Page 3 Reg 1"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Offset8[1][3][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 3 Reg 1"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Data8[1][3][2]"
            uint8
            doc " 8-bit data for TStep 1 Page 3 Reg 2"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Offset8[1][3][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 3 Reg 2"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Data8[1][3][3]"
            uint8
            doc " 8-bit data for TStep 1 Page 3 Reg 3"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Offset8[1][3][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 3 Reg 3"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Data8[1][3][4]"
            uint8
            doc " 8-bit data for TStep 1 Page 3 Reg 4"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        PARAM "Offset8[1][3][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 3 Reg 4"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        # Page 4
        PARAM "Data8[1][4][0]"
            uint8
            doc " 8-bit data for TStep 1 Page 4 Reg 0"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Offset8[1][4][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 4 Reg 0"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Data8[1][4][1]"
            uint8
            doc " 8-bit data for TStep 1 Page 4 Reg 1"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Offset8[1][4][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 4 Reg 1"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Data8[1][4][2]"
            uint8
            doc " 8-bit data for TStep 1 Page 4 Reg 2"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Offset8[1][4][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 4 Reg 2"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Data8[1][4][3]"
            uint8
            doc " 8-bit data for TStep 1 Page 4 Reg 3"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Offset8[1][4][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 4 Reg 3"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Data8[1][4][4]"
            uint8
            doc " 8-bit data for TStep 1 Page 4 Reg 4"
            present_if( ( "Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        PARAM "Offset8[1][4][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 4 Reg 4"
            present_if( ("Num TSteps" > 1) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        # TStep 2
        # Page 0
        PARAM "Data8[2][0][0]"
            uint8
            doc " 8-bit data for TStep 2 Page 0 Reg 0"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Offset8[2][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 0"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Data8[2][0][1]"
            uint8
            doc " 8-bit data for TStep 2 Page 0 Reg 1"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Offset8[2][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 1"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Data8[2][0][2]"
            uint8
            doc " 8-bit data for TStep 2 Page 0 Reg 2"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Offset8[2][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 2"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Data8[2][0][3]"
            uint8
            doc " 8-bit data for TStep 2 Page 0 Reg 3"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Offset8[2][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 3"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Data8[2][0][4]"
            uint8
            doc " 8-bit data for TStep 2 Page 0 Reg 4"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        PARAM "Offset8[2][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 4"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        # Page 1
        PARAM "Data8[2][1][0]"
            uint8
            doc " 8-bit data for TStep 2 Page 1 Reg 0"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Offset8[2][1][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 1 Reg 0"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Data8[2][1][1]"
            uint8
            doc " 8-bit data for TStep 2 Page 1 Reg 1"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Offset8[2][1][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 1 Reg 1"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Data8[2][1][2]"
            uint8
            doc " 8-bit data for TStep 2 Page 1 Reg 2"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Offset8[2][1][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 1 Reg 2"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Data8[2][1][3]"
            uint8
            doc " 8-bit data for TStep 2 Page 1 Reg 3"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Offset8[2][1][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 1 Reg 3"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Data8[2][1][4]"
            uint8
            doc " 8-bit data for TStep 2 Page 1 Reg 4"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        PARAM "Offset8[2][1][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 1 Reg 4"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        # Page 2
        PARAM "Data8[2][2][0]"
            uint8
            doc " 8-bit data for TStep 2 Page 2 Reg 0"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Offset8[2][2][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 2 Reg 0"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Data8[2][2][1]"
            uint8
            doc " 8-bit data for TStep 2 Page 2 Reg 1"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Offset8[2][2][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 2 Reg 1"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Data8[2][2][2]"
            uint8
            doc " 8-bit data for TStep 2 Page 2 Reg 2"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Offset8[2][2][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 2 Reg 2"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Data8[2][2][3]"
            uint8
            doc " 8-bit data for TStep 2 Page 2 Reg 3"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Offset8[2][2][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 2 Reg 3"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Data8[2][2][4]"
            uint8
            doc " 8-bit data for TStep 2 Page 2 Reg 4"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        PARAM "Offset8[2][2][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 2 Reg 4"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        # Page 3
        PARAM "Data8[2][3][0]"
            uint8
            doc " 8-bit data for TStep 2 Page 3 Reg 0"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Offset8[2][3][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 3 Reg 0"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Data8[2][3][1]"
            uint8
            doc " 8-bit data for TStep 2 Page 3 Reg 1"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Offset8[2][3][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 3 Reg 1"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Data8[2][3][2]"
            uint8
            doc " 8-bit data for TStep 2 Page 3 Reg 2"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Offset8[2][3][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 3 Reg 2"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Data8[2][3][3]"
            uint8
            doc " 8-bit data for TStep 2 Page 3 Reg 3"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Offset8[2][3][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 3 Reg 3"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Data8[2][3][4]"
            uint8
            doc " 8-bit data for TStep 2 Page 3 Reg 4"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        PARAM "Offset8[2][3][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 3 Reg 4"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        # Page 4
        PARAM "Data8[2][4][0]"
            uint8
            doc " 8-bit data for TStep 2 Page 4 Reg 0"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Offset8[2][4][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 4 Reg 0"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Data8[2][4][1]"
            uint8
            doc " 8-bit data for TStep 2 Page 4 Reg 1"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Offset8[2][4][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 4 Reg 1"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Data8[2][4][2]"
            uint8
            doc " 8-bit data for TStep 2 Page 4 Reg 2"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Offset8[2][4][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 4 Reg 2"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Data8[2][4][3]"
            uint8
            doc " 8-bit data for TStep 2 Page 4 Reg 3"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Offset8[2][4][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 4 Reg 3"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Data8[2][4][4]"
            uint8
            doc " 8-bit data for TStep 2 Page 4 Reg 4"
            present_if( ( "Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        PARAM "Offset8[2][4][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 4 Reg 4"
            present_if( ("Num TSteps" > 2) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        # TStep 3
        # Page 0
        PARAM "Data8[3][0][0]"
            uint8
            doc " 8-bit data for TStep 3 Page 0 Reg 0"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Offset8[3][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 0"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Data8[3][0][1]"
            uint8
            doc " 8-bit data for TStep 3 Page 0 Reg 1"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Offset8[3][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 1"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Data8[3][0][2]"
            uint8
            doc " 8-bit data for TStep 3 Page 0 Reg 2"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Offset8[3][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 2"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Data8[3][0][3]"
            uint8
            doc " 8-bit data for TStep 3 Page 0 Reg 3"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Offset8[3][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 3"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Data8[3][0][4]"
            uint8
            doc " 8-bit data for TStep 3 Page 0 Reg 4"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        PARAM "Offset8[3][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 4"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        # Page 1
        PARAM "Data8[3][1][0]"
            uint8
            doc " 8-bit data for TStep 3 Page 1 Reg 0"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Offset8[3][1][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 1 Reg 0"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Data8[3][1][1]"
            uint8
            doc " 8-bit data for TStep 3 Page 1 Reg 1"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Offset8[3][1][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 1 Reg 1"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Data8[3][1][2]"
            uint8
            doc " 8-bit data for TStep 3 Page 1 Reg 2"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Offset8[3][1][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 1 Reg 2"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Data8[3][1][3]"
            uint8
            doc " 8-bit data for TStep 3 Page 1 Reg 3"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Offset8[3][1][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 1 Reg 3"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Data8[3][1][4]"
            uint8
            doc " 8-bit data for TStep 3 Page 1 Reg 4"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        PARAM "Offset8[3][1][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 1 Reg 4"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        # Page 2
        PARAM "Data8[3][2][0]"
            uint8
            doc " 8-bit data for TStep 3 Page 2 Reg 0"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Offset8[3][2][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 2 Reg 0"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Data8[3][2][1]"
            uint8
            doc " 8-bit data for TStep 3 Page 2 Reg 1"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Offset8[3][2][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 2 Reg 1"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Data8[3][2][2]"
            uint8
            doc " 8-bit data for TStep 3 Page 2 Reg 2"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Offset8[3][2][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 2 Reg 2"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Data8[3][2][3]"
            uint8
            doc " 8-bit data for TStep 3 Page 2 Reg 3"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Offset8[3][2][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 2 Reg 3"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Data8[3][2][4]"
            uint8
            doc " 8-bit data for TStep 3 Page 2 Reg 4"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        PARAM "Offset8[3][2][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 2 Reg 4"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        # Page 3
        PARAM "Data8[3][3][0]"
            uint8
            doc " 8-bit data for TStep 3 Page 3 Reg 0"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Offset8[3][3][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 3 Reg 0"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Data8[3][3][1]"
            uint8
            doc " 8-bit data for TStep 3 Page 3 Reg 1"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Offset8[3][3][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 3 Reg 1"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Data8[3][3][2]"
            uint8
            doc " 8-bit data for TStep 3 Page 3 Reg 2"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Offset8[3][3][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 3 Reg 2"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Data8[3][3][3]"
            uint8
            doc " 8-bit data for TStep 3 Page 3 Reg 3"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Offset8[3][3][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 3 Reg 3"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Data8[3][3][4]"
            uint8
            doc " 8-bit data for TStep 3 Page 3 Reg 4"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        PARAM "Offset8[3][3][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 3 Reg 4"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        # Page 4
        PARAM "Data8[3][4][0]"
            uint8
            doc " 8-bit data for TStep 3 Page 4 Reg 0"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Offset8[3][4][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 4 Reg 0"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Data8[3][4][1]"
            uint8
            doc " 8-bit data for TStep 3 Page 4 Reg 1"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Offset8[3][4][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 4 Reg 1"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Data8[3][4][2]"
            uint8
            doc " 8-bit data for TStep 3 Page 4 Reg 2"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Offset8[3][4][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 4 Reg 2"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Data8[3][4][3]"
            uint8
            doc " 8-bit data for TStep 3 Page 4 Reg 3"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Offset8[3][4][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 4 Reg 3"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Data8[3][4][4]"
            uint8
            doc " 8-bit data for TStep 3 Page 4 Reg 4"
            present_if( ( "Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        PARAM "Offset8[3][4][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 4 Reg 4"
            present_if( ("Num TSteps" > 3) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        # TStep 4
        # Page 0
        PARAM "Data8[4][0][0]"
            uint8
            doc " 8-bit data for TStep 4 Page 0 Reg 0"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Offset8[4][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 0"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Data8[4][0][1]"
            uint8
            doc " 8-bit data for TStep 4 Page 0 Reg 1"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Offset8[4][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 1"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Data8[4][0][2]"
            uint8
            doc " 8-bit data for TStep 4 Page 0 Reg 2"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Offset8[4][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 2"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Data8[4][0][3]"
            uint8
            doc " 8-bit data for TStep 4 Page 0 Reg 3"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Offset8[4][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 3"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Data8[4][0][4]"
            uint8
            doc " 8-bit data for TStep 4 Page 0 Reg 4"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        PARAM "Offset8[4][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 4"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        # Page 1
        PARAM "Data8[4][1][0]"
            uint8
            doc " 8-bit data for TStep 4 Page 1 Reg 0"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Offset8[4][1][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 1 Reg 0"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Data8[4][1][1]"
            uint8
            doc " 8-bit data for TStep 4 Page 1 Reg 1"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Offset8[4][1][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 1 Reg 1"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Data8[4][1][2]"
            uint8
            doc " 8-bit data for TStep 4 Page 1 Reg 2"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Offset8[4][1][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 1 Reg 2"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Data8[4][1][3]"
            uint8
            doc " 8-bit data for TStep 4 Page 1 Reg 3"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Offset8[4][1][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 1 Reg 3"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Data8[4][1][4]"
            uint8
            doc " 8-bit data for TStep 4 Page 1 Reg 4"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        PARAM "Offset8[4][1][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 1 Reg 4"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        # Page 2
        PARAM "Data8[4][2][0]"
            uint8
            doc " 8-bit data for TStep 4 Page 2 Reg 0"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Offset8[4][2][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 2 Reg 0"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Data8[4][2][1]"
            uint8
            doc " 8-bit data for TStep 4 Page 2 Reg 1"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Offset8[4][2][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 2 Reg 1"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Data8[4][2][2]"
            uint8
            doc " 8-bit data for TStep 4 Page 2 Reg 2"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Offset8[4][2][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 2 Reg 2"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Data8[4][2][3]"
            uint8
            doc " 8-bit data for TStep 4 Page 2 Reg 3"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Offset8[4][2][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 2 Reg 3"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Data8[4][2][4]"
            uint8
            doc " 8-bit data for TStep 4 Page 2 Reg 4"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        PARAM "Offset8[4][2][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 2 Reg 4"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        # Page 3
        PARAM "Data8[4][3][0]"
            uint8
            doc " 8-bit data for TStep 4 Page 3 Reg 0"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Offset8[4][3][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 3 Reg 0"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Data8[4][3][1]"
            uint8
            doc " 8-bit data for TStep 4 Page 3 Reg 1"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Offset8[4][3][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 3 Reg 1"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Data8[4][3][2]"
            uint8
            doc " 8-bit data for TStep 4 Page 3 Reg 2"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Offset8[4][3][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 3 Reg 2"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Data8[4][3][3]"
            uint8
            doc " 8-bit data for TStep 4 Page 3 Reg 3"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Offset8[4][3][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 3 Reg 3"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Data8[4][3][4]"
            uint8
            doc " 8-bit data for TStep 4 Page 3 Reg 4"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        PARAM "Offset8[4][3][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 3 Reg 4"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        # Page 4
        PARAM "Data8[4][4][0]"
            uint8
            doc " 8-bit data for TStep 4 Page 4 Reg 0"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Offset8[4][4][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 4 Reg 0"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Data8[4][4][1]"
            uint8
            doc " 8-bit data for TStep 4 Page 4 Reg 1"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Offset8[4][4][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 4 Reg 1"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Data8[4][4][2]"
            uint8
            doc " 8-bit data for TStep 4 Page 4 Reg 2"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Offset8[4][4][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 4 Reg 2"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Data8[4][4][3]"
            uint8
            doc " 8-bit data for TStep 4 Page 4 Reg 3"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Offset8[4][4][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 4 Reg 3"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Data8[4][4][4]"
            uint8
            doc " 8-bit data for TStep 4 Page 4 Reg 4"
            present_if( ( "Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        PARAM "Offset8[4][4][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 4 Reg 4"
            present_if( ("Num TSteps" > 4) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        # TStep 5
        # Page 0
        PARAM "Data8[5][0][0]"
            uint8
            doc " 8-bit data for TStep 5 Page 0 Reg 0"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Offset8[5][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 0"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 0) );
        PARAM "Data8[5][0][1]"
            uint8
            doc " 8-bit data for TStep 5 Page 0 Reg 1"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Offset8[5][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 1"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 1) );
        PARAM "Data8[5][0][2]"
            uint8
            doc " 8-bit data for TStep 5 Page 0 Reg 2"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Offset8[5][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 2"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 2) );
        PARAM "Data8[5][0][3]"
            uint8
            doc " 8-bit data for TStep 5 Page 0 Reg 3"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Offset8[5][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 3"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 3) );
        PARAM "Data8[5][0][4]"
            uint8
            doc " 8-bit data for TStep 5 Page 0 Reg 4"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        PARAM "Offset8[5][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 4"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 0) and ("NumRegs8[0]" > 4) );
        # Page 1
        PARAM "Data8[5][1][0]"
            uint8
            doc " 8-bit data for TStep 5 Page 1 Reg 0"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Offset8[5][1][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 1 Reg 0"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 0) );
        PARAM "Data8[5][1][1]"
            uint8
            doc " 8-bit data for TStep 5 Page 1 Reg 1"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Offset8[5][1][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 1 Reg 1"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 1) );
        PARAM "Data8[5][1][2]"
            uint8
            doc " 8-bit data for TStep 5 Page 1 Reg 2"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Offset8[5][1][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 1 Reg 2"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 2) );
        PARAM "Data8[5][1][3]"
            uint8
            doc " 8-bit data for TStep 5 Page 1 Reg 3"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Offset8[5][1][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 1 Reg 3"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 3) );
        PARAM "Data8[5][1][4]"
            uint8
            doc " 8-bit data for TStep 5 Page 1 Reg 4"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        PARAM "Offset8[5][1][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 1 Reg 4"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 1) and ("NumRegs8[1]" > 4) );
        # Page 2
        PARAM "Data8[5][2][0]"
            uint8
            doc " 8-bit data for TStep 5 Page 2 Reg 0"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Offset8[5][2][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 2 Reg 0"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 0) );
        PARAM "Data8[5][2][1]"
            uint8
            doc " 8-bit data for TStep 5 Page 2 Reg 1"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Offset8[5][2][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 2 Reg 1"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 1) );
        PARAM "Data8[5][2][2]"
            uint8
            doc " 8-bit data for TStep 5 Page 2 Reg 2"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Offset8[5][2][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 2 Reg 2"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 2) );
        PARAM "Data8[5][2][3]"
            uint8
            doc " 8-bit data for TStep 5 Page 2 Reg 3"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Offset8[5][2][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 2 Reg 3"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 3) );
        PARAM "Data8[5][2][4]"
            uint8
            doc " 8-bit data for TStep 5 Page 2 Reg 4"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        PARAM "Offset8[5][2][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 2 Reg 4"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 2) and ("NumRegs8[2]" > 4) );
        # Page 3
        PARAM "Data8[5][3][0]"
            uint8
            doc " 8-bit data for TStep 5 Page 3 Reg 0"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Offset8[5][3][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 3 Reg 0"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 0) );
        PARAM "Data8[5][3][1]"
            uint8
            doc " 8-bit data for TStep 5 Page 3 Reg 1"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Offset8[5][3][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 3 Reg 1"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 1) );
        PARAM "Data8[5][3][2]"
            uint8
            doc " 8-bit data for TStep 5 Page 3 Reg 2"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Offset8[5][3][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 3 Reg 2"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 2) );
        PARAM "Data8[5][3][3]"
            uint8
            doc " 8-bit data for TStep 5 Page 3 Reg 3"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Offset8[5][3][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 3 Reg 3"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 3) );
        PARAM "Data8[5][3][4]"
            uint8
            doc " 8-bit data for TStep 5 Page 3 Reg 4"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        PARAM "Offset8[5][3][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 3 Reg 4"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 3) and ("NumRegs8[3]" > 4) );
        # Page 4
        PARAM "Data8[5][4][0]"
            uint8
            doc " 8-bit data for TStep 5 Page 4 Reg 0"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Offset8[5][4][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 4 Reg 0"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 0) );
        PARAM "Data8[5][4][1]"
            uint8
            doc " 8-bit data for TStep 5 Page 4 Reg 1"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Offset8[5][4][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 4 Reg 1"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 1) );
        PARAM "Data8[5][4][2]"
            uint8
            doc " 8-bit data for TStep 5 Page 4 Reg 2"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Offset8[5][4][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 4 Reg 2"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 2) );
        PARAM "Data8[5][4][3]"
            uint8
            doc " 8-bit data for TStep 5 Page 4 Reg 3"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Offset8[5][4][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 4 Reg 3"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 3) );
        PARAM "Data8[5][4][4]"
            uint8
            doc " 8-bit data for TStep 5 Page 4 Reg 4"
            present_if( ( "Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        PARAM "Offset8[5][4][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 4 Reg 4"
            present_if( ("Num TSteps" > 5) and ("Num Pages8" > 4) and ("NumRegs8[4]" > 4) );
        #######################################################################
        #
        # 16-BIT PAGE DATA
        #######################################################################
        # TStep 0
        # Page 0
        PARAM "Data16[0][0][0]"
            uint16
            doc " 16-bit data for TStep 0 Page 0 Reg 0"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Offset16[0][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 0"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Data16[0][0][1]"
            uint16
            doc " 16-bit data for TStep 0 Page 0 Reg 1"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Offset16[0][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 1"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Data16[0][0][2]"
            uint16
            doc " 16-bit data for TStep 0 Page 0 Reg 2"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Offset16[0][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 2"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Data16[0][0][3]"
            uint16
            doc " 16-bit data for TStep 0 Page 0 Reg 3"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Offset16[0][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 3"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Data16[0][0][4]"
            uint16
            doc " 16-bit data for TStep 0 Page 0 Reg 4"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        PARAM "Offset16[0][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 0 Page 0 Reg 4"
            present_if( ("Num TSteps" > 0) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        # TStep 1
        # Page 0
        PARAM "Data16[1][0][0]"
            uint16
            doc " 16-bit data for TStep 1 Page 0 Reg 0"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Offset16[1][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 0"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Data16[1][0][1]"
            uint16
            doc " 16-bit data for TStep 1 Page 0 Reg 1"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Offset16[1][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 1"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Data16[1][0][2]"
            uint16
            doc " 16-bit data for TStep 1 Page 0 Reg 2"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Offset16[1][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 2"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Data16[1][0][3]"
            uint16
            doc " 16-bit data for TStep 1 Page 0 Reg 3"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Offset16[1][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 3"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Data16[1][0][4]"
            uint16
            doc " 16-bit data for TStep 1 Page 0 Reg 4"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        PARAM "Offset16[1][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 1 Page 0 Reg 4"
            present_if( ("Num TSteps" > 1) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        # TStep 2
        # Page 0
        PARAM "Data16[2][0][0]"
            uint16
            doc " 16-bit data for TStep 2 Page 0 Reg 0"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Offset16[2][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 0"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Data16[2][0][1]"
            uint16
            doc " 16-bit data for TStep 2 Page 0 Reg 1"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Offset16[2][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 1"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Data16[2][0][2]"
            uint16
            doc " 16-bit data for TStep 2 Page 0 Reg 2"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Offset16[2][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 2"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Data16[2][0][3]"
            uint16
            doc " 16-bit data for TStep 2 Page 0 Reg 3"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Offset16[2][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 3"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Data16[2][0][4]"
            uint16
            doc " 16-bit data for TStep 2 Page 0 Reg 4"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        PARAM "Offset16[2][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 2 Page 0 Reg 4"
            present_if( ("Num TSteps" > 2) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        # TStep 3
        # Page 0
        PARAM "Data16[3][0][0]"
            uint16
            doc " 16-bit data for TStep 3 Page 0 Reg 0"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Offset16[3][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 0"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Data16[3][0][1]"
            uint16
            doc " 16-bit data for TStep 3 Page 0 Reg 1"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Offset16[3][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 1"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Data16[3][0][2]"
            uint16
            doc " 16-bit data for TStep 3 Page 0 Reg 2"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Offset16[3][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 2"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Data16[3][0][3]"
            uint16
            doc " 16-bit data for TStep 3 Page 0 Reg 3"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Offset16[3][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 3"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Data16[3][0][4]"
            uint16
            doc " 16-bit data for TStep 3 Page 0 Reg 4"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        PARAM "Offset16[3][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 3 Page 0 Reg 4"
            present_if( ("Num TSteps" > 3) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        # TStep 4
        # Page 0
        PARAM "Data16[4][0][0]"
            uint16
            doc " 16-bit data for TStep 4 Page 0 Reg 0"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Offset16[4][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 0"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Data16[4][0][1]"
            uint16
            doc " 16-bit data for TStep 4 Page 0 Reg 1"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Offset16[4][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 1"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Data16[4][0][2]"
            uint16
            doc " 16-bit data for TStep 4 Page 0 Reg 2"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Offset16[4][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 2"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Data16[4][0][3]"
            uint16
            doc " 16-bit data for TStep 4 Page 0 Reg 3"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Offset16[4][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 3"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Data16[4][0][4]"
            uint16
            doc " 16-bit data for TStep 4 Page 0 Reg 4"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        PARAM "Offset16[4][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 4 Page 0 Reg 4"
            present_if( ("Num TSteps" > 4) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        # TStep 5
        # Page 0
        PARAM "Data16[5][0][0]"
            uint16
            doc " 16-bit data for TStep 5 Page 0 Reg 0"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Offset16[5][0][0]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 0"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 0) );
        PARAM "Data16[5][0][1]"
            uint16
            doc " 16-bit data for TStep 5 Page 0 Reg 1"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Offset16[5][0][1]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 1"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 1) );
        PARAM "Data16[5][0][2]"
            uint16
            doc " 16-bit data for TStep 5 Page 0 Reg 2"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Offset16[5][0][2]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 2"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 2) );
        PARAM "Data16[5][0][3]"
            uint16
            doc " 16-bit data for TStep 5 Page 0 Reg 3"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Offset16[5][0][3]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 3"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 3) );
        PARAM "Data16[5][0][4]"
            uint16
            doc " 16-bit data for TStep 5 Page 0 Reg 4"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );
        PARAM "Offset16[5][0][4]"
            uint8
            doc " 8-bit sign-magnitude offset for TStep 5 Page 0 Reg 4"
            present_if( ("Num TSteps" > 5) and ("Num Pages16" > 0) and ("NumRegs16[0]" > 4) );

    }


    COMMAND "Sleep Clock Accuracy" 0x84
    {
        doc "LPO clock accuracy in PPM"
        PARAM "PPM"
            uint8
            doc "LPO clock accuracy in PPM, define the accuracy of the LPO clock. It used to calculate"
                "the expected clock drift while using LPO clock.  The default value is 250 PPM.";
    }

    COMMAND "SubR0 Scanning Enable" 0x85
    {
        doc "Enables the SubR0 scanning mode in the firmware"
        PARAM "Enable"
            bool8
            doc "Boolean parameter to enable or disable the subR0 scanning in the core"
                "firmware.  This is set to 0 in the firmware as a default";
    }

    COMMAND "TSSI Configuration" 0x86
    {
        doc "This item contains the configurable values for the"
            "Transmit Strength Signal Indication power adjustment"
            "for process variation"
        PARAM "tssi_beta"
            uint32
            doc "This is used to manually adjust the compensation"
                "calculation."
                "This value should only be changed by qualified"
                "personnel. Modifying this value can result in a device"
                "that is non-operational. Defaults to 1.0 in 16.8 format";
        PARAM "tssi_base_threshold_high"
            uint16
            doc "This is the high threshold value for the target voltage."
                "This value should only be changed by qualified"
                "personnel. Modifying this value can result in a device"
                "that is non-operational. Defaults to 3500";
        PARAM "tssi_base_threshold_low"
            uint16
            doc "This is the low threshold value for the target voltage."
                "This value should only be changed by qualified"
                "personnel. Modifying this value can result in a device"
                "that is non-operational. Defaults to 800";
        PARAM "tssi_max"
            uint16
            doc "This is the maximum value beyond which the ADC"
                "is saturated and the calculation is forced to a constant."
                "This value should only be changed by qualified"
                "personnel. Modifying this value can result in a device"
                "that is non-operational. Defaults to 8900";
        PARAM "tssi_delay_5usec"
            uint16
            doc "This is the loop index value for a 5 usec (nominal)"
                "delay used in the TSSI calculation. Defaults to 30";
        PARAM "tssi_delay_30usec"
            uint16
            doc "This is the loop index value for a 30 usec (nominal)"
                "delay used in the TSSI calculation. Defaults to 180";
        PARAM "RESERVED"
            uint16{15:13}
            doc "Reserved for future use"
            binary_message_only
            encode_value = 0;
        PARAM "mx_pa_n"
            uint16{12}
            doc "The source for the TSSI signal (PA=1, mixer = 0)";
        PARAM "rxPskCtrl4_14_13"
            uint16{11:10}
            doc "The value used to set bits 14 and 13 of the"
                "rxPskCtrl14 register for support of the TSSI"
                "h/w ECO (3 or 0 only)";
        PARAM "testctrl_15"
            uint16{9}
            doc "This is the value used to set bit 15 of the"
                "testctrl register for support of the TSSI"
                "h/w ECO (0|1)";
        PARAM "enable"
            uint16{8}
            doc "This bit enables the TSSI calculation for power on reset";
        PARAM "iterations"
            uint16{7:0}
            doc "This is the count for the iterative loop for the"
                "TSSI calculation. Defaults to 10";
    }

    COMMAND "AFH Channel Classification Configuration" 0x87
    {
        doc "This item is to configure the RSSI Scan Activities. It defines the time interval for doing the"
            "passive RSSI scan and after how many passive RSSI scans an active RSSI scan will"
            "occur. It defines the bin size, which is how many neighbors to a bad channel will be"
            "blocked along with the bad one. The values of the bad and good factor define the"
            "packet error rate used to block channels."

        PARAM "Good packet receive threshold"
            uint16
            doc "The threshold number of good packets received above which, the firmware can rely"
                "on the passive RSSI data"
            default = 500;

        PARAM "Bin size"
            uint8
            doc "Number of Bluetooth channels to be blocked adjacent to a bad channel, including"
                "the bad channel itself"
            default = 3;


        PARAM "Passive RSSI scan"
            uint8
            doc "The period of time to perform the passive RSSI Scan"
            default = 16
            note "N * 125 milliseconds";

        PARAM "Active RSSI scan"
            uint8
            doc "The number of passive RSSI scans after which to perform the active RSSI scan"
            default = 4;

        PARAM "Good packet factor"
            uint8
            doc "Factor used to multiple the number of good packets received"
            default = 1;

        PARAM "Bad packet factor"
            uint8
            doc "Factor used to multiple the number of bad packets received"
            default = 8;

        PARAM "Claim back factor"
            uint8
            doc "Unused byte"
            default = 2;
        PARAM "Max num blocked channels"
            uint8
            doc "The threshold number of blocked channels above which the firmware will perform"
                "active RSSI scanning in order to claim some channels back"
            max = 79
            default = 40;

        PARAM "Passive RSSI scan A1 weight"
            uint8
            doc "The weight used to Old RSSI Value."
            default = 4;

        PARAM "Passive RSSI scan A2 weight"
            uint8
            doc "The weight used to Current RSSI Value.  The sum of the passive"
                            "weights must be a power of two."
            default = 28;

        PARAM "Active RSSI scan A1 weight"
            uint8
            doc "The weight used to Old RSSI Value."
            default = 2;

        PARAM "Active RSSI scan A2 weight"
            uint8
            doc "The weight used to Current RSSI Value.  The sum of the active"
                            "weights must equal the sum of the passive weights."
            min = ( ("Passive RSSI scan A1 weight" + "Passive RSSI scan A2 weight")
                            - "Active RSSI scan A1 weight" )
            max = ( ("Passive RSSI scan A1 weight" + "Passive RSSI scan A2 weight")
                            - "Active RSSI scan A1 weight" )
            default = 30;

       PARAM "RSSI averaging divisor"
            uint8
            doc "The divisor is used to average between OldRSSI Value and Snapshot RSSI Value."
            default = 5;

        PARAM "Good channel threshold"
            uint8
            doc "This is the absolute value of the threshold that the AFH channel classification"
                "considers good. Units are dBm, default is 72 dBm.";
        PARAM "Marginal channel threshold"
            uint8
            doc "This is the absolute value of the threshold that the AFH channel classification"
                "considers marginal. Units are dBm, default is 64 dBm.";
    }

    COMMAND "HCI LM LC Specific Requests" 0x90
    {
        doc "This item is to enable/disable some customer specific features"
            "that fall in HCI, LM or LC category."
        PARAM "CS config flags"
            uint32
            doc "General customer specific config bitmap."
            bitmap
            {
                {0x00000001, "Disable sending authentication failure event to host"},
                {0x00000002, "Send three sco complete events when enter local loopback mode"},
                {0x00000004, "Enable extra paramters for hci read clock command"}
            };
    }

    COMMAND "MTBS Configuration" 0x91
    {
        doc "Selects a particular input pin for Mobile Tagged Bluetooth Scan (MTBS)"
        PARAM "Enable MTBS"
            uint8
            doc "MTBS Enable / Disable"
            enum
            {
                 {0x0, "MTBS Disable"},
                 {0x1, "MTBS Enable"}
            };
	PARAM "MTBS Input Pin"
            uint8
            doc "MTBS input pin selection"
            enum
            {
                 {0x0, "MTBS_PIN_GPIO_0"},
                 {0x1, "MTBS_PIN_GPIO_1"},
                 {0x2, "MTBS_PIN_GPIO_2"},
                 {0x3, "MTBS_PIN_GPIO_6"}
            };
	PARAM "MTBS input pin active state"
            uint8
            doc "MTBS input pin active state"
            enum
	    {
                 {0x0, "MTBS_PIN_ACTIVE_LOW"},
		 {0x1, "MTBS_PIN_ACTIVE_HIGH"}
            };
	PARAM "Scheduled scans"
	    uint8
            doc "If scheduled scans should be performed when MTBS enabled"
            enum
            {
                 {0x0, "DONT_PERFORM_SCHEDULED_SCANS"},
                 {0x1, "PERFORM_SCHEDULED_SCANS"}
            };
    }

    COMMAND "BFC Configuration" 0x92
    {
        doc "Broadcom Fast Connect (BFC) configuration"
        PARAM "Reserved"
            uint16{15:10}
            doc "Reserved BFC configuration";
        PARAM "Storage Type"
            uint16{9:7}
            doc "storage type"
            enum
            {
                {0x00, "none"},
                {0x01, "VSE"},
                {0x02, "NVRAM"}
            };
        PARAM "Fast Connect Method"
            uint16{6:4}
            doc "fast connect method"
            enum
            {
                {0x00, "none"},
                {0x01, "LE"},
                {0x02, "TBFC"}
            };
        PARAM "Enc After Reconnect"
            uint16{3:3}
            doc "Restart Encryption After Reconnect"
            enum
            {
                {0x00, "No"},
                {0x01, "Yes"}
            };
        PARAM "Auth After Reconnect"
            uint16{2:2}
            doc "Restart Authentication After Reconnect"
            enum
            {
                {0x00, "No"},
                {0x01, "Yes"}
            };
        PARAM "Rapid Reconnect Support"
            uint16{1:1}
            doc "Rapid Reconnect Support"
            enum
            {
                {0x00, "No"},
                {0x01, "Yes"}
            };
        PARAM "BFC Enable"
            uint16{0:0}
            doc "BFC supported"
	        enum
	        {
	            {0x00, "No"},
		        {0x01, "Yes"}
	        };
        PARAM "Reconnect Timeout"
            uint16
            doc "Reconnect Timeout";
        PARAM "Scan Window"
            uint8
            doc "Scan Window";
        PARAM "Scan Interval"
            uint8
            doc "Scan Interval";
    }

    COMMAND "Init BB Register Bit Fields" 0xC0
    {
        doc "This item is used to overwrite the selected bit fields of the "
            "BB register default values during firmware initialization."
        PARAM "Num entries"
            uint8
            doc "An abstract parameter used only for encoding purposes, not present in the"
                "actual configuration item. When encoding the configuration item, determines"
                "the number of address/mask/value entries to include."
            not_in_binary_message
            decode_value = 0                                    # Can only decode, not encode
            max = 100;
        PARAM "Register address[0]"
            uint32
            doc "Address of the baseband register"
            present_if ("Num entries" > 0);
        PARAM "Bit field mask[0]"
            uint32
            doc "Bit field mask. If a bit is 1 that bit value will be changed to the new value"
                "specified"
            present_if ("Num entries" > 0);
        PARAM "Value[0]"
            uint32
            doc "Data to be written to the baseband register"
            present_if ("Num entries" > 0);
        PARAM "Register address[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Bit field mask[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Value[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Register address[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Bit field mask[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Value[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Register address[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Bit field mask[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Value[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Register address[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Bit field mask[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Value[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Register address[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Bit field mask[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Value[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Register address[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Bit field mask[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Value[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Register address[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Bit field mask[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Value[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Register address[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Bit field mask[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Value[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Register address[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Bit field mask[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Value[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Register address[10]"
            uint32
            present_if ("Num entries" > 10);
        PARAM "Bit field mask[10]"
            uint32
            present_if ("Num entries" > 10);
        PARAM "Value[10]"
            uint32
            present_if ("Num entries" > 10);
        PARAM "Register address[11]"
            uint32
            present_if ("Num entries" > 11);
        PARAM "Bit field mask[11]"
            uint32
            present_if ("Num entries" > 11);
        PARAM "Value[11]"
            uint32
            present_if ("Num entries" > 11);
        PARAM "Register address[12]"
            uint32
            present_if ("Num entries" > 12);
        PARAM "Bit field mask[12]"
            uint32
            present_if ("Num entries" > 12);
        PARAM "Value[12]"
            uint32
            present_if ("Num entries" > 12);
        PARAM "Register address[13]"
            uint32
            present_if ("Num entries" > 13);
        PARAM "Bit field mask[13]"
            uint32
            present_if ("Num entries" > 13);
        PARAM "Value[13]"
            uint32
            present_if ("Num entries" > 13);
        PARAM "Register address[14]"
            uint32
            present_if ("Num entries" > 14);
        PARAM "Bit field mask[14]"
            uint32
            present_if ("Num entries" > 14);
        PARAM "Value[14]"
            uint32
            present_if ("Num entries" > 14);
        PARAM "Register address[15]"
            uint32
            present_if ("Num entries" > 15);
        PARAM "Bit field mask[15]"
            uint32
            present_if ("Num entries" > 15);
        PARAM "Value[15]"
            uint32
            present_if ("Num entries" > 15);
        PARAM "Register address[16]"
            uint32
            present_if ("Num entries" > 16);
        PARAM "Bit field mask[16]"
            uint32
            present_if ("Num entries" > 16);
        PARAM "Value[16]"
            uint32
            present_if ("Num entries" > 16);
        PARAM "Register address[17]"
            uint32
            present_if ("Num entries" > 17);
        PARAM "Bit field mask[17]"
            uint32
            present_if ("Num entries" > 17);
        PARAM "Value[17]"
            uint32
            present_if ("Num entries" > 17);
        PARAM "Register address[18]"
            uint32
            present_if ("Num entries" > 18);
        PARAM "Bit field mask[18]"
            uint32
            present_if ("Num entries" > 18);
        PARAM "Value[18]"
            uint32
            present_if ("Num entries" > 18);
        PARAM "Register address[19]"
            uint32
            present_if ("Num entries" > 19);
        PARAM "Bit field mask[19]"
            uint32
            present_if ("Num entries" > 19);
        PARAM "Value[19]"
            uint32
            present_if ("Num entries" > 19);
        PARAM "Register address[20]"
            uint32
            present_if ("Num entries" > 20);
        PARAM "Bit field mask[20]"
            uint32
            present_if ("Num entries" > 20);
        PARAM "Value[20]"
            uint32
            present_if ("Num entries" > 20);
        PARAM "Register address[21]"
            uint32
            present_if ("Num entries" > 21);
        PARAM "Bit field mask[21]"
            uint32
            present_if ("Num entries" > 21);
        PARAM "Value[21]"
            uint32
            present_if ("Num entries" > 21);
        PARAM "Register address[22]"
            uint32
            present_if ("Num entries" > 22);
        PARAM "Bit field mask[22]"
            uint32
            present_if ("Num entries" > 22);
        PARAM "Value[22]"
            uint32
            present_if ("Num entries" > 22);
        PARAM "Register address[23]"
            uint32
            present_if ("Num entries" > 23);
        PARAM "Bit field mask[23]"
            uint32
            present_if ("Num entries" > 23);
        PARAM "Value[23]"
            uint32
            present_if ("Num entries" > 23);
        PARAM "Register address[24]"
            uint32
            present_if ("Num entries" > 24);
        PARAM "Bit field mask[24]"
            uint32
            present_if ("Num entries" > 24);
        PARAM "Value[24]"
            uint32
            present_if ("Num entries" > 24);
        PARAM "Register address[25]"
            uint32
            present_if ("Num entries" > 25);
        PARAM "Bit field mask[25]"
            uint32
            present_if ("Num entries" > 25);
        PARAM "Value[25]"
            uint32
            present_if ("Num entries" > 25);
        PARAM "Register address[26]"
            uint32
            present_if ("Num entries" > 26);
        PARAM "Bit field mask[26]"
            uint32
            present_if ("Num entries" > 26);
        PARAM "Value[26]"
            uint32
            present_if ("Num entries" > 26);
        PARAM "Register address[27]"
            uint32
            present_if ("Num entries" > 27);
        PARAM "Bit field mask[27]"
            uint32
            present_if ("Num entries" > 27);
        PARAM "Value[27]"
            uint32
            present_if ("Num entries" > 27);
        PARAM "Register address[28]"
            uint32
            present_if ("Num entries" > 28);
        PARAM "Bit field mask[28]"
            uint32
            present_if ("Num entries" > 28);
        PARAM "Value[28]"
            uint32
            present_if ("Num entries" > 28);
        PARAM "Register address[29]"
            uint32
            present_if ("Num entries" > 29);
        PARAM "Bit field mask[29]"
            uint32
            present_if ("Num entries" > 29);
        PARAM "Value[29]"
            uint32
            present_if ("Num entries" > 29);
        PARAM "Register address[30]"
            uint32
            present_if ("Num entries" > 30);
        PARAM "Bit field mask[30]"
            uint32
            present_if ("Num entries" > 30);
        PARAM "Value[30]"
            uint32
            present_if ("Num entries" > 30);
        PARAM "Register address[31]"
            uint32
            present_if ("Num entries" > 31);
        PARAM "Bit field mask[31]"
            uint32
            present_if ("Num entries" > 31);
        PARAM "Value[31]"
            uint32
            present_if ("Num entries" > 31);
        PARAM "Register address[32]"
            uint32
            present_if ("Num entries" > 32);
        PARAM "Bit field mask[32]"
            uint32
            present_if ("Num entries" > 32);
        PARAM "Value[32]"
            uint32
            present_if ("Num entries" > 32);
        PARAM "Register address[33]"
            uint32
            present_if ("Num entries" > 33);
        PARAM "Bit field mask[33]"
            uint32
            present_if ("Num entries" > 33);
        PARAM "Value[33]"
            uint32
            present_if ("Num entries" > 33);
        PARAM "Register address[34]"
            uint32
            present_if ("Num entries" > 34);
        PARAM "Bit field mask[34]"
            uint32
            present_if ("Num entries" > 34);
        PARAM "Value[34]"
            uint32
            present_if ("Num entries" > 34);
        PARAM "Register address[35]"
            uint32
            present_if ("Num entries" > 35);
        PARAM "Bit field mask[35]"
            uint32
            present_if ("Num entries" > 35);
        PARAM "Value[35]"
            uint32
            present_if ("Num entries" > 35);
        PARAM "Register address[36]"
            uint32
            present_if ("Num entries" > 36);
        PARAM "Bit field mask[36]"
            uint32
            present_if ("Num entries" > 36);
        PARAM "Value[36]"
            uint32
            present_if ("Num entries" > 36);
        PARAM "Register address[37]"
            uint32
            present_if ("Num entries" > 37);
        PARAM "Bit field mask[37]"
            uint32
            present_if ("Num entries" > 37);
        PARAM "Value[37]"
            uint32
            present_if ("Num entries" > 37);
        PARAM "Register address[38]"
            uint32
            present_if ("Num entries" > 38);
        PARAM "Bit field mask[38]"
            uint32
            present_if ("Num entries" > 38);
        PARAM "Value[38]"
            uint32
            present_if ("Num entries" > 38);
        PARAM "Register address[39]"
            uint32
            present_if ("Num entries" > 39);
        PARAM "Bit field mask[39]"
            uint32
            present_if ("Num entries" > 39);
        PARAM "Value[39]"
            uint32
            present_if ("Num entries" > 39);
        PARAM "Register address[40]"
            uint32
            present_if ("Num entries" > 40);
        PARAM "Bit field mask[40]"
            uint32
            present_if ("Num entries" > 40);
        PARAM "Value[40]"
            uint32
            present_if ("Num entries" > 40);
        PARAM "Register address[41]"
            uint32
            present_if ("Num entries" > 41);
        PARAM "Bit field mask[41]"
            uint32
            present_if ("Num entries" > 41);
        PARAM "Value[41]"
            uint32
            present_if ("Num entries" > 41);
        PARAM "Register address[42]"
            uint32
            present_if ("Num entries" > 42);
        PARAM "Bit field mask[42]"
            uint32
            present_if ("Num entries" > 42);
        PARAM "Value[42]"
            uint32
            present_if ("Num entries" > 42);
        PARAM "Register address[43]"
            uint32
            present_if ("Num entries" > 43);
        PARAM "Bit field mask[43]"
            uint32
            present_if ("Num entries" > 43);
        PARAM "Value[43]"
            uint32
            present_if ("Num entries" > 43);
        PARAM "Register address[44]"
            uint32
            present_if ("Num entries" > 44);
        PARAM "Bit field mask[44]"
            uint32
            present_if ("Num entries" > 44);
        PARAM "Value[44]"
            uint32
            present_if ("Num entries" > 44);
        PARAM "Register address[45]"
            uint32
            present_if ("Num entries" > 45);
        PARAM "Bit field mask[45]"
            uint32
            present_if ("Num entries" > 45);
        PARAM "Value[45]"
            uint32
            present_if ("Num entries" > 45);
        PARAM "Register address[46]"
            uint32
            present_if ("Num entries" > 46);
        PARAM "Bit field mask[46]"
            uint32
            present_if ("Num entries" > 46);
        PARAM "Value[46]"
            uint32
            present_if ("Num entries" > 46);
        PARAM "Register address[47]"
            uint32
            present_if ("Num entries" > 47);
        PARAM "Bit field mask[47]"
            uint32
            present_if ("Num entries" > 47);
        PARAM "Value[47]"
            uint32
            present_if ("Num entries" > 47);
        PARAM "Register address[48]"
            uint32
            present_if ("Num entries" > 48);
        PARAM "Bit field mask[48]"
            uint32
            present_if ("Num entries" > 48);
        PARAM "Value[48]"
            uint32
            present_if ("Num entries" > 48);
        PARAM "Register address[49]"
            uint32
            present_if ("Num entries" > 49);
        PARAM "Bit field mask[49]"
            uint32
            present_if ("Num entries" > 49);
        PARAM "Value[49]"
            uint32
            present_if ("Num entries" > 49);
        PARAM "Register address[50]"
            uint32
            present_if ("Num entries" > 50);
        PARAM "Bit field mask[50]"
            uint32
            present_if ("Num entries" > 50);
        PARAM "Value[50]"
            uint32
            present_if ("Num entries" > 50);
        PARAM "Register address[51]"
            uint32
            present_if ("Num entries" > 51);
        PARAM "Bit field mask[51]"
            uint32
            present_if ("Num entries" > 51);
        PARAM "Value[51]"
            uint32
            present_if ("Num entries" > 51);
        PARAM "Register address[52]"
            uint32
            present_if ("Num entries" > 52);
        PARAM "Bit field mask[52]"
            uint32
            present_if ("Num entries" > 52);
        PARAM "Value[52]"
            uint32
            present_if ("Num entries" > 52);
        PARAM "Register address[53]"
            uint32
            present_if ("Num entries" > 53);
        PARAM "Bit field mask[53]"
            uint32
            present_if ("Num entries" > 53);
        PARAM "Value[53]"
            uint32
            present_if ("Num entries" > 53);
        PARAM "Register address[54]"
            uint32
            present_if ("Num entries" > 54);
        PARAM "Bit field mask[54]"
            uint32
            present_if ("Num entries" > 54);
        PARAM "Value[54]"
            uint32
            present_if ("Num entries" > 54);
        PARAM "Register address[55]"
            uint32
            present_if ("Num entries" > 55);
        PARAM "Bit field mask[55]"
            uint32
            present_if ("Num entries" > 55);
        PARAM "Value[55]"
            uint32
            present_if ("Num entries" > 55);
        PARAM "Register address[56]"
            uint32
            present_if ("Num entries" > 56);
        PARAM "Bit field mask[56]"
            uint32
            present_if ("Num entries" > 56);
        PARAM "Value[56]"
            uint32
            present_if ("Num entries" > 56);
        PARAM "Register address[57]"
            uint32
            present_if ("Num entries" > 57);
        PARAM "Bit field mask[57]"
            uint32
            present_if ("Num entries" > 57);
        PARAM "Value[57]"
            uint32
            present_if ("Num entries" > 57);
        PARAM "Register address[58]"
            uint32
            present_if ("Num entries" > 58);
        PARAM "Bit field mask[58]"
            uint32
            present_if ("Num entries" > 58);
        PARAM "Value[58]"
            uint32
            present_if ("Num entries" > 58);
        PARAM "Register address[59]"
            uint32
            present_if ("Num entries" > 59);
        PARAM "Bit field mask[59]"
            uint32
            present_if ("Num entries" > 59);
        PARAM "Value[59]"
            uint32
            present_if ("Num entries" > 59);
        PARAM "Register address[60]"
            uint32
            present_if ("Num entries" > 60);
        PARAM "Bit field mask[60]"
            uint32
            present_if ("Num entries" > 60);
        PARAM "Value[60]"
            uint32
            present_if ("Num entries" > 60);
        PARAM "Register address[61]"
            uint32
            present_if ("Num entries" > 61);
        PARAM "Bit field mask[61]"
            uint32
            present_if ("Num entries" > 61);
        PARAM "Value[61]"
            uint32
            present_if ("Num entries" > 61);
        PARAM "Register address[62]"
            uint32
            present_if ("Num entries" > 62);
        PARAM "Bit field mask[62]"
            uint32
            present_if ("Num entries" > 62);
        PARAM "Value[62]"
            uint32
            present_if ("Num entries" > 62);
        PARAM "Register address[63]"
            uint32
            present_if ("Num entries" > 63);
        PARAM "Bit field mask[63]"
            uint32
            present_if ("Num entries" > 63);
        PARAM "Value[63]"
            uint32
            present_if ("Num entries" > 63);
        PARAM "Register address[64]"
            uint32
            present_if ("Num entries" > 64);
        PARAM "Bit field mask[64]"
            uint32
            present_if ("Num entries" > 64);
        PARAM "Value[64]"
            uint32
            present_if ("Num entries" > 64);
        PARAM "Register address[65]"
            uint32
            present_if ("Num entries" > 65);
        PARAM "Bit field mask[65]"
            uint32
            present_if ("Num entries" > 65);
        PARAM "Value[65]"
            uint32
            present_if ("Num entries" > 65);
        PARAM "Register address[66]"
            uint32
            present_if ("Num entries" > 66);
        PARAM "Bit field mask[66]"
            uint32
            present_if ("Num entries" > 66);
        PARAM "Value[66]"
            uint32
            present_if ("Num entries" > 66);
        PARAM "Register address[67]"
            uint32
            present_if ("Num entries" > 67);
        PARAM "Bit field mask[67]"
            uint32
            present_if ("Num entries" > 67);
        PARAM "Value[67]"
            uint32
            present_if ("Num entries" > 67);
        PARAM "Register address[68]"
            uint32
            present_if ("Num entries" > 68);
        PARAM "Bit field mask[68]"
            uint32
            present_if ("Num entries" > 68);
        PARAM "Value[68]"
            uint32
            present_if ("Num entries" > 68);
        PARAM "Register address[69]"
            uint32
            present_if ("Num entries" > 69);
        PARAM "Bit field mask[69]"
            uint32
            present_if ("Num entries" > 69);
        PARAM "Value[69]"
            uint32
            present_if ("Num entries" > 69);
        PARAM "Register address[70]"
            uint32
            present_if ("Num entries" > 70);
        PARAM "Bit field mask[70]"
            uint32
            present_if ("Num entries" > 70);
        PARAM "Value[70]"
            uint32
            present_if ("Num entries" > 70);
        PARAM "Register address[71]"
            uint32
            present_if ("Num entries" > 71);
        PARAM "Bit field mask[71]"
            uint32
            present_if ("Num entries" > 71);
        PARAM "Value[71]"
            uint32
            present_if ("Num entries" > 71);
        PARAM "Register address[72]"
            uint32
            present_if ("Num entries" > 72);
        PARAM "Bit field mask[72]"
            uint32
            present_if ("Num entries" > 72);
        PARAM "Value[72]"
            uint32
            present_if ("Num entries" > 72);
        PARAM "Register address[73]"
            uint32
            present_if ("Num entries" > 73);
        PARAM "Bit field mask[73]"
            uint32
            present_if ("Num entries" > 73);
        PARAM "Value[73]"
            uint32
            present_if ("Num entries" > 73);
        PARAM "Register address[74]"
            uint32
            present_if ("Num entries" > 74);
        PARAM "Bit field mask[74]"
            uint32
            present_if ("Num entries" > 74);
        PARAM "Value[74]"
            uint32
            present_if ("Num entries" > 74);
        PARAM "Register address[75]"
            uint32
            present_if ("Num entries" > 75);
        PARAM "Bit field mask[75]"
            uint32
            present_if ("Num entries" > 75);
        PARAM "Value[75]"
            uint32
            present_if ("Num entries" > 75);
        PARAM "Register address[76]"
            uint32
            present_if ("Num entries" > 76);
        PARAM "Bit field mask[76]"
            uint32
            present_if ("Num entries" > 76);
        PARAM "Value[76]"
            uint32
            present_if ("Num entries" > 76);
        PARAM "Register address[77]"
            uint32
            present_if ("Num entries" > 77);
        PARAM "Bit field mask[77]"
            uint32
            present_if ("Num entries" > 77);
        PARAM "Value[77]"
            uint32
            present_if ("Num entries" > 77);
        PARAM "Register address[78]"
            uint32
            present_if ("Num entries" > 78);
        PARAM "Bit field mask[78]"
            uint32
            present_if ("Num entries" > 78);
        PARAM "Value[78]"
            uint32
            present_if ("Num entries" > 78);
        PARAM "Register address[79]"
            uint32
            present_if ("Num entries" > 79);
        PARAM "Bit field mask[79]"
            uint32
            present_if ("Num entries" > 79);
        PARAM "Value[79]"
            uint32
            present_if ("Num entries" > 79);
        PARAM "Register address[80]"
            uint32
            present_if ("Num entries" > 80);
        PARAM "Bit field mask[80]"
            uint32
            present_if ("Num entries" > 80);
        PARAM "Value[80]"
            uint32
            present_if ("Num entries" > 80);
        PARAM "Register address[81]"
            uint32
            present_if ("Num entries" > 81);
        PARAM "Bit field mask[81]"
            uint32
            present_if ("Num entries" > 81);
        PARAM "Value[81]"
            uint32
            present_if ("Num entries" > 81);
        PARAM "Register address[82]"
            uint32
            present_if ("Num entries" > 82);
        PARAM "Bit field mask[82]"
            uint32
            present_if ("Num entries" > 82);
        PARAM "Value[82]"
            uint32
            present_if ("Num entries" > 82);
        PARAM "Register address[83]"
            uint32
            present_if ("Num entries" > 83);
        PARAM "Bit field mask[83]"
            uint32
            present_if ("Num entries" > 83);
        PARAM "Value[83]"
            uint32
            present_if ("Num entries" > 83);
        PARAM "Register address[84]"
            uint32
            present_if ("Num entries" > 84);
        PARAM "Bit field mask[84]"
            uint32
            present_if ("Num entries" > 84);
        PARAM "Value[84]"
            uint32
            present_if ("Num entries" > 84);
        PARAM "Register address[85]"
            uint32
            present_if ("Num entries" > 85);
        PARAM "Bit field mask[85]"
            uint32
            present_if ("Num entries" > 85);
        PARAM "Value[85]"
            uint32
            present_if ("Num entries" > 85);
        PARAM "Register address[86]"
            uint32
            present_if ("Num entries" > 86);
        PARAM "Bit field mask[86]"
            uint32
            present_if ("Num entries" > 86);
        PARAM "Value[86]"
            uint32
            present_if ("Num entries" > 86);
        PARAM "Register address[87]"
            uint32
            present_if ("Num entries" > 87);
        PARAM "Bit field mask[87]"
            uint32
            present_if ("Num entries" > 87);
        PARAM "Value[87]"
            uint32
            present_if ("Num entries" > 87);
        PARAM "Register address[88]"
            uint32
            present_if ("Num entries" > 88);
        PARAM "Bit field mask[88]"
            uint32
            present_if ("Num entries" > 88);
        PARAM "Value[88]"
            uint32
            present_if ("Num entries" > 88);
        PARAM "Register address[89]"
            uint32
            present_if ("Num entries" > 89);
        PARAM "Bit field mask[89]"
            uint32
            present_if ("Num entries" > 89);
        PARAM "Value[89]"
            uint32
            present_if ("Num entries" > 89);
        PARAM "Register address[90]"
            uint32
            present_if ("Num entries" > 90);
        PARAM "Bit field mask[90]"
            uint32
            present_if ("Num entries" > 90);
        PARAM "Value[90]"
            uint32
            present_if ("Num entries" > 90);
        PARAM "Register address[91]"
            uint32
            present_if ("Num entries" > 91);
        PARAM "Bit field mask[91]"
            uint32
            present_if ("Num entries" > 91);
        PARAM "Value[91]"
            uint32
            present_if ("Num entries" > 91);
        PARAM "Register address[92]"
            uint32
            present_if ("Num entries" > 92);
        PARAM "Bit field mask[92]"
            uint32
            present_if ("Num entries" > 92);
        PARAM "Value[92]"
            uint32
            present_if ("Num entries" > 92);
        PARAM "Register address[93]"
            uint32
            present_if ("Num entries" > 93);
        PARAM "Bit field mask[93]"
            uint32
            present_if ("Num entries" > 93);
        PARAM "Value[93]"
            uint32
            present_if ("Num entries" > 93);
        PARAM "Register address[94]"
            uint32
            present_if ("Num entries" > 94);
        PARAM "Bit field mask[94]"
            uint32
            present_if ("Num entries" > 94);
        PARAM "Value[94]"
            uint32
            present_if ("Num entries" > 94);
        PARAM "Register address[95]"
            uint32
            present_if ("Num entries" > 95);
        PARAM "Bit field mask[95]"
            uint32
            present_if ("Num entries" > 95);
        PARAM "Value[95]"
            uint32
            present_if ("Num entries" > 95);
        PARAM "Register address[96]"
            uint32
            present_if ("Num entries" > 96);
        PARAM "Bit field mask[96]"
            uint32
            present_if ("Num entries" > 96);
        PARAM "Value[96]"
            uint32
            present_if ("Num entries" > 96);
        PARAM "Register address[97]"
            uint32
            present_if ("Num entries" > 97);
        PARAM "Bit field mask[97]"
            uint32
            present_if ("Num entries" > 97);
        PARAM "Value[97]"
            uint32
            present_if ("Num entries" > 97);
        PARAM "Register address[98]"
            uint32
            present_if ("Num entries" > 98);
        PARAM "Bit field mask[98]"
            uint32
            present_if ("Num entries" > 98);
        PARAM "Value[98]"
            uint32
            present_if ("Num entries" > 98);
        PARAM "Register address[99]"
            uint32
            present_if ("Num entries" > 99);
        PARAM "Bit field mask[99]"
            uint32
            present_if ("Num entries" > 99);
        PARAM "Value[99]"
            uint32
            present_if ("Num entries" > 99);
    }

    COMMAND "RF PLL" 0xC1
    {
        doc "Provides RF_PLL programming information, which must match the"
            "frequency of the crystal which the device is running from."
        PARAM "Reg49_rf_pll_tx_base_adr0"
            uint8
            doc "BlueRF register 0x49.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg4a_rf_pll_tx_base_adr1"
            uint8
            doc "BlueRF register 0x4a.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg4b_rf_pll_tx_base_adr2"
            uint8
            doc "BlueRF register 0x4b.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg4c_rf_pll_tx_delta_adr0"
            uint8
            doc "BlueRF register 0x4c.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg4d_rf_pll_tx_delta_adr1"
            uint8
            doc "BlueRF register 0x4d.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg4e_rf_pll_rx_base_adr0"
            uint8
            doc "BlueRF register 0x4e.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg4f_rf_pll_rx_base_adr1"
            uint8
            doc "BlueRF register 0x4f.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg50_rf_pll_rx_base_adr2"
            uint8
            doc "BlueRF register 0x50.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg51_rf_pll_rx_delta_adr0"
            uint8
            doc "BlueRF register 0x51.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg52_rf_pll_rx_delta_adr1"
            uint8
            doc "BlueRF register 0x52.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg23_vco_cal_ref_timeout"
            uint8
            doc "BlueRF register 0x23.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";

        PARAM "vco_lut_data_in_adr1[0]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[0]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[1]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[1]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[2]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[2]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[3]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[3]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[4]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[4]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[5]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[5]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[6]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[6]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[7]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[7]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[8]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[8]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[9]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[9]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";

        PARAM "vco_lut_data_in_adr1[10]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[10]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[11]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[11]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[12]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[12]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[13]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[13]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[14]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[14]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[15]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[15]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[16]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[16]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[17]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[17]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[18]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[18]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[19]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[19]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";

        PARAM "vco_lut_data_in_adr1[20]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[20]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[21]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[21]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[22]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[22]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[23]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[23]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[24]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[24]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[25]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[25]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[26]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[26]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[27]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[27]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[28]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[28]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[29]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[29]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";

        PARAM "vco_lut_data_in_adr1[30]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[30]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[31]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[31]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[32]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[32]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[33]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[33]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[34]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[34]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[35]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[35]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[36]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[36]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[37]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[37]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[38]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[38]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr1[39]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "vco_lut_data_in_adr0[39]"
            uint8
            doc "Meaningful to RF engineers, from whom"
                "this value should be obtained.";

        PARAM "Reg14_I_txif"
            uint8
            doc "BlueRF register 0x14.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg11_I_Cp_tun"
            uint8
            doc "BlueRF register 0x11.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
        PARAM "Reg5c_tr_ctrl_adr"
            uint8
            doc "BlueRF register 0x5c.  Meaningful to RF engineers, from whom"
                "this value should be obtained.";
    }

    COMMAND "RF Run Time Data Patch" 0xC2
    {
        doc "($$$ NEEDS EXPLANATION)"
        PARAM "Num entries"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            not_in_binary_message
            decode_value = 0                    # Can only decode, not encode
            max = 10;

        # - Entry[0] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[0]"
            uint32
            doc "($$$ NEEDS EXPLANATION)"
            present_if ("Num entries" > 0);
        PARAM "Length[0]"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            binary_message_only
            encode_value = ByteArrayValidLength("Data[0]")
            present_if ("Num entries" > 0);
        PARAM "Data[0]"
            uint8[255] omit_pad_bytes
            doc "($$$ NEEDS EXPLANATION)"
            present_if ("Num entries" > 0)
            valid_length = "Length[0]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[1] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Length[1]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[1]")
            present_if ("Num entries" > 1);
        PARAM "Data[1]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 1)
            valid_length = "Length[1]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[2] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Length[2]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[2]")
            present_if ("Num entries" > 2);
        PARAM "Data[2]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 2)
            valid_length = "Length[2]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[3] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Length[3]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[3]")
            present_if ("Num entries" > 3);
        PARAM "Data[3]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 3)
            valid_length = "Length[3]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[4] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Length[4]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[4]")
            present_if ("Num entries" > 4);
        PARAM "Data[4]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 4)
            valid_length = "Length[4]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[5] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Length[5]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[5]")
            present_if ("Num entries" > 5);
        PARAM "Data[5]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 5)
            valid_length = "Length[5]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[6] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Length[6]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[6]")
            present_if ("Num entries" > 6);
        PARAM "Data[6]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 6)
            valid_length = "Length[6]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[7] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Length[7]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[7]")
            present_if ("Num entries" > 7);
        PARAM "Data[7]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 7)
            valid_length = "Length[7]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[8] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Length[8]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[8]")
            present_if ("Num entries" > 8);
        PARAM "Data[8]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 8)
            valid_length = "Length[8]"
                min = 1;                                # Minimum array length in an array context

        # - Entry[9] - - - - - - - - - - - - - - - - - - -
        PARAM "Address[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Length[9]"
            uint8
            binary_message_only
            encode_value = ByteArrayValidLength("Data[9]")
            present_if ("Num entries" > 9);
        PARAM "Data[9]"
            uint8[255] omit_pad_bytes
            present_if ("Num entries" > 9)
            valid_length = "Length[9]"
                min = 1;                                # Minimum array length in an array context
    }

    COMMAND "Init RF Registers" 0xC3
    {
        doc "($$$ NEEDS EXPLANATION)"
        PARAM "Num entries"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            not_in_binary_message
            decode_value = 0                    # Can only decode, not encode
            max = 23;
        PARAM "Register offset[0]"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            present_if ("Num entries" > 0);
        PARAM "Value[0]"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            present_if ("Num entries" > 0);
        PARAM "Register offset[1]"
            uint8
            present_if ("Num entries" > 1);
        PARAM "Value[1]"
            uint8
            present_if ("Num entries" > 1);
        PARAM "Register offset[2]"
            uint8
            present_if ("Num entries" > 2);
        PARAM "Value[2]"
            uint8
            present_if ("Num entries" > 2);
        PARAM "Register offset[3]"
            uint8
            present_if ("Num entries" > 3);
        PARAM "Value[3]"
            uint8
            present_if ("Num entries" > 3);
        PARAM "Register offset[4]"
            uint8
            present_if ("Num entries" > 4);
        PARAM "Value[4]"
            uint8
            present_if ("Num entries" > 4);
        PARAM "Register offset[5]"
            uint8
            present_if ("Num entries" > 5);
        PARAM "Value[5]"
            uint8
            present_if ("Num entries" > 5);
        PARAM "Register offset[6]"
            uint8
            present_if ("Num entries" > 6);
        PARAM "Value[6]"
            uint8
            present_if ("Num entries" > 6);
        PARAM "Register offset[7]"
            uint8
            present_if ("Num entries" > 7);
        PARAM "Value[7]"
            uint8
            present_if ("Num entries" > 7);
        PARAM "Register offset[8]"
            uint8
            present_if ("Num entries" > 8);
        PARAM "Value[8]"
            uint8
            present_if ("Num entries" > 8);
        PARAM "Register offset[9]"
            uint8
            present_if ("Num entries" > 9);
        PARAM "Value[9]"
            uint8
            present_if ("Num entries" > 9);
        PARAM "Register offset[10]"
            uint8
            present_if ("Num entries" > 10);
        PARAM "Value[10]"
            uint8
            present_if ("Num entries" > 10);
        PARAM "Register offset[11]"
            uint8
            present_if ("Num entries" > 11);
        PARAM "Value[11]"
            uint8
            present_if ("Num entries" > 11);
        PARAM "Register offset[12]"
            uint8
            present_if ("Num entries" > 12);
        PARAM "Value[12]"
            uint8
            present_if ("Num entries" > 12);
        PARAM "Register offset[13]"
            uint8
            present_if ("Num entries" > 13);
        PARAM "Value[13]"
            uint8
            present_if ("Num entries" > 13);
        PARAM "Register offset[14]"
            uint8
            present_if ("Num entries" > 14);
        PARAM "Value[14]"
            uint8
            present_if ("Num entries" > 14);
        PARAM "Register offset[15]"
            uint8
            present_if ("Num entries" > 15);
        PARAM "Value[15]"
            uint8
            present_if ("Num entries" > 15);
        PARAM "Register offset[16]"
            uint8
            present_if ("Num entries" > 16);
        PARAM "Value[16]"
            uint8
            present_if ("Num entries" > 16);
        PARAM "Register offset[17]"
            uint8
            present_if ("Num entries" > 17);
        PARAM "Value[17]"
            uint8
            present_if ("Num entries" > 17);
        PARAM "Register offset[18]"
            uint8
            present_if ("Num entries" > 18);
        PARAM "Value[18]"
            uint8
            present_if ("Num entries" > 18);
        PARAM "Register offset[19]"
            uint8
            present_if ("Num entries" > 19);
        PARAM "Value[19]"
            uint8
            present_if ("Num entries" > 19);
        PARAM "Register offset[20]"
            uint8
            present_if ("Num entries" > 20);
        PARAM "Value[20]"
            uint8
            present_if ("Num entries" > 20);
        PARAM "Register offset[21]"
            uint8
            present_if ("Num entries" > 21);
        PARAM "Value[21]"
            uint8
            present_if ("Num entries" > 21);
        PARAM "Register offset[22]"
            uint8
            present_if ("Num entries" > 22);
        PARAM "Value[22]"
            uint8
            present_if ("Num entries" > 22);
    }

    COMMAND "Init BB Registers" 0xC4
    {
        doc "DEPRECATED - PRESERVED FOR CONFIG FILE COMPATIBILITY.  USE Init BB Register Bit Fields"
            "INSTEAD!!!."
        PARAM "Num entries"
            uint8
            doc "DEPRECATED"
            not_in_binary_message
            decode_value = 0                    # Can only decode, not encode
            max = 60;
        PARAM "Register address[0]"
            uint32
            doc "DEPRECATED"
            present_if ("Num entries" > 0);
        PARAM "Value[0]"
            uint32
            doc "DEPRECATED"
            present_if ("Num entries" > 0);
        PARAM "Register address[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Value[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Register address[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Value[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Register address[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Value[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Register address[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Value[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Register address[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Value[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Register address[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Value[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Register address[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Value[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Register address[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Value[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Register address[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Value[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Register address[10]"
            uint32
            present_if ("Num entries" > 10);
        PARAM "Value[10]"
            uint32
            present_if ("Num entries" > 10);
        PARAM "Register address[11]"
            uint32
            present_if ("Num entries" > 11);
        PARAM "Value[11]"
            uint32
            present_if ("Num entries" > 11);
        PARAM "Register address[12]"
            uint32
            present_if ("Num entries" > 12);
        PARAM "Value[12]"
            uint32
            present_if ("Num entries" > 12);
        PARAM "Register address[13]"
            uint32
            present_if ("Num entries" > 13);
        PARAM "Value[13]"
            uint32
            present_if ("Num entries" > 13);
        PARAM "Register address[14]"
            uint32
            present_if ("Num entries" > 14);
        PARAM "Value[14]"
            uint32
            present_if ("Num entries" > 14);
        PARAM "Register address[15]"
            uint32
            present_if ("Num entries" > 15);
        PARAM "Value[15]"
            uint32
            present_if ("Num entries" > 15);
        PARAM "Register address[16]"
            uint32
            present_if ("Num entries" > 16);
        PARAM "Value[16]"
            uint32
            present_if ("Num entries" > 16);
        PARAM "Register address[17]"
            uint32
            present_if ("Num entries" > 17);
        PARAM "Value[17]"
            uint32
            present_if ("Num entries" > 17);
        PARAM "Register address[18]"
            uint32
            present_if ("Num entries" > 18);
        PARAM "Value[18]"
            uint32
            present_if ("Num entries" > 18);
        PARAM "Register address[19]"
            uint32
            present_if ("Num entries" > 19);
        PARAM "Value[19]"
            uint32
            present_if ("Num entries" > 19);
        PARAM "Register address[20]"
            uint32
            present_if ("Num entries" > 20);
        PARAM "Value[20]"
            uint32
            present_if ("Num entries" > 20);
        PARAM "Register address[21]"
            uint32
            present_if ("Num entries" > 21);
        PARAM "Value[21]"
            uint32
            present_if ("Num entries" > 21);
        PARAM "Register address[22]"
            uint32
            present_if ("Num entries" > 22);
        PARAM "Value[22]"
            uint32
            present_if ("Num entries" > 22);
        PARAM "Register address[23]"
            uint32
            present_if ("Num entries" > 23);
        PARAM "Value[23]"
            uint32
            present_if ("Num entries" > 23);
        PARAM "Register address[24]"
            uint32
            present_if ("Num entries" > 24);
        PARAM "Value[24]"
            uint32
            present_if ("Num entries" > 24);
        PARAM "Register address[25]"
            uint32
            present_if ("Num entries" > 25);
        PARAM "Value[25]"
            uint32
            present_if ("Num entries" > 25);
        PARAM "Register address[26]"
            uint32
            present_if ("Num entries" > 26);
        PARAM "Value[26]"
            uint32
            present_if ("Num entries" > 26);
        PARAM "Register address[27]"
            uint32
            present_if ("Num entries" > 27);
        PARAM "Value[27]"
            uint32
            present_if ("Num entries" > 27);
        PARAM "Register address[28]"
            uint32
            present_if ("Num entries" > 28);
        PARAM "Value[28]"
            uint32
            present_if ("Num entries" > 28);
        PARAM "Register address[29]"
            uint32
            present_if ("Num entries" > 29);
        PARAM "Value[29]"
            uint32
            present_if ("Num entries" > 29);
        PARAM "Register address[30]"
            uint32
            present_if ("Num entries" > 30);
        PARAM "Value[30]"
            uint32
            present_if ("Num entries" > 30);
        PARAM "Register address[31]"
            uint32
            present_if ("Num entries" > 31);
        PARAM "Value[31]"
            uint32
            present_if ("Num entries" > 31);
        PARAM "Register address[32]"
            uint32
            present_if ("Num entries" > 32);
        PARAM "Value[32]"
            uint32
            present_if ("Num entries" > 32);
        PARAM "Register address[33]"
            uint32
            present_if ("Num entries" > 33);
        PARAM "Value[33]"
            uint32
            present_if ("Num entries" > 33);
        PARAM "Register address[34]"
            uint32
            present_if ("Num entries" > 34);
        PARAM "Value[34]"
            uint32
            present_if ("Num entries" > 34);
        PARAM "Register address[35]"
            uint32
            present_if ("Num entries" > 35);
        PARAM "Value[35]"
            uint32
            present_if ("Num entries" > 35);
        PARAM "Register address[36]"
            uint32
            present_if ("Num entries" > 36);
        PARAM "Value[36]"
            uint32
            present_if ("Num entries" > 36);
        PARAM "Register address[37]"
            uint32
            present_if ("Num entries" > 37);
        PARAM "Value[37]"
            uint32
            present_if ("Num entries" > 37);
        PARAM "Register address[38]"
            uint32
            present_if ("Num entries" > 38);
        PARAM "Value[38]"
            uint32
            present_if ("Num entries" > 38);
        PARAM "Register address[39]"
            uint32
            present_if ("Num entries" > 39);
        PARAM "Value[39]"
            uint32
            present_if ("Num entries" > 39);
        PARAM "Register address[40]"
            uint32
            present_if ("Num entries" > 40);
        PARAM "Value[40]"
            uint32
            present_if ("Num entries" > 40);
        PARAM "Register address[41]"
            uint32
            present_if ("Num entries" > 41);
        PARAM "Value[41]"
            uint32
            present_if ("Num entries" > 41);
        PARAM "Register address[42]"
            uint32
            present_if ("Num entries" > 42);
        PARAM "Value[42]"
            uint32
            present_if ("Num entries" > 42);
        PARAM "Register address[43]"
            uint32
            present_if ("Num entries" > 43);
        PARAM "Value[43]"
            uint32
            present_if ("Num entries" > 43);
        PARAM "Register address[44]"
            uint32
            present_if ("Num entries" > 44);
        PARAM "Value[44]"
            uint32
            present_if ("Num entries" > 44);
        PARAM "Register address[45]"
            uint32
            present_if ("Num entries" > 45);
        PARAM "Value[45]"
            uint32
            present_if ("Num entries" > 45);
        PARAM "Register address[46]"
            uint32
            present_if ("Num entries" > 46);
        PARAM "Value[46]"
            uint32
            present_if ("Num entries" > 46);
        PARAM "Register address[47]"
            uint32
            present_if ("Num entries" > 47);
        PARAM "Value[47]"
            uint32
            present_if ("Num entries" > 47);
        PARAM "Register address[48]"
            uint32
            present_if ("Num entries" > 48);
        PARAM "Value[48]"
            uint32
            present_if ("Num entries" > 48);
        PARAM "Register address[49]"
            uint32
            present_if ("Num entries" > 49);
        PARAM "Value[49]"
            uint32
            present_if ("Num entries" > 49);

        PARAM "Register address[50]"
            uint32
            present_if ("Num entries" > 50);
        PARAM "Value[50]"
            uint32
            present_if ("Num entries" > 50);

        PARAM "Register address[51]"
            uint32
            present_if ("Num entries" > 51);
        PARAM "Value[51]"
            uint32
            present_if ("Num entries" > 51);

        PARAM "Register address[52]"
            uint32
            present_if ("Num entries" > 52);
        PARAM "Value[52]"
            uint32
            present_if ("Num entries" > 52);

        PARAM "Register address[53]"
            uint32
            present_if ("Num entries" > 53);
        PARAM "Value[53]"
            uint32
            present_if ("Num entries" > 53);

        PARAM "Register address[54]"
            uint32
            present_if ("Num entries" > 54);
        PARAM "Value[54]"
            uint32
            present_if ("Num entries" > 54);

        PARAM "Register address[55]"
            uint32
            present_if ("Num entries" > 55);
        PARAM "Value[55]"
            uint32
            present_if ("Num entries" > 55);

        PARAM "Register address[56]"
            uint32
            present_if ("Num entries" > 56);
        PARAM "Value[56]"
            uint32
            present_if ("Num entries" > 56);

        PARAM "Register address[57]"
            uint32
            present_if ("Num entries" > 57);
        PARAM "Value[57]"
            uint32
            present_if ("Num entries" > 57);

        PARAM "Register address[58]"
            uint32
            present_if ("Num entries" > 58);
        PARAM "Value[58]"
            uint32
            present_if ("Num entries" > 58);

        PARAM "Register address[59]"
            uint32
            present_if ("Num entries" > 59);
        PARAM "Value[59]"
            uint32
            present_if ("Num entries" > 59);

    }

    COMMAND "RC Calibration" 0xC6
    {
        doc "Configuration item for Bluetooth Resistivity/Capacitance(RC) calibration"
            "RC calibration is a binary search algorithm, with a"
            "best value optimization. RC calibration is performed in the"
            "Firmware initialization code space, after the BOOT code has"
            "switched the processor clock to use the internal PLL. This is"
            "required because full knowledge of the reference clock in the LPO"
            "counting module is required."
            "For reference please read [Calibration procedures for BCM2045]."

        PARAM "RC target"
            uint32
            doc "Bluetooth RC calibration target resistor for Rtune.  The default"
                "value is 948.";

        PARAM "RC override value"
            uint32
            doc "Bluetooth RC calibration override value";

        PARAM "X_0 override value"
            uint32
            doc "Bluetooth RC calibration X_0";

        PARAM "RC override flag"
            bool8
            doc "If override flag is true, device will use RC override value to override the"
                "target register and skip the calibration process."
                "If override flag is false, device will use RC target and X_0 to run the"
                "calibration process. The default value is 0.";

        PARAM "X_0 override flag"
            bool8
            doc "If X_0 override flag is true, device will use X_0 override value, otherwise"
                "It will use default X_0 value. The default value is 0.";
    }


    COMMAND "Quadrature Driver Configuration" 0xA4
    {
        doc "Configuration values for the quadrature driver"
        PARAM "Scan Period"
            uint16
            doc "Defines the initial count value for the QOC scanp counter."
	        "The counter counts at 128KHz rate, reloading the initial"
		"count when max count of 0xFFFF is reached"
		"Default is 0xFF00";
        PARAM "QOC LED 0 toggle count"
            uint16
            doc "Defines the instant when QOC LED 0 is toggled to 1"
	        "until the end of scanp counter terminal count of 0xFFFF,"
		"at which point it toggles back to 0 and the initial"
		"scanp counter value is reloaded."
		"Default is 0xFFF0";
        PARAM "QOC LED 1 toggle count"
            uint16
            doc "Defines the instant when QOC LED 1 is toggled to 1"
	        "until the end of scanp counter terminal count of 0xFFFF,"
		"at which point it toggles back to 0 and the initial"
		"scanp counter value is reloaded."
		"Default is 0xFFF0";
        PARAM "QOC LED 2 toggle count"
            uint16
            doc "Defines the instant when QOC LED 2 is toggled to 1"
	        "until the end of scanp counter terminal count of 0xFFFF,"
		"at which point it toggles back to 0 and the initial"
		"scanp counter value is reloaded."
		"Default is 0xFFF0";
        PARAM "QOC LED 3 toggle count"
            uint16
            doc "Defines the instant when the QOC LED 3 is toggled to 1"
	        "until the end of scanp counter terminal count of 0xFFFF,"
		"at which point it toggles back to 0 and the initial"
		"scanp counter value is reloaded."
		"Default is 0";
        PARAM "X axis sample instant"
            uint16
            doc "Defines the instant in the scan cycle when the X axis is sampled"
		"Default is 0xFFF8";
        PARAM "Y axis sample instant"
            uint16
            doc "Defines the instant in the scan cycle when the Y axis is sampled"
		"Default is 0xFFF8";
        PARAM "Z axis sample instant"
            uint16
            doc "Defines the instant in the scan cycle when the Z axis is sampled"
		"Default is 0xFFF8";
	PARAM "Reserved_1"
            uint16 {15:8}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "QOC LED 3 output polarity"
            uint16 {7:6}
            doc "Controls the active and idle states of the QOC LED 3 signal"
	        "Default is 1 when on, tristate when off(open source)"
            enum
            {
                {0, "1 when on, tristate when off(open source)"},
                {1, "1 when on, 0 when off"},
                {2, "tristate when on, 0 when off(open drain)"},
                {3, "0 when on, 1 when off"}
            };
        PARAM "QOC LED 2 output polarity"
            uint16 {5:4}
            doc "Controls the active and idle states of the QOC LED 2 signal"
	        "Default is 1 when on, tristate when off(open source)"
            enum
            {
                {0, "1 when on, tristate when off(open source)"},
                {1, "1 when on, 0 when off"},
                {2, "tristate when on, 0 when off(open drain)"},
                {3, "0 when on, 1 when off"}
            };
        PARAM "QOC LED 1 output polarity"
            uint16 {3:2}
            doc "Controls the active and idle states of the QOC LED 1 signal"
	        "Default is 1 when on, tristate when off(open source)"
            enum
            {
                {0, "1 when on, tristate when off(open source)"},
                {1, "1 when on, 0 when off"},
                {2, "tristate when on, 0 when off(open drain)"},
                {3, "0 when on, 1 when off"}
            };
        PARAM "QOC LED 0 output polarity"
            uint16 {1:0}
            doc "Controls the active and idle states of the QOC LED 0 signal"
	        "Default is 1 when on, 0 when off"
            enum
            {
                {0, "1 when on, tristate when off(open source)"},
                {1, "1 when on, 0 when off"},
                {2, "tristate when on, 0 when off(open drain)"},
                {3, "0 when on, 1 when off"}
            };
        PARAM "Reserved_2"
            uint8
            doc "Reserved";
        PARAM "Reserved_3"
            uint8
            doc "Reserved";
        PARAM "Reserved_4"
            uint8
            doc "Reserved";
        PARAM "GPIO Config"
            uint16
            doc "Configuration value used for each GPIO pin used for quadrature"
	        "Default is input enable and pullup (0x400)";
        PARAM "Port 0 pins used as the quad input port"
	    uint8
            doc "If TRUE, Port 0 selected as quadrature input port (P2,P3,P4,P5,P6,P7)"
                "If FALSE, Port 2 selected as quadrature input port (P32,P33,P34,P35,P36,P37)"
	        "Default is TRUE"
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
       PARAM "Reserved_5"
            uint8 {7:4}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
       PARAM "Configure P29 as Q0C LED 3"
            uint8 {3}
            doc "Indicates whether P29 should be configured as Q0C LED 0"
	        "If configured, the GPIO configuration for P29"
                "is changed to the configured value for each line."
		"If not configured as Q0C LED 3, P29 config is not modified."
	        "Default is FALSE"
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
        PARAM "Configure P28 as Q0C LED 2"
            uint8 {2}
            doc "Indicates whether P28 should be configured as Q0C LED 2"
	        "If configured, the GPIO configuration for P28"
                "is changed to the configured value for each line."
		"If not configured as Q0C LED 2, P28 config is not modified."
	        "Default is FALSE"
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
        PARAM "Configure P27 as Q0C LED 1"
            uint8 {1}
            doc "Indicates whether P27 should be configured as Q0C LED 1"
	        "If configured, the GPIO configuration for P27"
                "is changed to the configured value for each line."
		"If not configured as Q0C LED 1, P27 config is not modified"
	        "Default is FALSE"
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
        PARAM "Configure P26 as Q0C LED 0"
            uint8 {0}
            doc "Indicates whether P26 should be configured as Q0C LED 0"
	        "If configured, the GPIO configuration for P26"
                "is changed to the configured value for each line."
		"If not configured as Q0C LED 0, P26 config is not modified"
	        "Default is TRUE"
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
        PARAM "Z interface control"
            uint8 {7}
            doc "Enables/disables Z interface."
	        "Default is Enable"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Z interface Sampling rate"
            uint8 {6:4}
            doc "Controls Z interface sampling rate"
	        "Default is to sample the Z interface once per scan cycle"
            enum
            {
                {0, "Once per scan cycle"},
                {1, "Once per 2 scan cycles"},
                {2, "Once per 4 scan cycles"},
                {3, "Once per 8 scan cycles"},
                {4, "Once per 16 scan cycles"},
                {5, "Once per 32 scan cycles"},
                {6, "Once per 64 scan cycles"},
                {7, "Once per 128 scan cycles"}
            };
        PARAM "XY interface control"
            uint8 {3}
            doc "Enables/disables XY interface"
	        "Note that XY interfaces must be enabled/disabled together"
	        "Default is Disable"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "XY interface Sampling select fixed rate"
            uint8 {2}
            doc "Select XY interface Sampling fixed rate"
	        "Default is TRUE"
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
        PARAM "XY interface Sampling fixed rate"
            uint8 {1:0}
            doc "Controls XY interface sampling rate"
	        "Default is 128 KHz"
            enum
            {
                {0, "128 KHz"},
                {1, "64 KHz"},
                {2, "32 KHz"},
                {3, "16 KHz"}
            };
        PARAM "Reserved_6"
            uint8 {7:4}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Scroll with no detent"
            uint8 {3}
            doc "When enabled, allows quadrature decoding for a scroll wheel that uses no detent"
	        "Default is disabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Reserved_7"
            uint8 {2}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Quadrature interrupt/wakeup control"
            uint8 {1}
            doc "When enabled, allows quadrature interface to interrupt/wakeup the chip when it detects activity"
	        "Default is enabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Quadrature control"
            uint8 {0}
            doc "Master control for the quadrature interface. Must be enabled for X/Y/Z interfaces to work"
	        "Default is enabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "X Axis Data Polling"
            uint8
            doc "Whether the driver should collect X axis data when the HW is polled"
	        "Default is disabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Y Axis Data Polling"
            uint8
            doc "Whether the driver should collect Y axis data when the HW is polled"
	        "Default is disabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Z Axis Data Polling"
            uint8
            doc "Whether the driver should collect Z axis data when the HW is polled"
	        "Default is enabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
    }


    COMMAND "Keyscan Driver Configuration" 0xA0
    {
        doc "Configuration for the keyscan driver"
        PARAM "Row GPIO Config"
            uint16
            doc "Configuration field for all GPIOs used as rows in the keyscan matrix"
	        "Default is input enable and pullup (0x400)";
        PARAM "Col GPIO Config"
            uint16
            doc "Configuration field for all GPIOs used as columns in the keyscan matrix"
	        "Default is keyscan output enable (0x0010)";
        PARAM "Reserved_6"
            uint32 {31:18}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Extend key cycle control"
            uint32 {17}
            doc "Enable/disable delay in-between keyscans"
	        "Default is disabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Extend key cycle count"
            uint32 {16:10}
            doc "Inter-keyscan cycle delay in units of 4 MIA clocks"
	        "Default is 0" ;
        PARAM "Micro debounce count"
            uint32 {9:8}
            doc "The keyscan HW detects each key multiple times in every scan. This reduces"
	        "spurious key detection because of noise. This parameters configures the number"
		"of times the keyscan HW checks each key. Set it to the desired value minus 1,"
		" e.g. a value of 3 causes the HW to check for the key 4 times."
                "Default is 3, i.e. each key must be detected 4 times"
            min = 0
            max = 3;
        PARAM "Macro up debounce count"
            uint32 {7:4}
            doc "Use this field to configure the number of full scan cycles in which a key must"
	        "be detected as up before it is reported as up. Set this field to one less than"
		"the desired value, e.g. set it to 2 if a key should only be reported as up if"
		"it is detected up for 3 full key scan cycles. Note that this differs from micro"
		"debounce in that micro debounce checks the same key multiple times within the"
		"same scan whereas macro debounce works across multiple scans."
		"Default for this field is 3, i.e. 4 scans"
            min = 0
            max = 15;
        PARAM "Macro down debounce count"
            uint32 {3:0}
            doc "Use this field to configure the number of full scan cycles in which a key must"
	        "be detected as down before it is reported as down. Set this field to one less than"
		"the desired value, e.g. set it to 2 if a key should only be reported as down if"
		"it is detected down for 3 full key scan cycles. Note that this differs from micro"
		"debounce in that micro debounce checks the same key multiple times within the"
		"same scan whereas macro debounce works across multiple scans."
		"Default for this field is 3, i.e. 4 scans"
            min = 0
            max = 15;
        PARAM "Reserved_5"
            uint32 {31:19}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Keyscan clock behavior when idle"
            uint32 {18}
            doc "Defines keyscan clock behavior in idle state"
	        "Default is that the clock is always on, even when there is no user activity"
            enum
            {
                {0, "Gated off by MIA"},
                {1, "Always on"}
            };
        PARAM "Keyscan active rows drive"
            uint32 {17}
            doc "Enables/disables active drive on row input in between scans"
	        "This reduces the row pull-up time"
	        "Default is enabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Keyscan active col pull-up"
            uint32 {16}
            doc "Enables/disables pull-up on col output in between scans"
	        "This alleviates slow rise time on large matrices"
                "Default is disabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Number of cols"
            uint32 {15:11}
            doc "Number of columns in the keyscan matrix"
	        "Programmed value must be one less than the actual value"
                "For example, set this field to 3 when the keyscan matrix has 4 columns"
	        "Default value is 3 for MOUSE_APP, otherwise 19"
            min = 0
            max = 19;
        PARAM "Number of rows"
            uint32 {10:8}
            doc "Number of rows in the keyscan matrix"
	        "Programmed value must be one less than the actual value"
                "For example, set this field to 3 when the keyscan matrix has 4 rows"
	        "Default value is 0 for MOUSE_APP, otherwise 7"
            min = 0
            max = 7;
        PARAM "Keyscan RC ext"
            uint32 {7:6}
            doc "Programmable duration between column scans"
	        "Alleviates slow RC delay on large keyboards"
                "Default is 3 i.e. maximum delay of 3 clocks"
            min = 1
            max = 3;
        PARAM "Reserved_4"
            uint32 {5}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Reserved_3"
            uint32 {4}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Reserved_2"
            uint32 {3}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Keyscan ghost detection"
            uint32 {2}
            doc "Enable keyscan HW ghost detection"
	        "Default is enabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Reserved_1"
            uint32 {1}
            doc "Reserved"
            binary_message_only
            encode_value = 0;
        PARAM "Keyscan HW control"
            uint32 {0}
            doc "Enables/disables keyscan HW"
	        "Default is enabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
    }


    COMMAND "Button Driver Configuration" 0xA5
    {
        doc "Configuration for the button driver"
        PARAM "Number of buttons"
            uint8
            doc "Total bumber of buttons in the HID including the connect button if present"
	        "Default is 4"
            min = 0
            max = 16;
        PARAM "Process all buttons on flush"
            uint8
            doc "Whether flush requests to the driver cause the driver to process all pending events"
                "If disabled, the driver will process pending events normally"
		"Default is disabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Clear button state on flush"
            uint8
            doc "Whether flush requests cause the driver to reset the state of all buttons to up"
                "If disabled, the driver does not reset button state on receiving a flush"
		"Default is disabled"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Button 0 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
	        "Default is 0x0001"
            present_if ("Number of buttons" > 0);
        PARAM "Button 1 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
	        "Default is 0x0004"
            present_if ("Number of buttons" > 1);
        PARAM "Button 2 report bit"
            uint16
             doc "Maps detected button bit to report bit"
	         "Buttons are always detected in sequence; button tied to kso0 is detected"
		 "as button 0, button tied to kso19 is detected as button 19, etc."
	         "Default is 0x0002"
           present_if ("Number of buttons" > 2);
        PARAM "Button 3 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
	        "Default is 0x8000"
            present_if ("Number of buttons" > 3);
        PARAM "Button 4 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 4);
        PARAM "Button 5 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 5);
        PARAM "Button 6 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 6);
        PARAM "Button 7 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 7);
        PARAM "Button 8 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 8);
        PARAM "Button 9 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 9);
        PARAM "Button 10 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 10);
        PARAM "Button 11 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 11);
        PARAM "Button 12 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 12);
        PARAM "Button 13 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 13);
        PARAM "Button 14 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 14);
        PARAM "Button 15 report bit"
            uint16
            doc "Maps detected button bit to report bit"
	        "Buttons are always detected in sequence; button tied to kso0 is detected"
		"as button 0, button tied to kso19 is detected as button 19, etc."
            present_if ("Number of buttons" > 15);
    }


    COMMAND "Spiffy1 Config"  0xA6
    {
        doc "Spiffy1 GPIO configuration"

        PARAM "Input Pin Pull Config"
            uint16
            doc "Set the input Pull-up, pull-down,float configuration"
            enum
            {
                {0x0400, "Pull-Up"},
                {0x0200, "Pull-Down"},
                {0x0000, "Floating"}
            };
        PARAM "Spiffy 1 GPIO Config"
	        uint32
	        doc "Configure for SPI-1 interface, for SPI-1 only support master mode."
            "SCL will be use as SPI clock, SDA will be uase as SPI MOSI, MISO can only works for following GPIO"
            enum
            {
                { 0xe0e1e218,"MASTER1_P24_MISO"},
                { 0xe0e1e21a,"MASTER1_P26_MISO"},
                { 0xe0e1e220,"MASTER1_P32_MISO"},
                { 0xe0e1e227,"MASTER1_P39_MISO"}
            };
      }


    COMMAND "Spiffy2 Config"  0xA7
    {
        doc "Spiffy2 GPIO configuration"
        PARAM "Spiffy Master or Slave"
	        uint8
	        doc "Master or Slave mode"
            enum
            {
                {1, "Master"},
                {2, "Slave"}
            };

        PARAM "Input Pin Pull Config"
            uint16
            doc "Set the input Pull-up, pull-down,float configuration"
            enum
            {
                {0x0400, "Pull-Up"},
                {0x0200, "Pull-Down"},
                {0x0000, "Floating"}
            };
        PARAM "Spiffy 2 GPIO Config"
	        uint32
	        doc "Configure for CLK/MOSI/MISO/CS"
            enum
            {

                {0x00030001, "MASTER2_P03_CLK_P00_MOSI_P01_MISO" },
                {0x00030005, "MASTER2_P03_CLK_P00_MOSI_P05_MISO" },
                {0x00030201, "MASTER2_P03_CLK_P02_MOSI_P01_MISO" },
                {0x00030205, "MASTER2_P03_CLK_P02_MOSI_P05_MISO" },
                {0x00030401, "MASTER2_P03_CLK_P04_MOSI_P01_MISO" },
                {0x00030405, "MASTER2_P03_CLK_P04_MOSI_P05_MISO" },
                {0x00031b01, "MASTER2_P03_CLK_P27_MOSI_P01_MISO" },
                {0x00031b05, "MASTER2_P03_CLK_P27_MOSI_P05_MISO" },
                {0x00032601, "MASTER2_P03_CLK_P38_MOSI_P01_MISO" },
                {0x00032605, "MASTER2_P03_CLK_P38_MOSI_P05_MISO" },

                {0x00070001, "MASTER2_P07_CLK_P00_MOSI_P01_MISO" },
                {0x00070005, "MASTER2_P07_CLK_P00_MOSI_P05_MISO" },
                {0x00070201, "MASTER2_P07_CLK_P02_MOSI_P01_MISO" },
                {0x00070205, "MASTER2_P07_CLK_P02_MOSI_P05_MISO" },
                {0x00070401, "MASTER2_P07_CLK_P04_MOSI_P01_MISO" },
                {0x00070405, "MASTER2_P07_CLK_P04_MOSI_P05_MISO" },
                {0x00071b01, "MASTER2_P07_CLK_P27_MOSI_P01_MISO" },
                {0x00071b05, "MASTER2_P07_CLK_P27_MOSI_P05_MISO" },
                {0x00072601, "MASTER2_P07_CLK_P38_MOSI_P01_MISO" },
                {0x00072605, "MASTER2_P07_CLK_P38_MOSI_P05_MISO" },
                {0x00180019, "MASTER2_P24_CLK_P00_MOSI_P25_MISO" },
                {0x00180219, "MASTER2_P24_CLK_P02_MOSI_P25_MISO" },
                {0x00180419, "MASTER2_P24_CLK_P04_MOSI_P25_MISO" },
                {0x00181b19, "MASTER2_P24_CLK_P27_MOSI_P25_MISO" },
                {0x00182619, "MASTER2_P24_CLK_P38_MOSI_P25_MISO" },
                {0x00240019, "MASTER2_P36_CLK_P00_MOSI_P25_MISO" },
                {0x00240219, "MASTER2_P36_CLK_P02_MOSI_P25_MISO" },
                {0x00240419, "MASTER2_P36_CLK_P04_MOSI_P25_MISO" },
                {0x00241b19, "MASTER2_P36_CLK_P27_MOSI_P25_MISO" },
                {0x00242619, "MASTER2_P36_CLK_P38_MOSI_P25_MISO" },
                {0x02030001 , "SLAVE2_P02_CS_P03_CLK_P00_MOSI_P01_MISO" },
                {0x02030005 , "SLAVE2_P02_CS_P03_CLK_P00_MOSI_P05_MISO" },
                {0x02030019 , "SLAVE2_P02_CS_P03_CLK_P00_MOSI_P25_MISO" },
                {0x02030401 , "SLAVE2_P02_CS_P03_CLK_P04_MOSI_P01_MISO" },
                {0x02030405 , "SLAVE2_P02_CS_P03_CLK_P04_MOSI_P05_MISO" },
                {0x02030419 , "SLAVE2_P02_CS_P03_CLK_P04_MOSI_P25_MISO" },
                {0x02070001 , "SLAVE2_P02_CS_P07_CLK_P00_MOSI_P01_MISO" },
                {0x02070005 , "SLAVE2_P02_CS_P07_CLK_P00_MOSI_P05_MISO" },
                {0x02070019 , "SLAVE2_P02_CS_P07_CLK_P00_MOSI_P25_MISO" },
                {0x02070401 , "SLAVE2_P02_CS_P07_CLK_P04_MOSI_P01_MISO" },
                {0x02070405 , "SLAVE2_P02_CS_P07_CLK_P04_MOSI_P05_MISO" },
                {0x02070419 , "SLAVE2_P02_CS_P07_CLK_P04_MOSI_P25_MISO" },
                {0x06030001 , "SLAVE2_P06_CS_P03_CLK_P00_MOSI_P01_MISO" },
                {0x06030005 , "SLAVE2_P06_CS_P03_CLK_P00_MOSI_P05_MISO" },
                {0x06030019 , "SLAVE2_P06_CS_P03_CLK_P00_MOSI_P25_MISO" },
                {0x06030401 , "SLAVE2_P06_CS_P03_CLK_P04_MOSI_P01_MISO" },
                {0x06030405 , "SLAVE2_P06_CS_P03_CLK_P04_MOSI_P05_MISO" },
                {0x06030419 , "SLAVE2_P06_CS_P03_CLK_P04_MOSI_P25_MISO" },
                {0x06070001 , "SLAVE2_P06_CS_P07_CLK_P00_MOSI_P01_MISO" },
                {0x06070005 , "SLAVE2_P06_CS_P07_CLK_P00_MOSI_P05_MISO" },
                {0x06070019 , "SLAVE2_P06_CS_P07_CLK_P00_MOSI_P25_MISO" },
                {0x06070401 , "SLAVE2_P06_CS_P07_CLK_P04_MOSI_P01_MISO" },
                {0x06070405 , "SLAVE2_P06_CS_P07_CLK_P04_MOSI_P05_MISO" },
                {0x06070419 , "SLAVE2_P06_CS_P07_CLK_P04_MOSI_P25_MISO" },
                {0x1a181b01 , "SLAVE2_P26_CS_P24_CLK_P27_MOSI_P01_MISO" },
                {0x1a181b05 , "SLAVE2_P26_CS_P24_CLK_P27_MOSI_P05_MISO" },
                {0x1a181b19 , "SLAVE2_P26_CS_P24_CLK_P27_MOSI_P25_MISO" },
                {0x1a182101 , "SLAVE2_P26_CS_P24_CLK_P33_MOSI_P01_MISO" },
                {0x1a182105 , "SLAVE2_P26_CS_P24_CLK_P33_MOSI_P05_MISO" },
                {0x1a182119 , "SLAVE2_P26_CS_P24_CLK_P33_MOSI_P25_MISO" },
                {0x1a182601 , "SLAVE2_P26_CS_P24_CLK_P38_MOSI_P01_MISO" },
                {0x1a182605 , "SLAVE2_P26_CS_P24_CLK_P38_MOSI_P05_MISO" },
                {0x1a182619 , "SLAVE2_P26_CS_P24_CLK_P38_MOSI_P25_MISO" },
                {0x1a241b01 , "SLAVE2_P26_CS_P36_CLK_P27_MOSI_P01_MISO" },
                {0x1a241b05 , "SLAVE2_P26_CS_P36_CLK_P27_MOSI_P05_MISO" },
                {0x1a241b19 , "SLAVE2_P26_CS_P36_CLK_P27_MOSI_P25_MISO" },
                {0x1a242101 , "SLAVE2_P26_CS_P36_CLK_P33_MOSI_P01_MISO" },
                {0x1a242105 , "SLAVE2_P26_CS_P36_CLK_P33_MOSI_P05_MISO" },
                {0x1a242119 , "SLAVE2_P26_CS_P36_CLK_P33_MOSI_P25_MISO" },
                {0x1a242601 , "SLAVE2_P26_CS_P36_CLK_P38_MOSI_P01_MISO" },
                {0x1a242605 , "SLAVE2_P26_CS_P36_CLK_P38_MOSI_P05_MISO" },
                {0x1a242619 , "SLAVE2_P26_CS_P36_CLK_P38_MOSI_P25_MISO" },
                {0x20181b01 , "SLAVE2_P32_CS_P24_CLK_P27_MOSI_P01_MISO" },
                {0x20181b05 , "SLAVE2_P32_CS_P24_CLK_P27_MOSI_P05_MISO" },
                {0x20181b19 , "SLAVE2_P32_CS_P24_CLK_P27_MOSI_P25_MISO" },
                {0x20182101 , "SLAVE2_P32_CS_P24_CLK_P33_MOSI_P01_MISO" },
                {0x20182105 , "SLAVE2_P32_CS_P24_CLK_P33_MOSI_P05_MISO" },
                {0x20182119 , "SLAVE2_P32_CS_P24_CLK_P33_MOSI_P25_MISO" },
                {0x20182601 , "SLAVE2_P32_CS_P24_CLK_P38_MOSI_P01_MISO" },
                {0x20182605 , "SLAVE2_P32_CS_P24_CLK_P38_MOSI_P05_MISO" },
                {0x20182619 , "SLAVE2_P32_CS_P24_CLK_P38_MOSI_P25_MISO" },
                {0x20241b01 , "SLAVE2_P32_CS_P36_CLK_P27_MOSI_P01_MISO" },
                {0x20241b05 , "SLAVE2_P32_CS_P36_CLK_P27_MOSI_P05_MISO" },
                {0x20241b19 , "SLAVE2_P32_CS_P36_CLK_P27_MOSI_P25_MISO" },
                {0x20242101 , "SLAVE2_P32_CS_P36_CLK_P33_MOSI_P01_MISO" },
                {0x20242105 , "SLAVE2_P32_CS_P36_CLK_P33_MOSI_P05_MISO" },
                {0x20242119 , "SLAVE2_P32_CS_P36_CLK_P33_MOSI_P25_MISO" },
                {0x20242601 , "SLAVE2_P32_CS_P36_CLK_P38_MOSI_P01_MISO" },
                {0x20242605 , "SLAVE2_P32_CS_P36_CLK_P38_MOSI_P05_MISO" },
                {0x20242619 , "SLAVE2_P32_CS_P36_CLK_P38_MOSI_P25_MISO" },
                {0x27181b01 , "SLAVE2_P39_CS_P24_CLK_P27_MOSI_P01_MISO" },
                {0x27181b05 , "SLAVE2_P39_CS_P24_CLK_P27_MOSI_P05_MISO" },
                {0x27181b19 , "SLAVE2_P39_CS_P24_CLK_P27_MOSI_P25_MISO" },
                {0x27182101 , "SLAVE2_P39_CS_P24_CLK_P33_MOSI_P01_MISO" },
                {0x27182105 , "SLAVE2_P39_CS_P24_CLK_P33_MOSI_P05_MISO" },
                {0x27182119 , "SLAVE2_P39_CS_P24_CLK_P33_MOSI_P25_MISO" },
                {0x27182601 , "SLAVE2_P39_CS_P24_CLK_P38_MOSI_P01_MISO" },
                {0x27182605 , "SLAVE2_P39_CS_P24_CLK_P38_MOSI_P05_MISO" },
                {0x27182619 , "SLAVE2_P39_CS_P24_CLK_P38_MOSI_P25_MISO" },
                {0x27241b01 , "SLAVE2_P39_CS_P36_CLK_P27_MOSI_P01_MISO" },
                {0x27241b05 , "SLAVE2_P39_CS_P36_CLK_P27_MOSI_P05_MISO" },
                {0x27241b19 , "SLAVE2_P39_CS_P36_CLK_P27_MOSI_P25_MISO" },
                {0x27242101 , "SLAVE2_P39_CS_P36_CLK_P33_MOSI_P01_MISO" },
                {0x27242105 , "SLAVE2_P39_CS_P36_CLK_P33_MOSI_P05_MISO" },
                {0x27242119 , "SLAVE2_P39_CS_P36_CLK_P33_MOSI_P25_MISO" },
                {0x27242601 , "SLAVE2_P39_CS_P36_CLK_P38_MOSI_P01_MISO" },
                {0x27242605 , "SLAVE2_P39_CS_P36_CLK_P38_MOSI_P05_MISO" },
                {0x27242619 , "SLAVE2_P39_CS_P36_CLK_P38_MOSI_P25_MISO" }
            };
      }

    COMMAND "CPU Clock Config"  0xA8
    {
        doc "Parameters for CPU Clock Configuration"
        PARAM "Enable Clock Switch"
            uint8
            doc "If 1, the device is allowed to do Clock Switch.  If 0, the device must not switch clock"
            enum
            {
                {0, "Disable"},
                {1, "Enable"}
            };
        PARAM "Reserved_1"
               uint8{7:7}
               doc "Reserved";
        PARAM "Pause CPU Clock Divisor"
              uint8{6:4}
              doc "The Upper bits to program the pause CPU clock frequency"
              enum
              {
                {0x00, "DIV_0_24MHZ"},
                {0x01, "DIV_1_12MHZ"},
                {0x02, "DIV_2_8MHZ"},
                {0x03, "DIV_3_6MHZ"},
                {0x04, "DIV_4_4MHZ"},
                {0x05, "DIV_5_3MHZ"},
                {0x06, "DIV_6_2MHZ"},
                {0x07, "DIV_7_1MHZ"}
              };
        PARAM "Reserved_0"
              uint8{3:3}
              doc "Reserved";
        PARAM "CPU Clock Divisor"
              uint8{2:0}
              doc "The Lower bits to program the cpu clock frequency after the switch"
              enum
              {
                {0x00, "DIV_0_24MHZ"},
                {0x01, "DIV_1_12MHZ"},
                {0x02, "DIV_2_8MHZ"},
                {0x03, "DIV_3_6MHZ"},
                {0x04, "DIV_4_4MHZ"},
                {0x05, "DIV_5_3MHZ"},
                {0x06, "DIV_6_2MHZ"},
                {0x07, "DIV_7_1MHZ"}
              };
    }



  COMMAND "RTC Configuration" 0xA9
  {
      doc "Configure RTC Driver"

      PARAM "Oscillator Frequency in kHz"
          uint8
          doc "Oscillator Frequence for RTC. Default = 32 kHz"
          default = 32;
  }

  COMMAND "LDO Configuration" 0xAA
  {
      doc "Configure LDO Driver"

      PARAM "RESERVED"
          uint32 {31:5}
          doc "Reserved (Pin)"
          binary_message_only
          encode_value = 0;

      PARAM "LDO Sleep Output Level"
          uint32 {4:2}
          doc "Enable powe down of the bandgap in HIDDOFF mode automatically."
          enum
          {
              { 0x4,      "LDO_VOUT_0P88V" },
              { 0x5,      "LDO_VOUT_0P96V" },
              { 0x6,      "LDO_VOUT_1P04V" },
              { 0x7,      "LDO_VOUT_1P12V" },
              { 0x0,      "LDO_VOUT_1P20V" },
              { 0x1,      "LDO_VOUT_1P24V" },
              { 0x2,      "LDO_VOUT_1P28V" },
              { 0x3,      "LDO_VOUT_1P32V" }

          }
          default = 0;

      PARAM "HIDOFF Powerdown Bandgap Enable"
          uint32 {1}
          doc "Enable powe down of the bandgap in HIDDOFF mode automatically."
          enum
          {
              {1, "Enable"},
              {0, "Disable"}
          }
          default = 0;

      PARAM "LDO Control Enable"
          uint32 {0}
          doc "Enable LDO control"
          enum
          {
              {1, "Enable"},
              {0, "Disable"}
          }
          default = 0;

      PARAM "RESERVED2"
          uint32 {31:26}
          doc "Reserved (Pin)"
          binary_message_only
          encode_value = 0;

      PARAM "LDO Current Feedback for ESR Zero"
          uint32 {25:24}
          doc "LDO Current Feedback Adjustment."
          max     = 15
          default = 0;

      PARAM "LDO Current Limit Adjustment"
          uint32 {23}
          doc "LDO Current Limit Adjustment"
          default = 0;

      PARAM "LDO Current Limit Mode"
          uint32 {22}
          doc "The current limit mode if LDO Current limit enable"
              "Default Constant"
          enum
          {
              {0, "Constant"},
              {1, "Feedback"}
          }
          default = 0;

      PARAM "LDO Current Limit Enable"
          uint32 {21}
          doc "LDO Current limit enable"
              "Default Disable"
          enum
          {
              {0, "Disable"},
              {1, "Enable"}
          }
          default = 0;

      PARAM "LDO VDS Matching Amp Enable"
          uint32 {20}
          doc "Enable VDS matching amplifier for LDO operation"
              "Default Disable"
          enum
          {
              {0, "Disable"},
              {1, "Enable"}
          }
          default = 0;

      PARAM "LDO Output Adjustment"
          uint32 {19:17}
          doc "Enable powe down of the bandgap in HIDDOFF mode automatically."
          enum
          {
              { 0x4,      "LDO_VOUT_0P88V" },
              { 0x5,      "LDO_VOUT_0P96V" },
              { 0x6,      "LDO_VOUT_1P04V" },
              { 0x7,      "LDO_VOUT_1P12V" },
              { 0x0,      "LDO_VOUT_1P20V" },
              { 0x1,      "LDO_VOUT_1P24V" },
              { 0x2,      "LDO_VOUT_1P28V" },
              { 0x3,      "LDO_VOUT_1P32V" }
          }

          default = 0;

      PARAM "LDO Power Mode"
          uint32 {16}
          doc "LDO power mode."
              "Default Power Up"
          enum
          {
              {0, "Power Up"},
              {1, "Power Down"}
          }
          default = 0;

      PARAM "RESERVED3"
          uint32 {15}
          doc "Reserved (Pin)"
          binary_message_only
          encode_value = 0;

      PARAM "Bandgap Reference Voltage Adjustment"
          uint32 {14:12}
          doc "Bandgap reference voltage adjustment."
              "Default 0."
          max     = 7
          default = 0;

      PARAM "Bandgap CTAT Current Adjustment"
          uint32 {11:8}
          doc "Bandgap CTAT current adjustment"
              "Default 0."
          max     = 15
          default = 0;

      PARAM "Bandgap PTAT Current Adjustment"
          uint32 {7:4}
          doc "Bandgap PTAT current adjustment."
              "Default 0."
          max     = 15
          default = 0;

      PARAM "Bandgap Power Mode"
          uint32 {3}
          doc "Bandgap low power mode."
              "Default Power Up"
          enum
          {
              {0, "Power Up"},
              {1, "Power Down"}
          }
          default = 0;

      PARAM "LPF Filter Off Bandgap Noise"
          uint32 {2:1}
          doc "LPF enable/adjust to filter off BG noise."
              "Default disabled for fast startup."
          max     = 7
          default = 0;


      PARAM "Bandgap Low Powermode Enable"
          uint32 {0}
          doc "Bandgap low power mode."
              "Default enable."
          enum
          {
              {0, "Enable"},
              {1, "Disable"}
          }
          default = 0;
  }

  COMMAND "BLE App Hid-off config" 0x0B3
  {
    doc "Whether hid-off is enabled or not for this application."
    PARAM "Hid-off allowed"
        uint8
        doc "Bit map of when hid-off is enabled";
  }

    COMMAND "Spiffy1 Clock Speed" 0xB8
    {
        doc "Configuration of Spiffy1 clock speed"
        PARAM "Speed"
            uint32
            doc "Spiffy1 Clock Speed";
    }


    COMMAND "KB application configuration" 0xBA
    {
        doc "Keyboard application configuration. Defines behavior of the keyboard"
            "application"
        PARAM "stdRptID"
            uint8
            doc "ID of the standard report";
        PARAM "maxKeysInStdRpt"
            uint8
            doc "Maximum number of keys in standard key report. Should be set to 6";
        PARAM "bitReportID"
            uint8
            doc "Report ID for the bit mapped report";
        PARAM "numBitMappedKeys"
            uint8
            doc "Number of bit mapped keys. Size of the bit report is automatically calculated from this value"
                "according to the following formula:"
                "report size = ((num bit mapped keys) + 7)/8";
        PARAM "sleepReportID"
            uint8
            doc "Report ID for the bit mapped report";
        PARAM "pinReportID"
            uint8
            doc "Report ID of the pin entry report";
        PARAM "ledReportID"
            uint8
            doc "Report ID of the LED (output) report";
        PARAM "defaultLedState"
            uint8
            doc "Default LED state. Note that the default implementation does not tie the LED value to physical LEDs";
        PARAM "connectButtonScanIndex"
            uint8
            doc "Scan code of the connect button";
        PARAM "recoveryPollCount"
            uint8
            doc "After an error has occurred, events from multiple poll cycles are combined to ensure that transient"
                "events are not generated. The count below specifies the recovery period in poll cycles.";
        PARAM "hwFifoThresholdForIdleRateReports"
            uint8
            doc "HW fifo threshold to stop generating idle rate reports. Idle rate report will be generated"
                "as long as the number of packets in the HW fifo is below this number";
        PARAM "repeatRateInBTClocksForRolloverRpt"
            uint16
            doc "This parameter defines the rate at which a rollover report is generated when an error state (ghost or overflow) is "
                "maintained for long periods of time. The rate is in BT clock periods. If set to 0, it disables regeneration of"
                "the rollover report.";
        PARAM "hwFifoThresholdForRolloverRepeats"
            uint8
            doc "Rollover reports will only be repeated as long as the number of packets in the HW fifo is less than this threshold";
        PARAM "funcLockReportID"
            uint8
            doc "Report ID for func-lock reports";
        PARAM "defaultFuncLockState"
            uint8
            doc "Default func lock state"
             enum
            {
                {0, "FUNC_LOCK_STATE_OFF"},
                {1, "FUNC_LOCK_STATE_ON"}
            };
        PARAM "scrollReportID"
            uint8
            doc "Scroll report ID";
        PARAM "scrollReportLen"
            uint8
            doc "Length of scroll report";
        PARAM "negateScroll"
            uint8
            doc "Negate scroll data"
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
        PARAM "scrollScale"
            uint8
            doc "Scale values for scroll wheel data. Should be set to zero if no scaling is desired"
                "Scaling always divides the input data, i.e. its a shift right.";
        PARAM "pollsToKeepFracScrollData"
            uint8
            doc "Maximum number of ticks for which fractional scroll wheel motion data is kept,"
                "i.e. if no additional motion is detected, remaining fractional data is discarded."
                "If set to 0, data is never discarded. If scroll scaling is not used, should be set to"
                "0 to improve execution efficiency.";
        PARAM "scrollCombining"
            uint8
            doc "Flag indicating whether multiple scroll events should be combined into a single report"
                "Note that this will not combine any other type of event with scroll info."
            enum
            {
                {0, "FALSE"},
                {1, "TRUE"}
            };
        PARAM "maxEventSize"
            uint8
            doc "Size of each element in the app event queue. Note: This has to be at least as large as the"
                "largest event that the app will handle"
            min = 6;
        PARAM "maxEventNum"
            uint8
            doc "Maximum number of events that the app event queue can hold.";

    }


    COMMAND "KB key configuration" 0xBB
    {
        doc "This is the key translation table used to convert key scan codes returned by the keyscan driver to"
            "bits or codes in the key reports. Translation is a two step process. First the key type must be specified."
            "Valid types include standard keys that go in the standard key reports, modifier keys that go in the modifier"
            "key section of the standard report, bit-mapped keys that are reoprted as a bit in a bit map, the sleep and function lock"
            "keys which are classified seperately since they are special cases, and up to 8 user defined key types. Based on the"
            "key type the firmware calls the appropriate handler function which than uses the translation code to complete"
            "the task of putting the key in the appropriate report. Translation codes depend on the key type. For standard keys"
            "they are the USB usage codes for the keys. For modifier keys the code is a bit mapped field indicating the modifier key"
            "that it represents. For bit-mapped keys the code represents the bit number in the report controlled by the key."
            "Byte 0 in the bit report represents bit numbers 0(LSB)-7(MSB), byte 1 represents bit numbers 8(LSB)-15(MSB), and so on"

        PARAM "Number of columns"
            uint8
            doc "Defines the number of columns in the key translation table. Should be identical to the number of"
                "columns configured in the keyscan driver if the keyscan driver is in use"
            not_in_binary_message
            decode_value = 0
            min = 1
            max = 20;
        PARAM "Number of rows"
            uint8
            doc "Defines the number of rows in the key translation table. Should be identical to the number of"
                "rows configured in the keyscan driver if the keyscan driver is in use"
            not_in_binary_message
            decode_value = 0
            min = 1
            max = 8;


        PARAM "Key[Row0][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col0].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 0) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col0].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 0) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col1].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 1) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col1].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 1) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col2].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 2) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col2].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 2) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col3].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 3) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col3].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 3) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col4].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 4) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col4].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 4) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col5].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 5) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col5].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 5) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col6].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 6) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col6].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 6) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col7].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 7) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col7].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 7) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col8].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 8) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col8].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 8) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col9].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 9) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col9].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 9) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col10].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 10) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col10].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 10) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col11].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 11) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col11].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 11) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col12].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 12) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col12].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 12) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col13].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 13) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col13].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 13) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col14].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 14) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col14].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 14) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col15].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 15) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col15].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 15) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col16].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 16) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col16].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 16) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col17].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 17) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col17].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 17) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col18].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 18) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col18].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 18) and ("Number of rows" > 7));

        PARAM "Key[Row0][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 0));
        PARAM "Key[Row0][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 0));
        PARAM "Key[Row1][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 1));
        PARAM "Key[Row1][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 1));
        PARAM "Key[Row2][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 2));
        PARAM "Key[Row2][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 2));
        PARAM "Key[Row3][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 3));
        PARAM "Key[Row3][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 3));
        PARAM "Key[Row4][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 4));
        PARAM "Key[Row4][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 4));
        PARAM "Key[Row5][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 5));
        PARAM "Key[Row5][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 5));
        PARAM "Key[Row6][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 6));
        PARAM "Key[Row6][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 6));
        PARAM "Key[Row7][Col19].Type"
            uint8
            doc "See description of 'Key Translation Codes'"
            enum
            {
                {0, "None"},
                {1, "Standard"},
                {2, "Modifier"},
                {3, "Bit-Mapped"},
                {4, "Sleep"},
                {5, "Function Lock"},
                {6, "Function Lock Dependent"},
                {16, "User Defined 0"},
                {17, "User Defined 1"},
                {18, "User Defined 2"},
                {19, "User Defined 3"},
                {20, "User Defined 4"},
                {21, "User Defined 5"},
                {22, "User Defined 6"},
                {23, "User Defined 7"}
            }
            present_if (("Number of columns" > 19) and ("Number of rows" > 7));
        PARAM "Key[Row7][Col19].TranslationCode"
            uint8
            doc "See description of 'Key Translation Codes'"
            present_if (("Number of columns" > 19) and ("Number of rows" > 7));
    }


    COMMAND "Func Lock Dependent Key Translation Codes" 0xBC
    {
        doc "This is the extended key translation table for func-lock dependent keys. Func-lock dependent keys"
            "can show up in either the bit mapped key report or in standard report. Typically these are the old"
            "style function keys that have been overloaded with additional meaning depending on the state of"
            "the func lock key. When func-lock is on, the keys act identically to the old function keys and are"
            "included in the standard key report along with the rest of the standard keys. When func-lock is off"
            "these keys become bit mapped keys that are reported with the rest of the consumer keys. Since the keys"
            "have multiple meanings, the key translation doesn't have room to provide the translation code for"
            "both behaviors. Instead the translation codes used for the bit mapped and standard reports are kept"
            "in this extended table and the standard translation table contains an index into the extended table"
            "for the func-lock dependent keys."
        PARAM "Number Of Keys"
            uint8
            doc "Defines the number of func-lock dependent keys in this extended table"
            not_in_binary_message
            decode_value = 0
            min = 1
            max = 24;

        PARAM "KeyIndex[0].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 0);
        PARAM "KeyIndex[0].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 0);

        PARAM "KeyIndex[1].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 1);
        PARAM "KeyIndex[1].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 1);

        PARAM "KeyIndex[2].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 2);
        PARAM "KeyIndex[2].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 2);

        PARAM "KeyIndex[3].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 3);
        PARAM "KeyIndex[3].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 3);

        PARAM "KeyIndex[4].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 4);
        PARAM "KeyIndex[4].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 4);

        PARAM "KeyIndex[5].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 5);
        PARAM "KeyIndex[5].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 5);

        PARAM "KeyIndex[6].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 6);
        PARAM "KeyIndex[6].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 6);

        PARAM "KeyIndex[7].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 7);
        PARAM "KeyIndex[7].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 7);

        PARAM "KeyIndex[8].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 8);
        PARAM "KeyIndex[8].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 8);

        PARAM "KeyIndex[9].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 9);
        PARAM "KeyIndex[9].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 9);

        PARAM "KeyIndex[10].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 10);
        PARAM "KeyIndex[10].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 10);

        PARAM "KeyIndex[11].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 11);
        PARAM "KeyIndex[11].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 11);

        PARAM "KeyIndex[12].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 12);
        PARAM "KeyIndex[12].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 12);

        PARAM "KeyIndex[13].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 13);
        PARAM "KeyIndex[13].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 13);

        PARAM "KeyIndex[14].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 14);
        PARAM "KeyIndex[14].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 14);

        PARAM "KeyIndex[15].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 15);
        PARAM "KeyIndex[15].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 15);

        PARAM "KeyIndex[16].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 16);
        PARAM "KeyIndex[16].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 16);

        PARAM "KeyIndex[17].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 17);
        PARAM "KeyIndex[17].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 17);

        PARAM "KeyIndex[18].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 18);
        PARAM "KeyIndex[18].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 18);

        PARAM "KeyIndex[19].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 19);
        PARAM "KeyIndex[19].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 19);

        PARAM "KeyIndex[20].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 20);
        PARAM "KeyIndex[20].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 20);

        PARAM "KeyIndex[21].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 21);
        PARAM "KeyIndex[21].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 21);

        PARAM "KeyIndex[22].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 22);
        PARAM "KeyIndex[22].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 22);

        PARAM "KeyIndex[23].BitMappedTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 23);
        PARAM "KeyIndex[23].StandardTranslationCode"
            uint8
            doc "See description of main item"
            present_if ("Number Of Keys" > 23);
    }


    COMMAND "Init BB Register Bit Fields With FAB ID" 0xD0
    {
        doc "This item is used to overwrite the selected bit fields of the "
            "BB register default values during firmware initialization if the fab ID is default"
	    "or match the device fab ID."
        PARAM "FAB ID"
            uint8
	    doc "Fab ID.";
        PARAM "Num entries"
            uint8
            doc "An abstract parameter used only for encoding purposes, not present in the"
                "actual configuration item. When encoding the configuration item, determines"
                "the number of address/mask/value entries to include."
            not_in_binary_message
            decode_value = 0                                    # Can only decode, not encode
            max = 10;
        PARAM "Register address[0]"
            uint32
            doc "Address of the baseband register"
            present_if ("Num entries" > 0);
        PARAM "Bit field mask[0]"
            uint32
            doc "Bit field mask. If a bit is 1 that bit value will be changed to the new value"
                "specified"
            present_if ("Num entries" > 0);
        PARAM "Value[0]"
            uint32
            doc "Data to be written to the baseband register"
            present_if ("Num entries" > 0);
        PARAM "Register address[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Bit field mask[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Value[1]"
            uint32
            present_if ("Num entries" > 1);
        PARAM "Register address[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Bit field mask[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Value[2]"
            uint32
            present_if ("Num entries" > 2);
        PARAM "Register address[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Bit field mask[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Value[3]"
            uint32
            present_if ("Num entries" > 3);
        PARAM "Register address[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Bit field mask[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Value[4]"
            uint32
            present_if ("Num entries" > 4);
        PARAM "Register address[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Bit field mask[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Value[5]"
            uint32
            present_if ("Num entries" > 5);
        PARAM "Register address[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Bit field mask[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Value[6]"
            uint32
            present_if ("Num entries" > 6);
        PARAM "Register address[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Bit field mask[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Value[7]"
            uint32
            present_if ("Num entries" > 7);
        PARAM "Register address[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Bit field mask[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Value[8]"
            uint32
            present_if ("Num entries" > 8);
        PARAM "Register address[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Bit field mask[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Value[9]"
            uint32
            present_if ("Num entries" > 9);
        PARAM "Register address[10]"
            uint32
            present_if ("Num entries" > 10);
        PARAM "Bit field mask[10]"
            uint32
            present_if ("Num entries" > 10);
        PARAM "Value[10]"
            uint32
            present_if ("Num entries" > 10);
    }

    COMMAND "Init RF Registers With FAB ID" 0xD1
    {
        doc "($$$ NEEDS EXPLANATION)"
        PARAM "FAB ID"
            uint8
	    doc "Fab ID.";
        PARAM "Num entries"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            not_in_binary_message
            decode_value = 0                    # Can only decode, not encode
            max = 10;
        PARAM "Register offset[0]"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            present_if ("Num entries" > 0);
        PARAM "Value[0]"
            uint8
            doc "($$$ NEEDS EXPLANATION)"
            present_if ("Num entries" > 0);
        PARAM "Register offset[1]"
            uint8
            present_if ("Num entries" > 1);
        PARAM "Value[1]"
            uint8
            present_if ("Num entries" > 1);
        PARAM "Register offset[2]"
            uint8
            present_if ("Num entries" > 2);
        PARAM "Value[2]"
            uint8
            present_if ("Num entries" > 2);
        PARAM "Register offset[3]"
            uint8
            present_if ("Num entries" > 3);
        PARAM "Value[3]"
            uint8
            present_if ("Num entries" > 3);
        PARAM "Register offset[4]"
            uint8
            present_if ("Num entries" > 4);
        PARAM "Value[4]"
            uint8
            present_if ("Num entries" > 4);
        PARAM "Register offset[5]"
            uint8
            present_if ("Num entries" > 5);
        PARAM "Value[5]"
            uint8
            present_if ("Num entries" > 5);
        PARAM "Register offset[6]"
            uint8
            present_if ("Num entries" > 6);
        PARAM "Value[6]"
            uint8
            present_if ("Num entries" > 6);
        PARAM "Register offset[7]"
            uint8
            present_if ("Num entries" > 7);
        PARAM "Value[7]"
            uint8
            present_if ("Num entries" > 7);
        PARAM "Register offset[8]"
            uint8
            present_if ("Num entries" > 8);
        PARAM "Value[8]"
            uint8
            present_if ("Num entries" > 8);
        PARAM "Register offset[9]"
            uint8
            present_if ("Num entries" > 9);
        PARAM "Value[9]"
            uint8
            present_if ("Num entries" > 9);
        PARAM "Register offset[10]"
            uint8
            present_if ("Num entries" > 10);
        PARAM "Value[10]"
            uint8
            present_if ("Num entries" > 10);
    }

    COMMAND "Init Masked RF Registers" 0xCF
    {
        doc "Performs a late initialization of RF registers, written through a"
            "mask to preserve those bits already in the register which are not"
            "covered by the mask."
        PARAM "Num entries"
            uint8
            doc "The number of registers to be written"
            not_in_binary_message
            decode_value = 0                    # Can only decode, not encode
            max = 10;
        PARAM "Register offset[0]"
            uint8
            doc "The BlueRF register to be written to"
            present_if ("Num entries" > 0);
        PARAM "Mask[0]"
            uint8
            doc "The mask through which the value is to be written.  Mask bits"
                "with a value of zero will have the existing register contents"
                "preserved."
            present_if ("Num entries" > 0);
        PARAM "Value[0]"
            uint8
            doc "The value to be written through the mask"
            present_if ("Num entries" > 0);
        PARAM "Register offset[1]"
            uint8
            present_if ("Num entries" > 1);
        PARAM "Mask[1]"
            uint8
            present_if ("Num entries" > 1);
        PARAM "Value[1]"
            uint8
            present_if ("Num entries" > 1);
        PARAM "Register offset[2]"
            uint8
            present_if ("Num entries" > 2);
        PARAM "Mask[2]"
            uint8
            present_if ("Num entries" > 2);
        PARAM "Value[2]"
            uint8
            present_if ("Num entries" > 2);
        PARAM "Register offset[3]"
            uint8
            present_if ("Num entries" > 3);
        PARAM "Mask[3]"
            uint8
            present_if ("Num entries" > 3);
        PARAM "Value[3]"
            uint8
            present_if ("Num entries" > 3);
        PARAM "Register offset[4]"
            uint8
            present_if ("Num entries" > 4);
        PARAM "Mask[4]"
            uint8
            present_if ("Num entries" > 4);
        PARAM "Value[4]"
            uint8
            present_if ("Num entries" > 4);
        PARAM "Register offset[5]"
            uint8
            present_if ("Num entries" > 5);
        PARAM "Mask[5]"
            uint8
            present_if ("Num entries" > 5);
        PARAM "Value[5]"
            uint8
            present_if ("Num entries" > 5);
        PARAM "Register offset[6]"
            uint8
            present_if ("Num entries" > 6);
        PARAM "Mask[6]"
            uint8
            present_if ("Num entries" > 6);
        PARAM "Value[6]"
            uint8
            present_if ("Num entries" > 6);
        PARAM "Register offset[7]"
            uint8
            present_if ("Num entries" > 7);
        PARAM "Mask[7]"
            uint8
            present_if ("Num entries" > 7);
        PARAM "Value[7]"
            uint8
            present_if ("Num entries" > 7);
        PARAM "Register offset[8]"
            uint8
            present_if ("Num entries" > 8);
        PARAM "Mask[8]"
            uint8
            present_if ("Num entries" > 8);
        PARAM "Value[8]"
            uint8
            present_if ("Num entries" > 8);
        PARAM "Register offset[9]"
            uint8
            present_if ("Num entries" > 9);
        PARAM "Mask[9]"
            uint8
            present_if ("Num entries" > 9);
        PARAM "Value[9]"
            uint8
            present_if ("Num entries" > 9);
    }

    COMMAND "Hardware Power LUT Config" 0xD8
    {
        doc "Config item to overwrite the hardware"
            "Power control LUT"
        PARAM "FAB ID"
            uint8
	    doc "Fab ID.";
        PARAM "NSteps"
            uint8
            doc "Number of entries in the LUT."
                "Hardware supports a maximum of 12"
            max=12;
        PARAM "Byte0[0]"
            uint8
            doc "Byte 0 of the first entry";
        PARAM "Byte1[0]"
            uint8
            doc "Byte 1 of the first entry"
            default = 0x0f;
        PARAM "Byte2[0]"
            uint8
            doc "Byte 2 of the first entry"
            default = 0;
        PARAM "Byte3[0]"
            uint8
            doc "Byte 3 of the first entry"
            default = 0;
        PARAM "Byte0[1]"
            uint8
            present_if ("NSteps" > 1);
        PARAM "Byte1[1]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 1);
        PARAM "Byte2[1]"
            uint8
            default = 0
            present_if ("NSteps" > 1);
        PARAM "Byte3[1]"
            uint8
            default = 0
            present_if ("NSteps" > 1);
        PARAM "Byte0[2]"
            uint8
            present_if ("NSteps" > 2);
        PARAM "Byte1[2]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 2);
        PARAM "Byte2[2]"
            uint8
            default = 0
            present_if ("NSteps" > 2);
        PARAM "Byte3[2]"
            uint8
            default = 0
            present_if ("NSteps" > 2);
        PARAM "Byte0[3]"
            uint8
            present_if ("NSteps" > 3);
        PARAM "Byte1[3]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 3);
        PARAM "Byte2[3]"
            uint8
            default = 0
            present_if ("NSteps" > 3);
        PARAM "Byte3[3]"
            uint8
            default = 0
            present_if ("NSteps" > 3);
        PARAM "Byte0[4]"
            uint8
            present_if ("NSteps" > 4);
        PARAM "Byte1[4]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 4);
        PARAM "Byte2[4]"
            uint8
            default = 0
            present_if ("NSteps" > 4);
        PARAM "Byte3[4]"
            uint8
            default = 0
            present_if ("NSteps" > 4);
        PARAM "Byte0[5]"
            uint8
            present_if ("NSteps" > 5);
        PARAM "Byte1[5]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 5);
        PARAM "Byte2[5]"
            uint8
            default = 0
            present_if ("NSteps" > 5);
        PARAM "Byte3[5]"
            uint8
            default = 0
            present_if ("NSteps" > 5);
        PARAM "Byte0[6]"
            uint8
            present_if ("NSteps" > 6);
        PARAM "Byte1[6]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 6);
        PARAM "Byte2[6]"
            uint8
            default = 0
            present_if ("NSteps" > 6);
        PARAM "Byte3[6]"
            uint8
            default = 0
            present_if ("NSteps" > 6);
        PARAM "Byte0[7]"
            uint8
            present_if ("NSteps" > 7);
        PARAM "Byte1[7]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 7);
        PARAM "Byte2[7]"
            uint8
            default = 0
            present_if ("NSteps" > 7);
        PARAM "Byte3[7]"
            uint8
            default = 0
            present_if ("NSteps" > 7);
        PARAM "Byte0[8]"
            uint8
            present_if ("NSteps" > 8);
        PARAM "Byte1[8]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 8);
        PARAM "Byte2[8]"
            uint8
            default = 0
            present_if ("NSteps" > 8);
        PARAM "Byte3[8]"
            uint8
            default = 0
            present_if ("NSteps" > 8);
        PARAM "Byte0[9]"
            uint8
            present_if ("NSteps" > 9);
        PARAM "Byte1[9]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 9);
        PARAM "Byte2[9]"
            uint8
            default = 0
            present_if ("NSteps" > 9);
        PARAM "Byte3[9]"
            uint8
            default = 0
            present_if ("NSteps" > 9);
        PARAM "Byte0[10]"
            uint8
            present_if ("NSteps" > 10);
        PARAM "Byte1[10]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 10);
        PARAM "Byte2[10]"
            uint8
            default = 0
            present_if ("NSteps" > 10);
        PARAM "Byte3[10]"
            uint8
            default = 0
            present_if ("NSteps" > 10);
        PARAM "Byte0[11]"
            uint8
            present_if ("NSteps" > 11);
        PARAM "Byte1[11]"
            uint8
            default = 0x0f
            present_if ("NSteps" > 11);
        PARAM "Byte2[11]"
            uint8
            default = 0
            present_if ("NSteps" > 11);
        PARAM "Byte3[11]"
            uint8
            default = 0
            present_if ("NSteps" > 11);

    }



   COMMAND "RCAL RCCAL" 0xAC
    {
        doc "Configures the baud rate, mode, and thresholds for the UART transport"
        PARAM "RCal Scale"
            int16
            doc "Configures RCal Scale";
        PARAM "RCal offset"
            int16
            doc "Configures Rcal offset";
        PARAM "RCCal Scale"
            int16
            doc "Configures RC Cal Scale";
        PARAM "RCCal Offset"
            int16
            doc "Configures RC Cal Offset";
        PARAM "BTTX RCAL Scale"
            int16
            doc "Configures BTTX RCal Scale";
        PARAM "BTTX RCAL Offset"
            int16
            doc "Configures BTTX RCal Offset";
        PARAM "BTADC RcCAL Scale"
            int16
            doc "Configures BTADC RCCal Scale";
        PARAM "BTADC RcCAL Offset"
            int16
            doc "Configures BTADC RCCal Offset";
        PARAM "BTTX RcCAL Scale"
            int16
            doc "Configures BTTX RCCal Scale";
        PARAM "BTTX RcCAL Offset"
            int16
            doc "Configures BTTX RCCal Offset";
    }

    # COMMAND "RF_PLL Trim Reserved" 0xFD                               - Fixed header only

    COMMAND "BLE SMP Encryption key size configuration" 0xBD
    {
        doc "BLE SMP Encryption key size configuration"
        PARAM "Lowest Encryption Key size"
            uint8
            doc "Configures Lowest Encryption Key size"
            min = 7
            max = 16;

        PARAM "Default Encryption Key size"
            uint8
            doc "Configures Default Encryption Key size"
            min = "Lowest Encryption Key size"
            max = 16;

    }

}
